The [`bsd_shadow.set_expire`](https://github.com/saltstack/salt/blob/develop/salt/modules/bsd_shadow.py#L120) exec function assumes the expiration date of an account is passed in seconds since 1970-01-01 00:00 UTC aka "epoch".
The state function [`user.present`](https://github.com/saltstack/salt/blob/develop/salt/states/user.py#L487) always passes the attribute `expire` as days since epoch as expected by the Linux-targeting exec function [`shadow.set_expire` from `salt/modules/shadow.py`](https://github.com/saltstack/salt/blob/develop/salt/modules/shadow.py#L285).

Using the same value for accounts' expiration dates for Linux and *BSD machines will either cause the accounts to
- expire as expected on Linux but expire in the first 6 hours of January 1st 1970 on *BSD [1] or
- expire as expected on *BSD but expire in the 39660th century on Linux [2].

As a mitigation we could cause the exec functions to fail when receiving values unlikely to be correct (i.e. greater than 2200-01-01 on Linux and smaller than 1971-01-01 (but neither 0 nor -1) on *BSD).

Until we transitioned to a saner way to specify the datetime of an account's expiration (i.e. YYYY-MM-DD HH:MM) we could add the option to specify the datetime in UNIX time by adding a `s`, i.e. `1447853867s`, or in days since epoch by adding a `d`, i.e. `16757d`, on either platform.

[1]  current date in days since epoch and then the number used as seconds since epoch:

```
user@ubuntu:~% date +'(%s %:z) / 86400' -d 'now' | sed -s 's|+\([0-9]\{2\}\):\([0-9]\{2\}\)|+ \1 * 3600 + \2 * 60|' | bc
1675
user@ubuntu:~% date -u +'%Y-%m-%d %H:%M:%S %z' -d @16757
1970-01-01 04:39:17 +0000
```

[2] The other way around, UNIX time and this number used as days since epoch:

```
user@ubuntu:~%  date +%s
1447853867
user@ubuntu:~%  date -u +'%Y-%m-%d %H:%M:%S %z' -d @$(( $(date +%s) * 86400 ))
3966059-05-20 00:00:00 +0000
```
