Erroneous output when using `test=true/false` argument against 2017.7 minions. Minions are running from the head of 2017.7

Other minion versions don't exhibit this problem.

Ran this command from the master: `salt app state.apply htop test=true`
Ran this command from the minion app: `salt-call state.sls htop test=true`

This output is the same for either the master or minion--state never runs:
```
root@SSE2:~# salt app state.apply htop test=true
app:
    Passed invalid arguments to state.apply: 'bool' object is not iterable

        .. versionadded:: 2015.5.0

        This function will call :mod:`state.highstate
        <salt.modules.state.highstate>` or :mod:`state.sls
        <salt.modules.state.sls>` based on the arguments passed to this function.
        It exists as a more intuitive way of applying states.

        .. rubric:: APPLYING ALL STATES CONFIGURED IN TOP.SLS (A.K.A. :ref:`HIGHSTATE <running-highstate>`)

        To apply all configured states, simply run ``state.apply``:

        .. code-block:: bash

            salt '*' state.apply

        The following additional arguments are also accepted when applying all
        states configured in top.sls:

        test
            Run states in test-only (dry-run) mode

        pillar
            Custom Pillar values, passed as a dictionary of key-value pairs

            .. code-block:: bash

                salt '*' state.apply test pillar='{"foo": "bar"}'

            .. note::
                Values passed this way will override Pillar values set via
                ``pillar_roots`` or an external Pillar source.

        queue : False
            Instead of failing immediately when another state run is in progress,
            queue the new state run to begin running once the other has finished.

            This option starts a new thread for each queued state run, so use this
            option sparingly.

        localconfig
            Optionally, instead of using the minion config, load minion opts from
            the file specified by this argument, and then merge them with the
            options from the minion config. This functionality allows for specific
            states to be run with their own custom minion configuration, including
            different pillars, file_roots, etc.

            .. code-block:: bash

                salt '*' state.apply localconfig=/path/to/minion.yml


        .. rubric:: APPLYING INDIVIDUAL SLS FILES (A.K.A. :py:func:`STATE.SLS <salt.modules.state.sls>`)

        To apply individual SLS files, pass them as a comma-separated list:

        .. code-block:: bash

            # Run the states configured in salt://test.sls (or salt://test/init.sls)
            salt '*' state.apply test
            # Run the states configured in salt://test.sls (or salt://test/init.sls)
            # and salt://pkgs.sls (or salt://pkgs/init.sls).
            salt '*' state.apply test,pkgs

        The following additional arguments are also accepted when applying
        individual SLS files:

        test
            Run states in test-only (dry-run) mode

        pillar
            Custom Pillar values, passed as a dictionary of key-value pairs

            .. code-block:: bash

                salt '*' state.apply test pillar='{"foo": "bar"}'

            .. note::
                Values passed this way will override Pillar values set via
                ``pillar_roots`` or an external Pillar source.

        queue : False
            Instead of failing immediately when another state run is in progress,
            queue the new state run to begin running once the other has finished.

            This option starts a new thread for each queued state run, so use this
            option sparingly.

        concurrent : False
            Execute state runs concurrently instead of serially

            .. warning::

                This flag is potentially dangerous. It is designed for use when
                multiple state runs can safely be run at the same time. Do *not*
                use this flag for performance optimization.

        saltenv
            Specify a salt fileserver environment to be used when applying states

            .. versionchanged:: 0.17.0
                Argument name changed from ``env`` to ``saltenv``

            .. versionchanged:: 2014.7.0
                If no saltenv is specified, the minion config will be checked for an
                ``environment`` parameter and if found, it will be used. If none is
                found, ``base`` will be used. In prior releases, the minion config
                was not checked and ``base`` would always be assumed when the
                saltenv was not explicitly set.

        pillarenv
            Specify a Pillar environment to be used when applying states. This
            can also be set in the minion config file using the
            :conf_minion:`pillarenv` option. When neither the
            :conf_minion:`pillarenv` minion config option nor this CLI argument is
            used, all Pillar environments will be merged together.

        localconfig
            Optionally, instead of using the minion config, load minion opts from
            the file specified by this argument, and then merge them with the
            options from the minion config. This functionality allows for specific
            states to be run with their own custom minion configuration, including
            different pillars, file_roots, etc.

            .. code-block:: bash

                salt '*' state.apply test localconfig=/path/to/minion.yml
```


Master Versions Report:
```
root@SSE2:~# salt --versions-report
Salt Version:
           Salt: 2016.11.6

Dependency Versions:
           cffi: Not Installed
       cherrypy: Not Installed
       dateutil: Not Installed
      docker-py: Not Installed
          gitdb: Not Installed
      gitpython: Not Installed
          ioflo: Not Installed
         Jinja2: 2.8
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: Not Installed
           Mako: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.4.6
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
   pycryptodome: Not Installed
         pygit2: Not Installed
         Python: 2.7.12 (default, Nov 19 2016, 06:48:10)
   python-gnupg: Not Installed
         PyYAML: 3.11
          PyZMQ: 15.2.0
           RAET: Not Installed
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.2.1
            ZMQ: 4.1.4

System Versions:
           dist: Ubuntu 16.04 xenial
        machine: x86_64
        release: 4.4.0-83-generic
         system: Linux
        version: Ubuntu 16.04 xenial
```
Minion Versions Report:
```
[root@app ~]# salt --versions-report
Salt Version:
           Salt: 2017.7.0-n/a-81695a9

Dependency Versions:
           cffi: Not Installed
       cherrypy: Not Installed
       dateutil: Not Installed
      docker-py: Not Installed
          gitdb: Not Installed
      gitpython: Not Installed
          ioflo: Not Installed
         Jinja2: 2.7.2
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: Not Installed
           Mako: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.4.8
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
   pycryptodome: Not Installed
         pygit2: Not Installed
         Python: 2.7.5 (default, Nov 20 2015, 02:00:19)
   python-gnupg: Not Installed
         PyYAML: 3.11
          PyZMQ: 15.3.0
           RAET: Not Installed
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.2.1
            ZMQ: 4.1.4

System Versions:
           dist: centos 7.2.1511 Core
         locale: UTF-8
        machine: x86_64
        release: 3.10.0-327.el7.x86_64
         system: Linux
        version: CentOS Linux 7.2.1511 Core
```
