``` python
tmp = __salt__['config.option']('test')
tmp.dictupdate({'hello': 'world'})
```

Now your config.option state has been modified everywhere. Funny thing is, who knows which portion of the global state has been modified, since this does lookups from multiple datastructures.

A deepcopy should definitely be returned here, rather than a mutable object. My hope is that no modules accidentally rely on these side-effects. Maybe the default call should return a deepcopy, but there should be an option to get mutable state, for anything that relies on updating the state? Really, though, anything doing this should be using **context** to store their mutable copy.
