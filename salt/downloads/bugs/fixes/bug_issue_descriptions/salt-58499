**Description**
```
salt '*' textfsm.index 'sh ver' textfsm_path=salt://templates/
```

This command should automatically lookup the index file inside salt://templates/ folder to find the correct Textfsm template. 

This lookup does not happen or is broken ? 

When calling the template directly , parsing works, but the goal of the index file is exactly not to memorize the name of the template. 

```
salt '*' net.cli "sh ip int br" textfsm_parse=true textfsm_template=salt://templates/cisco_ios_show_ip_interface_brief.textfsm
```


**Setup**

git clone https://github.com/networktocode/ntc-templates



**Steps to Reproduce the behavior**

```




 salt '*' net.cli "sh ip int br" textfsm_parse=true  textfsm_path=salt://templates/
r1:
    ----------
    comment:
        Unable to process the output from sh ip int br: TextFSM does not seem that has clitable embedded..
    out:
        ----------
        sh ip int br:
            Interface                  IP-Address      OK? Method Status                Protocol
            GigabitEthernet0/0         172.16.173.136  YES DHCP   up                    up
            GigabitEthernet0/1         172.16.0.2      YES NVRAM  up                    up
            GigabitEthernet0/2         172.17.0.2      YES NVRAM  down                  down
            GigabitEthernet0/3         unassigned      YES NVRAM  administratively down down
    result:
        True



[DEBUG   ] textfsm_path: salt://templates/
[DEBUG   ] TextFSM command-template mapping: {}
[DEBUG   ] index_file: None
[DEBUG   ] platform_grain_name: os
[DEBUG   ] platform_column_name: Platform
[DEBUG   ] Starting to analyse the raw outputs
[DEBUG   ] Output from command: sh ip int br
[DEBUG   ] Interface                  IP-Address      OK? Method Status                Protocol
GigabitEthernet0/0         172.16.173.136  YES DHCP   up                    up
GigabitEthernet0/1         172.16.0.2      YES NVRAM  up                    up
GigabitEthernet0/2         172.17.0.2      YES NVRAM  down                  down
GigabitEthernet0/3         unassigned      YES NVRAM  administratively down down
[DEBUG   ] Using the templates under salt://templates/
[ERROR   ] TextFSM does not seem that has clitable embedded.
[DEBUG   ] Processed CLI output:
[DEBUG   ] {'out': None, 'result': False, 'comment': 'TextFSM does not seem that has clitable embedded.'}
[DEBUG   ] Apparently this did not work, returning the raw output
[ERROR   ]
Unable to process the output from sh ip int br: TextFSM does not seem that has clitable embedded..

```
```

salt '*' net.cli "sh ip int br" textfsm_parse=true textfsm_template=salt://templates/cisco_ios_show_ip_interface_brief.textfsm
r1:
    ----------
    comment:
    out:
        ----------
        sh ip int br:
            |_
              ----------
              intf:
                  GigabitEthernet0/0
              ipaddr:
                  172.16.173.136
              proto:
                  up
              status:
                  up
            |_
              ----------
              intf:
                  GigabitEthernet0/1
              ipaddr:
                  172.16.0.2
              proto:
                  up
              status:
                  up
            |_
              ----------
              intf:
                  GigabitEthernet0/2
              ipaddr:
                  172.17.0.2
              proto:
                  down
              status:
                  down
            |_
              ----------
              intf:
                  GigabitEthernet0/3
              ipaddr:
                  unassigned
              proto:
                  down
              status:
                  administratively down
    result:
        True

DEBUG   ] Using salt://templates/cisco_ios_show_ip_interface_brief.textfsm to process the command: sh ip int br
[DEBUG   ] Using the saltenv: base
[DEBUG   ] Caching salt://templates/cisco_ios_show_ip_interface_brief.textfsm using the Salt fileserver
[DEBUG   ] Initializing new AsyncZeroMQReqChannel for ('/Users/sharky/python/salt/salt_proxy/pki/proxy', 'r1', 'tcp://127.0.0.1:4506', 'aes')
[DEBUG   ] Initializing new AsyncAuth for ('/Users/sharky/python/salt/salt_proxy/pki/proxy', 'r1', 'tcp://127.0.0.1:4506')
[DEBUG   ] Connecting the Minion to the Master URI (for the return server): tcp://127.0.0.1:4506
[DEBUG   ] Trying to connect to: tcp://127.0.0.1:4506
[DEBUG   ] In saltenv 'base', looking at rel_path 'templates/cisco_ios_show_ip_interface_brief.textfsm' to resolve 'salt://templates/cisco_ios_show_ip_interface_brief.textfsm'
[DEBUG   ] In saltenv 'base', ** considering ** path '/Users/sharky/python/salt/salt_proxy/var/cache/salt/proxy/r1/files/base/templates/cisco_ios_show_ip_interface_brief.textfsm' to resolve 'salt://templates/cisco_ios_show_ip_interf
ace_brief.textfsm'
[DEBUG   ] Reading TextFSM template from cache path: /Users/sharky/python/salt/salt_proxy/var/cache/salt/proxy/r1/files/base/templates/cisco_ios_show_ip_interface_brief.textfsm
[DEBUG   ] Value INTF (\S+)
Value IPADDR (\S+)
Value STATUS (up|down|administratively down)
Value PROTO (up|down)
Value IPADDR (\S+)
Value STATUS (up|down|administratively down)
Value PROTO (up|down)

Start
  ^${INTF}\s+${IPADDR}\s+\w+\s+\w+\s+${STATUS}\s+${PROTO} -> Record
  # Capture time-stamp if vty line has command time-stamping turned on
  ^Load\s+for\s+
  ^Time\s+source\s+is

[DEBUG   ] Processing the raw text:
[DEBUG   ] Interface                  IP-Address      OK? Method Status                Protocol
GigabitEthernet0/0         172.16.173.136  YES DHCP   up                    up
GigabitEthernet0/1         172.16.0.2      YES NVRAM  up                    up
GigabitEthernet0/2         172.17.0.2      YES NVRAM  down                  down
GigabitEthernet0/3         unassigned      YES NVRAM  administratively down down
[DEBUG   ] Cli Table:
[DEBUG   ] [['GigabitEthernet0/0', '172.16.173.136', 'up', 'up'], ['GigabitEthernet0/1', '172.16.0.2', 'up', 'up'], ['GigabitEthernet0/2', '172.17.0.2', 'down', 'down'], ['GigabitEthernet0/3', 'unassigned', 'administratively down', 'down']]
[DEBUG   ] FSM handler:
[DEBUG   ] Value INTF (\S+)
Value IPADDR (\S+)
Value STATUS (up|down|administratively down)
Value PROTO (up|down)

Start
  ^${INTF}\s+${IPADDR}\s+\w+\s+\w+\s+${STATUS}\s+${PROTO} -> Record
  ^Load\s+for\s+
  ^Time\s+source\s+is

[DEBUG   ] Extraction result:
[DEBUG   ] [{'intf': 'GigabitEthernet0/0', 'ipaddr': '172.16.173.136', 'status': 'up', 'proto': 'up'}, {'intf': 'GigabitEthernet0/1', 'ipaddr': '172.16.0.2', 'status': 'up', 'proto': 'up'}, {'intf': 'GigabitEthernet0/2', 'ipaddr': '172.17.0.2', 'status': 'down', 'proto': 'down'}, {'intf': 'GigabitEthernet0/3', 'ipaddr': 'unassigned', 'status': 'administratively down', 'proto': 'down'}]
[DEBUG   ] Processed CLI output:
[DEBUG   ] {'result': True, 'comment': '', 'out': [{'intf': 'GigabitEthernet0/0', 'ipaddr': '172.16.173.136', 'status': 'up', 'proto': 'up'}, {'intf': 'GigabitEthernet0/1', 'ipaddr': '172.16.0.2', 'status': 'up', 'proto': 'up'}, {'intf': 'GigabitEthernet0/2', 'ipaddr': '172.17.0.2', 'status': 'down', 'proto': 'down'}, {'intf': 'GigabitEthernet0/3', 'ipaddr': 'unassigned', 'status': 'administratively down', 'proto': 'down'}]}
[DEBUG   ] All good, sh ip int br has a nice output!
[DEBUG   ] Minion return retry timer set to 8 seconds (randomized)
        
```





**Expected behavior**
A clear and concise description of what you expected to happen.

**Versions Report**


```
 salt -V
Salt Version:
           Salt: 3001.1

Dependency Versions:
           cffi: 1.12.2
       cherrypy: unknown
       dateutil: 2.8.0
      docker-py: Not Installed
          gitdb: 2.0.6
      gitpython: 2.1.15
         Jinja2: 2.10.1
        libgit2: Not Installed
       M2Crypto: Not Installed
           Mako: 1.0.7
   msgpack-pure: Not Installed
 msgpack-python: 1.0.0
   mysql-python: Not Installed
      pycparser: 2.19
       pycrypto: Not Installed
   pycryptodome: 3.9.7
         pygit2: Not Installed
         Python: 3.6.8 (default, Nov  8 2019, 21:16:45)
   python-gnupg: 0.4.4
         PyYAML: 5.3.1
          PyZMQ: 18.0.1
          smmap: 3.0.4
        timelib: 0.2.4
        Tornado: 4.5.3
            ZMQ: 4.3.1

System Versions:
           dist: darwin 19.6.0
         locale: UTF-8
        machine: x86_64
        release: 19.6.0
         system: Darwin
        version: 10.15.6 x86_64
```

