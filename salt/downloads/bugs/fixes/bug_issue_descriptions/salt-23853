While rendering a pillar using the python renderer randomly the import salt.pillar gets assigned to an empy dictionary. Once assigned to it, the system doesn't recover.

Tested on centos 7 using the epel repository package. Salt version:

```
[root@salt salt]# salt --version
salt 2015.5.0 (Lithium)
```

Pillar tree filesystem structure:

```
|--srv  
|    |--pillar
|    |    |--common
|    |    |    |--nginx.sls
|    |    | --customers
|    |    |    |--salt.sls 
|    |    |--top.sls
```

The file contents, as well as the stacktrace and master relevant config, can be found in the gist below:
https://gist.github.com/d15068df2f2a5bf05b23

To replicate the error it's only needed to have 1 minion to be able to target it, and call:
`salt '*' pillar.items`

Sooner or later, as i said it's random, the value of salt.pillar becomes an empty dictionary. 

Changing the line 2014 to something like:

```
...
from salt.pillar import Pillar as PillarTest
pillar = PillarTest(
...
```

Everything works, but salt.pillar is still assigned to {} making other code that relies on the lib to rise the same exception. If i change the salt.sls file name to something like saltcustomer.sls i can no longer replicate the error.

I think that maybe using salt.sls as a name for a pillar, maybe it affects more salt zones, causes some sort of name collision that ends with salt.pillar being assigned to {}

If you need something and i don't answer here just poke me to jvblasco@onestic.com.

Thanks.
