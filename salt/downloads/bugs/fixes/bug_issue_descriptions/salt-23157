When I contributed the splay module in https://github.com/saltstack/salt/pull/22835 I did not consider that it would potentially allow a user to run a command from a blacklisted module, since 'splay.splay' is what ends up being checked against the ACL rather than the function passed as an argument.

My reasoning behind implementing splay as module was basically (1) simplicity of implementation and use, and (2) so that the hash calculations would be offloaded to the minions...calculating thousands of hashes on the master all at once would kind of defeat the purpose of splaying in the first place :)

Since the blacklist exists within the masters opts, there is no way for a minion (AFAIK) to have access to the blacklist, which precludes us from doing blacklist filtering inside the module itself, making this more complicated.  I have a few ideas on how this could be resolved, so I wanted to check what preference, if any, the Salt team has before submitting a pull request.

I personally lean towards the module implementation.  At first blush, this would require the master to somehow be aware of 'wrapper' modules as distinct from other modules so that it can check the function being wrapped against the client blacklist.  A simple way to accomplish this could be to require that wrapper modules fulfill certain requirements, like having a specific kwarg for the wrapped function that the master knows to run through ClientACL().cmd_is_blacklisted(), but that might be a little hacky.  

Another option would be to diverge from the module implementation and reimplement as a CLI option more in line with the current implementation of batch.  The obvious plus side of this is that it would negate any need to alter how the master checks functions against the blacklist.

Sorry for my oversight when submitting the module!  I hope that we can find an agreeable way to integrate this functionality, as I've found it incredibly useful.
