salt-call --versions:

```
           Salt: 2015.5.3
         Python: 2.6.9 (unknown, Apr  1 2015, 18:16:00)
         Jinja2: 2.7.2
       M2Crypto: 0.21.1
 msgpack-python: 0.4.6
   msgpack-pure: Not Installed
       pycrypto: 2.6.1
        libnacl: Not Installed
         PyYAML: 3.10
          ioflo: Not Installed
          PyZMQ: 14.3.1
           RAET: Not Installed
            ZMQ: 3.2.5
           Mako: Not Installed
        Tornado: Not Installed
```

I believe that I have a case where the ordering of states is not working properly.

I have a file root with the following files in it:

postfix.sls:

```
postfix:
  service.running
```

python-pip.sls:

```
python_pip_pkg:
  pkg.latest:
    - pkgs:
      - python26-pip
      - python27-pip
```

docker-py.sls:

```
include:
  - base: python-pip

docker-py:
  pip.installed:
    - name: docker-py>=1.2.2
    - bin_env: /usr/bin/pip-2.7
    - watch_in:
      - service: postfix
```

The 
Here a result of trying to use them before installing pip:

```
# salt-call --local --file-root /root/blah state.apply postfix,docker-py
local:
    - The function "state.highstate" is running as PID 13502 and was started at 2015, Aug 07 20:49:59.225647 with jid 20150807204959225647
# salt-call --local --file-root /root/blah state.apply postfix,docker-py 2>&1 | sed 's/^/    /'
[INFO    ] Loading fresh modules for state activity
[INFO    ] Fetching file from saltenv 'base', ** skipped ** latest already in cache 'salt://postfix.sls'
[INFO    ] Fetching file from saltenv 'base', ** skipped ** latest already in cache 'salt://docker-py.sls'
[INFO    ] Fetching file from saltenv 'base', ** skipped ** latest already in cache 'salt://python-pip.sls'
/usr/lib64/python2.6/dist-packages/Crypto/Util/number.py:57: PowmInsecureWarning: Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability.
  _warn("Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability.", PowmInsecureWarning)
[ERROR   ] An un-handled exception was caught by salt's global exception handler:
KeyError: 'pip.installed'
Traceback (most recent call last):
  File "/usr/bin/salt-call", line 11, in <module>
    salt_call()
  File "/usr/lib/python2.6/site-packages/salt/scripts.py", line 227, in salt_call
    client.run()
  File "/usr/lib/python2.6/site-packages/salt/cli/call.py", line 69, in run
    caller.run()
  File "/usr/lib/python2.6/site-packages/salt/cli/caller.py", line 236, in run
    ret = self.call()
  File "/usr/lib/python2.6/site-packages/salt/cli/caller.py", line 138, in call
    ret['return'] = func(*args, **kwargs)
  File "/usr/lib/python2.6/site-packages/salt/modules/state.py", line 296, in apply_
    return sls(mods, **kwargs)
  File "/usr/lib/python2.6/site-packages/salt/modules/state.py", line 681, in sls
    ret = st_.state.call_high(high_)
  File "/usr/lib/python2.6/site-packages/salt/state.py", line 2067, in call_high
    ret = dict(list(disabled.items()) + list(self.call_chunks(chunks).items()))
  File "/usr/lib/python2.6/site-packages/salt/state.py", line 1623, in call_chunks
    running = self.call_chunk(low, running, chunks)
  File "/usr/lib/python2.6/site-packages/salt/state.py", line 1858, in call_chunk
    running = self.call_chunk(chunk, running, chunks)
  File "/usr/lib/python2.6/site-packages/salt/state.py", line 1769, in call_chunk
    self._mod_init(low)
  File "/usr/lib/python2.6/site-packages/salt/state.py", line 612, in _mod_init
    self.states['{0}.{1}'.format(low['state'], low['fun'])]  # pylint: disable=W0106
  File "/usr/lib/python2.6/site-packages/salt/utils/lazy.py", line 90, in __getitem__
    raise KeyError(key)
KeyError: 'pip.installed'
Traceback (most recent call last):
  File "/usr/bin/salt-call", line 11, in <module>
    salt_call()
  File "/usr/lib/python2.6/site-packages/salt/scripts.py", line 227, in salt_call
    client.run()
  File "/usr/lib/python2.6/site-packages/salt/cli/call.py", line 69, in run
    caller.run()
  File "/usr/lib/python2.6/site-packages/salt/cli/caller.py", line 236, in run
    ret = self.call()
  File "/usr/lib/python2.6/site-packages/salt/cli/caller.py", line 138, in call
    ret['return'] = func(*args, **kwargs)
  File "/usr/lib/python2.6/site-packages/salt/modules/state.py", line 296, in apply_
    return sls(mods, **kwargs)
  File "/usr/lib/python2.6/site-packages/salt/modules/state.py", line 681, in sls
    ret = st_.state.call_high(high_)
  File "/usr/lib/python2.6/site-packages/salt/state.py", line 2067, in call_high
    ret = dict(list(disabled.items()) + list(self.call_chunks(chunks).items()))
  File "/usr/lib/python2.6/site-packages/salt/state.py", line 1623, in call_chunks
    running = self.call_chunk(low, running, chunks)
  File "/usr/lib/python2.6/site-packages/salt/state.py", line 1858, in call_chunk
    running = self.call_chunk(chunk, running, chunks)
  File "/usr/lib/python2.6/site-packages/salt/state.py", line 1769, in call_chunk
    self._mod_init(low)
  File "/usr/lib/python2.6/site-packages/salt/state.py", line 612, in _mod_init
    self.states['{0}.{1}'.format(low['state'], low['fun'])]  # pylint: disable=W0106
  File "/usr/lib/python2.6/site-packages/salt/utils/lazy.py", line 90, in __getitem__
    raise KeyError(key)
KeyError: 'pip.installed'
```

Running the previous command with debug logging appears to indicate that the pip module is LazyLoaded just before the crash and before it ever tries applying any of the states. I expected the python-pip state file to be applied first since it is included from the docker-py which actually happens if I remove the watch_in requisite from the docker-py. I actually think this is an important piece of info for this bug.

I also tried other cases.

If I install pip before running the command, it will work.

If I swap the postfix and docker-py states on the commandline before I install pip, it also works:

```
# salt-call --local --file-root /root/blah state.apply docker-py,postfix
[INFO    ] Loading fresh modules for state activity
[INFO    ] Fetching file from saltenv 'base', ** skipped ** latest already in cache 'salt://docker-py.sls'
[INFO    ] Fetching file from saltenv 'base', ** skipped ** latest already in cache 'salt://python-pip.sls'
[INFO    ] Fetching file from saltenv 'base', ** skipped ** latest already in cache 'salt://postfix.sls'
[INFO    ] Running state [python_pip_pkg] at time 20:52:17.637019
[INFO    ] Executing state pkg.latest for python_pip_pkg
[INFO    ] Executing command "repoquery --plugins --queryformat '%{NAME}_|-%{VERSION}_|-%{RELEASE}_|-%{ARCH}_|-%{REPOID}' --all --pkgnarrow=installed" in directory '/root'
[INFO    ] Executing command ['yum', '-q', 'clean', 'expire-cache'] in directory '/root'
[INFO    ] Executing command ['yum', '-q', 'check-update'] in directory '/root'
[INFO    ] Executing command "repoquery --plugins --queryformat '%{NAME}_|-%{VERSION}_|-%{RELEASE}_|-%{ARCH}_|-%{REPOID}'   --pkgnarrow=available python26-pip python27-pip" in directory '/root'
[INFO    ] Executing command 'yum -y     install python26-pip python27-pip' in directory '/root'
[INFO    ] Executing command "repoquery --plugins --queryformat '%{NAME}_|-%{VERSION}_|-%{RELEASE}_|-%{ARCH}_|-%{REPOID}' --all --pkgnarrow=installed" in directory '/root'
[INFO    ] Installed Packages:
python26-pip changed from absent to 6.1.1-1.20.amzn1
python27-pip changed from absent to 6.1.1-1.20.amzn1

[INFO    ] Loading fresh modules for state activity
[INFO    ] Completed state [python_pip_pkg] at time 20:52:31.346377
[INFO    ] Running state [docker-py>=1.2.2] at time 20:52:31.483259
[INFO    ] Executing state pip.installed for docker-py>=1.2.2
[INFO    ] Executing command '/usr/bin/pip-2.7 freeze' in directory '/root'
[INFO    ] Executing command '/usr/bin/pip-2.7 install' in directory '/root'
[INFO    ] Python package docker-py>=1.2.2 was already installed
All packages were successfully installed
[INFO    ] Completed state [docker-py>=1.2.2] at time 20:52:31.967712
[INFO    ] Running state [postfix] at time 20:52:31.969605
[INFO    ] Executing state service.running for postfix
[INFO    ] Executing command '/sbin/service postfix status' in directory '/root'
[INFO    ] The service postfix is already running
[INFO    ] Completed state [postfix] at time 20:52:31.988342
local:
    ----------
    pip_|-docker-py_|-docker-py>=1.2.2_|-installed:
        ----------
        __run_num__:
            1
        changes:
            ----------
        comment:
            Python package docker-py>=1.2.2 was already installed
            All packages were successfully installed
        duration:
            484.453
        name:
            docker-py>=1.2.2
        result:
            True
        start_time:
            20:52:31.483259
    pkg_|-python_pip_pkg_|-python_pip_pkg_|-latest:
        ----------
        __run_num__:
            0
        changes:
            ----------
            python26-pip:
                ----------
                new:
                    6.1.1-1.20.amzn1
                old:
            python27-pip:
                ----------
                new:
                    6.1.1-1.20.amzn1
                old:
        comment:
            The following packages were successfully installed/upgraded: python26-pip, python27-pip
        duration:
            13709.358
        name:
            python_pip_pkg
        result:
            True
        start_time:
            20:52:17.637019
    service_|-postfix_|-postfix_|-running:
        ----------
        __run_num__:
            2
        changes:
            ----------
        comment:
            The service postfix is already running
        duration:
            18.737
        name:
            postfix
        result:
            True
        start_time:
            20:52:31.969605
```

If I explicitly prepend the applied states with the "python-pip" state file, it works:

```
# salt-call --local --file-root /root/blah state.apply python-pip,postfix,docker-py
...
```

If I remove the "watch_in" requisite from the docker-py state in the docker-py.sls file, it will also work. However, I want to restart the postfix service whenever docker-py is changed, so I actually do want that requisite.

Just so you know, the actual daemon that I am dealing with is one in use at my company. I am just using postfix so that the examples can work more easily for others.
