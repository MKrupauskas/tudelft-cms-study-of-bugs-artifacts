**Description**
I am using masterless setup with caller reactor.
Salt 3000.3 & 3001.

Minion config:
```
engines:
  - reactor:
reactor:
  - 'test':
    - salt://reactor/test.sls
```

reactor/test.sls:

```
test:
  caller.test.ping
```

Output:

```
19:39:12 - salt.fileclient:1295 - INFO - Fetching file from saltenv 'base', ** done ** 'reactor/test.sls'
19:39:14 - salt.utils.process:786 - ERROR - An un-handled exception from the multiprocessing process 'Reactor-1:2:1' was caught:
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/salt/utils/process.py", line 777, in wrapped_run_func
    return run_func()
  File "/usr/local/lib/python3.6/dist-packages/salt/utils/reactor.py", line 309, in run
    self.call_reactions(chunks)
  File "/usr/local/lib/python3.6/dist-packages/salt/utils/reactor.py", line 232, in call_reactions
    self.wrap.run(chunk)
  File "/usr/local/lib/python3.6/dist-packages/salt/utils/reactor.py", line 373, in run
    self.populate_client_cache(low)
  File "/usr/local/lib/python3.6/dist-packages/salt/utils/reactor.py", line 366, in populate_client_cache
    self.opts["conf_file"]
  File "/usr/local/lib/python3.6/dist-packages/salt/client/__init__.py", line 2117, in __init__
    self.sminion = salt.minion.SMinion(self.opts)
  File "/usr/local/lib/python3.6/dist-packages/salt/minion.py", line 921, in __init__
    io_loop.run_sync(lambda: self.eval_master(self.opts, failed=True))
  File "/usr/local/lib/python3.6/dist-packages/salt/ext/tornado/ioloop.py", line 454, in run_sync
    self.start()
  File "/usr/local/lib/python3.6/dist-packages/salt/ext/tornado/ioloop.py", line 757, in start
    raise RuntimeError("IOLoop is already running")
RuntimeError: IOLoop is already running
19:39:14 - salt.engines:140 - CRITICAL - Engine 'reactor' could not be started!
```
