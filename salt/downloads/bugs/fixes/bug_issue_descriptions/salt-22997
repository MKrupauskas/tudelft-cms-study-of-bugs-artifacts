I found two situations here:

One is when you have a broken /etc/salt/minion config file.  In that case, salt-call always prints the fatal error to stdout, ignoring --log-level=quiet.  Oddly enough, it also ignores --log-file - it _creates_ the logfile, but the file is empty.

My test here has a config file but no grains defined, so the minion matches nothing in top.sls:

```
# salt-call --log-level=quiet --log-file-level=error --log-file=/tmp/salt.err state.highstate
local:
----------
          ID: states
    Function: no.None
      Result: False
     Comment: No Top file or external nodes data matches found
     Started: 
    Duration: 
     Changes:   

Summary
------------
Succeeded: 0
Failed:    1
------------
Total states run:     1
# ls -l /tmp/salt.err 
-rw-r--r-- 1 root root 0 Apr 23 11:17 /tmp/salt.err

```

The other case is similar - with a fatal error such as a render error, --log-level=quiet does not suppress printing the error message, yet this time --log-file does actually work correctly.

In this test, I reference an undefined jinja variable in a sls file:

```
# salt-call --log-level=quiet --log-file-level=error --log-file=/tmp/salt.err state.highstate
local:
    Data failed to compile:
----------
    Rendering SLS 'base:tasks.webtest' failed: Jinja variable 'test' is undefined
# cat /tmp/salt.err
2015-04-23 12:53:29,723 [salt.state       ][CRITICAL] Rendering SLS 'base:tasks.webtest' failed: Jinja variable 'test' is undefined
```

Perhaps I misunderstand the meaning of 'quiet' for the --log-level options?
