**Description**
The win_dacl utility cannot correctly resolve the EventLog (NT Service\EventLog) user.

**Setup**
This has been tested on Windows Server 2016.
  
**Steps to Reproduce the behavior**
Given this following SLS:
```
EventLogDirectoryPerms:
  file.directory:
    - name: c:\Windows\system32\winevt\Logs
    - win_inheritance: False
    - win_owner: SYSTEM
    - win_perms:
        Administrators:
          perms: full_control
        NT Service\EventLog:
          perms: full_control
        SYSTEM:
          perms: full_control
```

When attempting to apply the state, the following errors are produced.
```
salt-call.bat : [ERROR   ] Invalid user/group or sid: EventLog
    + CategoryInfo          : NotSpecified: ([ERROR   ] Inva...r sid: EventLog:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError
Traceback (most recent call last):
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 1130, in get_sid
    sid = win32security.ConvertStringSidToSid(sid)
pywintypes.error: (1337, 'ConvertStringSidToSid', 'The security ID structure is invalid.')
[ERROR   ] An exception occurred in this state: Traceback (most recent call last):
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 1130, in get_sid
    sid = win32security.ConvertStringSidToSid(sid)
pywintypes.error: (1337, 'ConvertStringSidToSid', 'The security ID structure is invalid.')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\state.py", line 2172, in call
    *cdata["args"], **cdata["kwargs"]
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\loader.py", line 1241, in __call__
    return self.loader.run(run_func, *args, **kwargs)
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\loader.py", line 2274, in run
    return self._last_context.run(self._run_as, _func_or_method, *args, **kwargs)
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\loader.py", line 2289, in _run_as
    return _func_or_method(*args, **kwargs)
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\loader.py", line 2322, in wrapper
    return f(*args, **kwargs)
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\states\file.py", line 3616, in directory
    win_perms_reset=win_perms_reset,
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\states\file.py", line 833, in _check_directory_win
    test_mode=True,
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 2529, in check_perms
    test_mode=test_mode,
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 2263, in _check_perms
    exact=True,
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 1894, in has_permissions
    exact=exact,
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 1808, in has_permission
    sid = get_sid(principal)
  File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 1133, in get_sid
    raise CommandExecutionError("Invalid user/group or sid: {}".format(principal))
salt.exceptions.CommandExecutionError: Invalid user/group or sid: EventLog

local:
----------
          ID: EventLogDirectoryPerms
    Function: file.directory
        Name: c:\Windows\system32\winevt\Logs
      Result: False
     Comment: An exception occurred in this state: Traceback (most recent call last):
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 1130, in get_sid
                  sid = win32security.ConvertStringSidToSid(sid)
              pywintypes.error: (1337, 'ConvertStringSidToSid', 'The security ID structure is invalid.')

              During handling of the above exception, another exception occurred:

              Traceback (most recent call last):
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\state.py", line 2172, in call
                  *cdata["args"], **cdata["kwargs"]
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\loader.py", line 1241, in __call__
                  return self.loader.run(run_func, *args, **kwargs)
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\loader.py", line 2274, in run
                  return self._last_context.run(self._run_as, _func_or_method, *args, **kwargs)
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\loader.py", line 2289, in _run_as
                  return _func_or_method(*args, **kwargs)
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\loader.py", line 2322, in wrapper
                  return f(*args, **kwargs)
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\states\file.py", line 3616, in directory
                  win_perms_reset=win_perms_reset,
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\states\file.py", line 833, in _check_directory_win
                  test_mode=True,
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 2529, in check_perms
                  test_mode=test_mode,
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 2263, in _check_perms
                  exact=True,
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 1894, in has_permissions
                  exact=exact,
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 1808, in has_permission
                  sid = get_sid(principal)
                File "C:\salt\bin\lib\site-packages\salt-3003.3-py3.7.egg\salt\utils\win_dacl.py", line 1133, in get_sid
                  raise CommandExecutionError("Invalid user/group or sid: {}".format(principal))
              salt.exceptions.CommandExecutionError: Invalid user/group or sid: EventLog
     Started: 14:06:05.265910
    Duration: 15.65 ms
     Changes:

Summary for local
------------
Succeeded: 0
Failed:    1
------------
```

**Expected behavior**
State should apply without errors.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Versions Report**
<details><summary>salt --versions-report</summary>
(Provided by running salt --versions-report. Please also mention any differences in master/minion versions.) 

```
Salt Version:
          Salt: 3003.3

Dependency Versions:
          cffi: 1.14.5
      cherrypy: 18.6.0
      dateutil: 2.8.1
     docker-py: Not Installed
         gitdb: 4.0.5
     gitpython: Not Installed
        Jinja2: 2.11.3
       libgit2: Not Installed
      M2Crypto: Not Installed
          Mako: 1.1.4
       msgpack: 1.0.2
  msgpack-pure: Not Installed
  mysql-python: Not Installed
     pycparser: 2.20
      pycrypto: Not Installed
  pycryptodome: 3.9.8
        pygit2: Not Installed
        Python: 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)]
  python-gnupg: 0.4.6
        PyYAML: 5.4.1
         PyZMQ: 18.0.1
         smmap: 3.0.4
       timelib: 0.2.4
       Tornado: 4.5.3
           ZMQ: 4.3.1

System Versions:
          dist:
        locale: cp1252
       machine: AMD64
       release: 2016Server
        system: Windows
       version: 2016Server 10.0.14393 SP0
```
</details>

**Additional context**
I've talked to @twangboy about this issue already, and he provided a stab at a fix that has worked for me.

```
diff --git a/salt/utils/win_dacl.py b/salt/utils/win_dacl.py
index 6da303f5a6..139f9794cd 100644
--- a/salt/utils/win_dacl.py
+++ b/salt/utils/win_dacl.py
@@ -1222,8 +1222,20 @@ def get_name(principal):
                 sid_obj = principal

     # By now we should have a valid PySID object
+    str_sid = get_sid_string(sid_obj)
+
     try:
-        return win32security.LookupAccountSid(None, sid_obj)[0]
+        name = win32security.LookupAccountSid(None, sid_obj)[0]
+
+        # Let's Check for Virtual Service Accounts
+        # Virtual Accounts must be prepended with NT Service in order to resolve
+        # properly
+        # https://docs.microsoft.com/en-us/previous-versions/technet-magazine/cc138011(v=msdn.10)
+        # https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd548356(v=ws.10)
+        if str_sid.startswith("S-1-5-80"):
+            name = "NT Service\\{0}".format(name)
+
+        return name
     except (pywintypes.error, TypeError) as exc:
         # Microsoft introduced the concept of Capability SIDs in Windows 8
         # https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers#capability-sids
@@ -1232,7 +1244,6 @@ def get_name(principal):
         # These types of SIDs do not resolve, so we'll just ignore them for this
         # All capability SIDs begin with `S-1-15-3`, so we'll only throw an
         # error when the sid does not begin with `S-1-15-3`
-        str_sid = get_sid_string(sid_obj)
         if not str_sid.startswith("S-1-15-3"):
             message = 'Error resolving "{}"'.format(principal)
             if type(exc) == pywintypes.error:
```
