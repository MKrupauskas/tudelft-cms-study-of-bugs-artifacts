While working on fixing a bug, I noticed that grains and pillar don't seem to work at all in provider overrides. So if, for instance, I were to specify a provider override because the service module was not properly detected, the `__grains__` dict would be empty and the `__pillar__` dict would not exist.

To reproduce, I added a function to the module I was using for the override:

```
def foo():
    import sys
    log.debug(len(sys.modules['salt.loaded.int.module.service'].__grains__))
    log.debug(len(__grains__))
    log.debug(len(sys.modules['salt.loaded.int.module.service'].__pillar__))
    log.debug(len(__pillar__))
```

Here is the logging output from running that function:

```
[DEBUG   ] 47
[DEBUG   ] 0
[DEBUG   ] 2
[WARNING ] The minion function caused an exception: Traceback (most recent call last):
  File "/home/erik/salt/salt/minion.py", line 648, in _thread_return
    return_data = func(*args, **kwargs)
  File "/home/erik/salt/salt/modules/service.py", line 95, in foo
    log.debug(len(__pillar__))
NameError: global name '__pillar__' is not defined
```

So the python module itself appears to have a `__grains__` and `__pillar__` attribute, but the `__grains__` and `__pillar__` dicts don't work or aren't the same.

I've tried, unsuccessfully, to track this down in loader.py, so I'm opening this issue.
