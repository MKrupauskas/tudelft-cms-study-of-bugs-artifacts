**Description**
Prior to `v3001` the `unless` requisite in `cmd.run` ran its command with the same shell as specified for the cmd itself.
It now appears that the `unless` requisite in `cmd.run` is run with the default(?) shell for Windows i.e. `cmd.exe`.
This is evidenced by the error message seen in the debug log of `stdout: {exit was unexpected at this time.`.

This means the `unless` condition is always false, and the original state command is always run which potentially causes idempotency problems.

**Setup**
(Please provide relevant configs and/or SLS files (be sure to remove sensitive info).
```
# test.sls
new-eventlogsource:
  cmd.run:
    - shell: powershell
    - name: New-EventLog -LogName Application -Source MyEventSource
    - unless: if ([System.Diagnostics.EventLog]::SourceExists('MyEventSource')) {exit 0} else {exit 1}
```

**Steps to Reproduce the behavior**
(Include debug logs if possible and relevant)

- Run the above state *twice* `salt-call -l debug state.apply test`
- The `unless` command causes a syntax error, and so the `unless` condition is false.
- The original state action is performed again which fails as the resource has already been created.

```
...
[DEBUG   ] Could not LazyLoad cmd.mod_run_check: 'cmd.mod_run_check' is not available.
[INFO    ] Executing command 'if ([System.Diagnostics.EventLog]::SourceExists('MyEventSource')) {exit 0} else {exit 1}'
in directory 'C:\Users\vagrant'
[DEBUG   ] stdout: {exit was unexpected at this time.
[DEBUG   ] retcode: 1
[DEBUG   ] Last command return code: 1
[INFO    ] Executing command 'Powershell -NonInteractive -NoProfile "New-EventLog -LogName Application -Source MyEventSo
urce"' in directory 'C:\Users\vagrant'
[ERROR   ] Command 'chcp 437 > nul & Powershell -NonInteractive -NoProfile "New-EventLog -LogName Application -Source My
EventSource"' failed with return code: 1
[ERROR   ] stderr: New-EventLog : The "MyEventSource" source is already registered on the "localhost" computer.
At line:1 char:1
+ New-EventLog -LogName Application -Source MyEventSource
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [New-EventLog], InvalidOperationException
    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.NewEventLogCommand
[ERROR   ] retcode: 1
[ERROR   ] {'pid': 1776, 'retcode': 1, 'stdout': '', 'stderr': 'New-EventLog : The "MyEventSource" source is already reg
istered on the "localhost" computer.\r\nAt line:1 char:1\r\n+ New-EventLog -LogName Application -Source MyEventSource\r\
n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [New-E
ventLog], InvalidOperationException\r\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.NewEventLogCommand'}
[INFO    ] Completed state [New-EventLog -LogName Application -Source MyEventSource] at time 23:29:37.869353 (duration_i
n_ms=15493.218)
[DEBUG   ] File c:\salt\var\cache\salt\minion\accumulator\358673567944 does not exist, no need to cleanup
[INFO    ] Executing command ['attrib', '-R', 'c:\\salt\\var\\cache\\salt\\minion\\sls.p'] in directory 'C:\Users\vagran
t'
[DEBUG   ] output:
[DEBUG   ] LazyLoaded highstate.output
[DEBUG   ] LazyLoaded nested.output
local:
----------
          ID: new-eventlogsource
    Function: cmd.run
        Name: New-EventLog -LogName Application -Source MyEventSource
      Result: False
     Comment: Command "New-EventLog -LogName Application -Source MyEventSource" run
     Started: 23:29:22.376135
    Duration: 15493.218 ms
     Changes:
              ----------
              pid:
                  1776
              retcode:
                  1
              stderr:
                  New-EventLog : The "MyEventSource" source is already registered on the "localhost" computer.
                  At line:1 char:1
                  + New-EventLog -LogName Application -Source MyEventSource
                  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      + CategoryInfo          : InvalidOperation: (:) [New-EventLog], InvalidOperationException
                      + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.NewEventLogCommand
              stdout:

Summary for local
------------
Succeeded: 0 (changed=1)
Failed:    1
------------
Total states run:     1
Total run time:  15.493 s
```


**Expected behavior**
The `unless` command is run with PowerShell giving the correct exit code and so `unless condition is true`, and the original state action is not performed again.

```
...
[DEBUG   ] LazyLoaded cmd.run
[INFO    ] Running state [New-EventLog -LogName Application -Source MyEventSource] at time 23:11:26.009878
[INFO    ] Executing state cmd.run for [New-EventLog -LogName Application -Source MyEventSource]
[DEBUG   ] LazyLoaded cmd.retcode
[INFO    ] Executing command 'Powershell -NonInteractive -NoProfile "if ([System.Diagnostics.EventLog]::SourceExists('My
EventSource')) {exit 0} else {exit 1}"' in directory 'C:\Users\vagrant'
[DEBUG   ] Last command return code: 0
[INFO    ] unless condition is true
[INFO    ] Completed state [New-EventLog -LogName Application -Source MyEventSource] at time 23:11:33.787495 (duration_i
n_ms=7777.617)
[DEBUG   ] File c:\salt\var\cache\salt\minion\accumulator\880289726080 does not exist, no need to cleanup
[DEBUG   ] LazyLoaded cmd.run
[INFO    ] Executing command ['attrib', '-R', 'c:\\salt\\var\\cache\\salt\\minion\\sls.p'] in directory 'C:\Users\vagran
t'
[DEBUG   ] output:
[DEBUG   ] LazyLoaded state.check_result
[DEBUG   ] LazyLoaded highstate.output
local:
----------
          ID: new-eventlogsource
    Function: cmd.run
        Name: New-EventLog -LogName Application -Source MyEventSource
      Result: True
     Comment: unless condition is true
     Started: 23:11:26.009878
    Duration: 7777.617 ms
     Changes:

Summary for local
------------
Succeeded: 1
Failed:    0
------------
Total states run:     1
Total run time:   7.778 s
```

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Versions Report**
<details><summary>salt --versions-report</summary>
(Provided by running salt --versions-report. Please also mention any differences in master/minion versions.) 

```
PS C:\Users\vagrant> salt-call --versions
Salt Version:
           Salt: 3001.1

Dependency Versions:
           cffi: 1.12.2
       cherrypy: 17.4.1
       dateutil: 2.8.0
      docker-py: Not Installed
          gitdb: 2.0.5
      gitpython: 2.1.10
         Jinja2: 2.10.1
        libgit2: Not Installed
       M2Crypto: Not Installed
           Mako: 1.0.7
   msgpack-pure: Not Installed
 msgpack-python: 1.0.0
   mysql-python: Not Installed
      pycparser: 2.19
       pycrypto: Not Installed
   pycryptodome: 3.9.7
         pygit2: Not Installed
         Python: 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)]
   python-gnupg: 0.4.4
         PyYAML: 5.3.1
          PyZMQ: 18.0.1
          smmap: 2.0.5
        timelib: 0.2.4
        Tornado: 4.5.3
            ZMQ: 4.3.1

System Versions:
           dist:
         locale: cp1252
        machine: AMD64
        release: 8.1
         system: Windows
        version: 8.1 6.3.9600 SP0
```
</details>

**Additional context**
Probably related to the changes made in #55974

A workaround that works with v3000 and v3001 is possible:
```
new-eventlogsource:
  cmd.run:
    - shell: powershell
    - name: New-EventLog -LogName Application -Source MyEventSource
    - unless:
{%- if [grains.saltversioninfo[0]] > [3000] %}
      - fun: cmd.retcode
        cmd: if ([System.Diagnostics.EventLog]::SourceExists('MyEventSource')) {exit 1} else {exit 0}
        shell: powershell
        ignore_retcode: true
{%- else %}
        if ([System.Diagnostics.EventLog]::SourceExists('MyEventSource')) {exit 0} else {exit 1}
{%- endif %}
```
