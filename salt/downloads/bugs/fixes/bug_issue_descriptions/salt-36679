### Description of Issue/Question

On Windows, when the ServerManager PowerShell Module is not available, and when attempting to use a salt module that either does not exist or that cannot be loaded because conditions in its `__virtual__()` function prevent it, the error message in the issue title is generated.

I believe this happens because the salt loader is iterating through the available modules attempting to find the requested module, and the [`__virtual__()` function](https://github.com/saltstack/salt/blob/develop/salt/modules/win_servermanager.py#L36-L39) in the `win_servermanager` module is calling `_check_server_manager()`, which is running the powershell command `Import-Module ServerManager`.

This is not a critical error, it is just misleading in the context of the module not being available. It would be nice to suppress it, or move it to the trace level, or something along those lines.

Also, for some reason, the error message seems to be generated whenever calling `sys.doc` on a module that _does_ exist.

Discovered while troubleshooting in [another issue](https://github.com/saltstack/salt/issues/21485#issuecomment-250470825)...
### Setup
- Start with a Windows desktop system, one that does not have the Remote Server Administration Tools (which is what provides the ServerManager Powershell Module).
### Steps to Reproduce Issue
- Test non-existent module. Run `C:\salt\salt-call.bat --local foo.bar`

```
[ERROR   ] Command 'Import-Module ServerManager' failed with return code: 1
[ERROR   ] output: Import-Module : The specified module 'ServerManager' was not loaded because no valid module file was found in any module directory.
At line:1 char:1
+ Import-Module ServerManager
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ResourceUnavailable: (ServerManager:String) [Import-Module], FileNotFoundException
    + FullyQualifiedErrorId : Modules_ModuleNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand
'foo.bar' is not available.
```
- Test sys.doc. Run `c:\salt\salt-call.bat --local sys.doc reg.read_key`.

```
C:\> c:\salt\salt-call.bat --local sys.doc reg.read_key
[ERROR   ] Command 'Import-Module ServerManager' failed with return code: 1
[ERROR   ] output: Import-Module : The specified module 'ServerManager' was not loaded because no valid module file was found in any module directory.
At line:1 char:1
+ Import-Module ServerManager
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ResourceUnavailable: (ServerManager:String) [Import-Module], FileNotFoundException
    + FullyQualifiedErrorId : Modules_ModuleNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand
local:
    ----------
    reg.read_key:

            .. important::
                The name of this function is misleading and will be changed to reflect
                proper usage in the Carbon release of Salt. The path option will be removed
                and the key will be the actual key. See the following issue:

                https://github.com/saltstack/salt/issues/25618

                In order to not break existing state files this function will call the
                read_value function if a key is passed. Key will be passed as the value
                name. If key is not passed, this function will return the default value for
                the key.

                In the Carbon release this function will be removed in favor of read_value.

            Read registry key value

            Returns the first unnamed value (Default) as a string.
            Returns none if first unnamed value is empty.
            Returns False if key not found.

            CLI Example:

                salt '*' reg.read_key HKEY_LOCAL_MACHINE 'SOFTWARE\Salt' 'version'
```
### Versions Report

```
C:\> c:\salt\salt-call.bat --versions-report
Salt Version:
           Salt: 2016.3.3

Dependency Versions:
           cffi: 1.6.0
       cherrypy: 5.3.0
       dateutil: 2.5.3
          gitdb: 0.6.4
      gitpython: 2.0.2
          ioflo: 1.5.3
         Jinja2: 2.8
        libgit2: Not Installed
        libnacl: 1.4.5
       M2Crypto: Not Installed
           Mako: 1.0.4
   msgpack-pure: Not Installed
 msgpack-python: 0.4.7
   mysql-python: Not Installed
      pycparser: 2.14
       pycrypto: 2.6.1
         pygit2: Not Installed
         Python: 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)]
   python-gnupg: 0.3.8
         PyYAML: 3.11
          PyZMQ: 15.2.0
           RAET: Not Installed
          smmap: 0.9.0
        timelib: 0.2.4
        Tornado: 4.3
            ZMQ: 4.1.2

System Versions:
           dist:
        machine: AMD64
        release: 10
         system: Windows
        version: 10 10.0.14393  Multiprocessor Free
```
