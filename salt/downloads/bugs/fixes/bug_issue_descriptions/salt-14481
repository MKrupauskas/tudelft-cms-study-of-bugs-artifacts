Looks there is an issue destroying vm's when `rename_on_destroy` is True on AWS. Works fine when `rename_on_destroy` is false.

The vm get's terminated in aws but it's minion key will still remain in salt. 

```
root@server:~# salt-cloud -d ship-us-east-01
[INFO    ] salt-cloud starting
The following virtual machines are set to be destroyed:
  ec2_ship_private_us_east:
    ec2:
      ship-us-east-01
  ec2_ubuntu_private_us_east:
    ec2:
      ship-us-east-01
  ec2_ubuntu_public_us_east:
    ec2:
      ship-us-east-01

Proceed? [N/y] y
... proceeding
[INFO    ] Destroying in non-parallel mode.
[INFO    ] Renaming ship-us-east-01 to ship-us-east-01-DEL3f35b3ee02664b5da8813302f18b1fda
[INFO    ] Machine will be identified as ship-us-east-01-DEL3f35b3ee02664b5da8813302f18b1fda until it has been cleaned up.
[INFO    ] [{'instanceId': 'i-f5c28ed9', 'currentState': {'code': '32', 'name': 'shutting-down'}, 'previousState': {'code': '16', 'name': 'running'}}]
[ERROR   ] There was an error destroying machines: 'instanceId'
Traceback (most recent call last):
  File "/usr/lib/pymodules/python2.7/salt/cloud/cli.py", line 266, in run
    ret = mapper.destroy(names, cached=True)
  File "/usr/lib/pymodules/python2.7/salt/cloud/__init__.py", line 646, in destroy
    ret = self.clouds[fun](name)
  File "/usr/lib/pymodules/python2.7/salt/cloud/clouds/ec2.py", line 1800, in destroy
    instance_id = node_metadata['instanceId']
KeyError: 'instanceId'
```

```
root@server:~# salt --versions-report
           Salt: 2014.1.7
         Python: 2.7.3 (default, Feb 27 2014, 19:58:35)
         Jinja2: 2.6
       M2Crypto: 0.21.1
 msgpack-python: 0.1.10
   msgpack-pure: Not Installed
       pycrypto: 2.6.1
         PyYAML: 3.10
          PyZMQ: 13.0.0
            ZMQ: 3.2.2
```
