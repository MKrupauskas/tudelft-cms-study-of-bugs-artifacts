**Description**
I think this is happening when using `salt.modules.cmd.run` to run an application that is linked with the "Windows" subsystem instead of the "Console" subsystem. I've only confirmed with two though, SoftPerfect RAM Disk and a homegrown .c file that only contains the win32 message pump. This seems like it shouldn't be related, however, so I'm going to debug this asymptomatically.

With regards to the call to `CreateProcessWithTokenW` inside `salt.platform.win`, an `OSError` exception for `GetLastError()` returning `ERROR_SUCCESS` is raised before the process can be resumed by the logic in `salt.utils.win_runas`. As commit 4a9c02078788701db26cf5c58ff82e2c030e8d43 now wraps both the createprocess and resumeprocess api calls in order to close handles in a `finally` clause, this results in the process never being resumed and thus also never executing. You can see this in SysInternals' process monitor logs where the process is actually created, but never started.

When not using runas, your logs can contain:
```
2020-06-30 03:28:52,002 [salt.utils.process:786 ][ERROR   ][540] An un-handled exception from the multiprocessing process 'ProcessPayload' was caught:
Traceback (most recent call last):
  File "c:\python37\lib\site-packages\salt\minion.py", line 1550, in _send_req_sync
    return channel.send(load, timeout=timeout)
  File "c:\python37\lib\site-packages\salt\utils\asynchronous.py", line 126, in wrap
    six.reraise(*results[1])
  File "c:\python37\lib\site-packages\salt\ext\six.py", line 693, in reraise
    raise value
  File "c:\python37\lib\site-packages\salt\utils\asynchronous.py", line 132, in _target
    result = io_loop.run_sync(lambda: getattr(self.obj, key)(*args, **kwargs))
  File "c:\python37\lib\site-packages\salt\ext\tornado\ioloop.py", line 454, in run_sync
    self.start()
  File "c:\python37\lib\site-packages\salt\ext\tornado\ioloop.py", line 865, in start
    event_pairs = self._impl.poll(poll_timeout)
  File "c:\python37\lib\site-packages\salt\ext\tornado\platform\select.py", line 64, in poll
    self.read_fds, self.write_fds, self.error_fds, timeout)
OSError: [WinError 10038] An operation was attempted on something that is not a socket

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\python37\lib\site-packages\salt\utils\process.py", line 777, in wrapped_run_func
    return run_func()
  File "c:\python37\lib\multiprocessing\process.py", line 99, in run
    self._target(*self._args, **self._kwargs)
  File "c:\python37\lib\site-packages\salt\minion.py", line 1774, in _target
    run_func(minion_instance, opts, data)
  File "c:\python37\lib\site-packages\salt\minion.py", line 1768, in run_func
    return Minion._thread_return(minion_instance, opts, data)
  File "c:\python37\lib\site-packages\salt\minion.py", line 1988, in _thread_return
    ret, timeout=minion_instance._return_retry_timer()
  File "c:\python37\lib\site-packages\salt\minion.py", line 2213, in _return_pub
    ret_val = self._send_req_sync(load, timeout=timeout)
  File "c:\python37\lib\site-packages\salt\minion.py", line 1550, in _send_req_sync
    return channel.send(load, timeout=timeout)
  File "c:\python37\lib\site-packages\salt\utils\asynchronous.py", line 143, in __exit__
    self.close()
  File "c:\python37\lib\site-packages\salt\utils\asynchronous.py", line 108, in close
    io_loop.close(all_fds=True)
  File "c:\python37\lib\site-packages\salt\ext\tornado\ioloop.py", line 722, in close
    self._waker.close()
  File "c:\python37\lib\site-packages\salt\ext\tornado\platform\common.py", line 113, in close
    self.reader.close()
  File "c:\python37\lib\socket.py", line 420, in close
    self._real_close()
  File "c:\python37\lib\socket.py", line 414, in _real_close
    _ss.close(self)
```

In your logs the following exception appears when using the runas parameter.
```
2020-06-30 03:53:11,139 [salt.minion      :1949][WARNING ][3528] The minion function caused an exception
Traceback (most recent call last):
  File "c:\python37\lib\site-packages\salt\minion.py", line 1870, in _thread_return
    opts, data, func, args, kwargs
  File "c:\python37\lib\site-packages\salt\executors\direct_call.py", line 12, in execute
    return func(*args, **kwargs)
  File "c:\python37\lib\site-packages\salt\modules\cmdmod.py", line 1205, in run
    **kwargs
  File "c:\python37\lib\site-packages\salt\modules\cmdmod.py", line 424, in _run
    return win_runas(cmd, runas, password, cwd)
  File "c:\python37\lib\site-packages\salt\utils\win_runas.py", line 207, in runas
    environment=env,
  File "c:\python37\lib\site-packages\salt\platform\win.py", line 1161, in CreateProcessWithTokenW
    raise exc
OSError: The operation completed successfully.
```

What's curious is that CreateProcessWithTokenW will typically only set `GetLastError` to `ERROR_SUCCESS` with a bunk environment. Attaching to the suspended process with windbg and typing in !environ shows that salt is somehow giving it an environment that contains the following. But again this might be a red herring because I'm super tired of debugging windows stuff right now.

```
        =C:=C:\Program Files\SoftPerfect RAM Disk
	=ExitCode=00000000
	ALLUSERSPROFILE=C:\ProgramData
	APPDATA=C:\Windows\system32\config\systemprofile\AppData\Roaming
	ChocolateyInstall=C:\ProgramData\chocolatey
	ChocolateyLastPathUpdate=132375109173699838
	CommonProgramFiles=C:\Program Files\Common Files
	COMPUTERNAME=HUVP16SEYIPT2L5
	ComSpec=C:\Windows\system32\cmd.exe
	FP_NO_HOST_CHECK=NO
	LOCALAPPDATA=C:\Windows\system32\config\systemprofile\AppData\Local
	NUMBER_OF_PROCESSORS=1
	OS=Windows_NT
	Path=c:\python37\lib\site-packages\pywin32_system32;C:\Python37\Scripts\;C:\Python37\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\salt;C:\ProgramData\chocolatey\bin;
	PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW
	PROCESSOR_ARCHITECTURE=x86
	PROCESSOR_IDENTIFIER=x86 Family 6 Model 158 Stepping 9, GenuineIntel
	PROCESSOR_LEVEL=6
	PROCESSOR_REVISION=9e09
	ProgramData=C:\ProgramData
	ProgramFiles=C:\Program Files
	PROMPT=$P$G
	PSModulePath=C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
	PUBLIC=C:\Users\Public
	SystemDrive=C:
	SystemRoot=C:\Windows
	TEMP=C:\Windows\TEMP
	TMP=C:\Windows\TEMP
	USERDOMAIN=NITRO
	USERNAME=HUVP16SEYIPT2L5$
	USERPROFILE=C:\Windows\system32\config\systemprofile
	windir=C:\Windows
```

Pretty sure this is a regression as I wrote the original state that executed these `ramdiskws.exe` commands back in 2019/12/31

**Setup**
Install SoftPerfect RAM Disk onto your minion.

**Steps to Reproduce the behavior**
Try running a command with it.

```
salt $minion cmd.run 'ramdiskws.exe -mount:"all"' 'cwd=C:\Program Files\SoftPerfect RAM Disk' hide_output=false output_loglevel=error
```

**Expected behavior**
The command should load the address-space of the`ramdiskws.exe` process and then run it.

**Versions Report**
<details><summary>salt --versions-report</summary>
(Provided by running salt --versions-report. Please also mention any differences in master/minion versions.) 

```
Salt Version:
           Salt: 3001
 
Dependency Versions:
           cffi: 1.12.2
       cherrypy: 17.4.1
       dateutil: 2.8.0
      docker-py: Not Installed
          gitdb: 2.0.5
      gitpython: Not Installed
         Jinja2: 2.10.1
        libgit2: Not Installed
       M2Crypto: Not Installed
           Mako: 1.0.7
   msgpack-pure: Not Installed
 msgpack-python: 0.5.6
   mysql-python: Not Installed
      pycparser: 2.19
       pycrypto: 3.9.8
   pycryptodome: 3.9.7
         pygit2: Not Installed
         Python: 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 19:29:22) [MSC v.1916 32 bit (Intel)]
   python-gnupg: 0.4.4
         PyYAML: 5.1.2
          PyZMQ: 18.0.1
          smmap: 2.0.5
        timelib: 0.2.4
        Tornado: 4.5.3
            ZMQ: 4.3.1
 
System Versions:
           dist:   
         locale: cp1252
        machine: x86
        release: 8.1
         system: Windows
        version: 8.1 6.3.9600 SP0 
 
```
</details>