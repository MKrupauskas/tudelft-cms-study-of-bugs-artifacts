When I start salt-minion or salt-call I have an EXTREMELY long delay before anything seems to start happening.

The trace output:

```
root@boothost:/# salt-call -l debug state.highstate
[DEBUG   ] Reading configuration from /etc/salt/minion
[DEBUG   ] Including configuration from '/etc/salt/minion.d/id.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/id.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/master.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/master.conf
[DEBUG   ] loading log_handlers in ['/var/cache/salt/minion/extmods/log_handlers', '/usr/lib/python2.7/dist-packages/salt/log/handlers']

[DEBUG   ] Skipping /var/cache/salt/minion/extmods/log_handlers, it is not a directory
[DEBUG   ] None of the required configuration sections, 'logstash_udp_handler' and 'logstash_zmq_handler', were found the in the configuration. Not loading the Logstash logging handlers module.
[DEBUG   ] Configuration file path: /etc/salt/minion
```

When I run strace with it, I seed this:

```
[stuff]
mmap(NULL, 19351, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fe9338c5000
close(3)                                = 0
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
open("/lib/x86_64-linux-gnu/libnss_nis.so.2", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\240!\0\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0644, st_size=43592, ...}) = 0
mmap(NULL, 2139320, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fe92d254000
mprotect(0x7fe92d25e000, 2093056, PROT_NONE) = 0
mmap(0x7fe92d45d000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x9000) = 0x7fe92d45d000
close(3)                                = 0
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
open("/lib/x86_64-linux-gnu/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0@\"\0\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0644, st_size=52160, ...}) = 0
mmap(NULL, 2148168, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fe92d047000
mprotect(0x7fe92d053000, 2093056, PROT_NONE) = 0
mmap(0x7fe92d252000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0xb000) = 0x7fe92d252000
close(3)                                = 0
mprotect(0x7fe92d252000, 4096, PROT_READ) = 0
mprotect(0x7fe92d45d000, 4096, PROT_READ) = 0
munmap(0x7fe9338c5000, 19351)           = 0
open("/etc/group", O_RDONLY|O_CLOEXEC)  = 3
open("/etc/default/nss", O_RDONLY|O_CLOEXEC) = 4
fstat(4, {st_mode=S_IFREG|0644, st_size=1756, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fe9338c9000
read(4, "# /etc/default/nss\n# This file c"..., 4096) = 1756
read(4, "", 4096)                       = 0
close(4)                                = 0
munmap(0x7fe9338c9000, 4096)            = 0
futex(0x7fe92d676a90, FUTEX_WAKE_PRIVATE, 2147483647) = 0
lseek(3, 0, SEEK_CUR)                   = 0
fstat(3, {st_mode=S_IFREG|0644, st_size=631, ...}) = 0
mmap(NULL, 631, PROT_READ, MAP_SHARED, 3, 0) = 0x7fe9338c9000
lseek(3, 631, SEEK_SET)                 = 631
fstat(3, {st_mode=S_IFREG|0644, st_size=631, ...}) = 0
open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 4
fstat(4, {st_mode=S_IFREG|0644, st_size=19351, ...}) = 0
mmap(NULL, 19351, PROT_READ, MAP_PRIVATE, 4, 0) = 0x7fe933839000
close(4)                                = 0
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
open("/lib/x86_64-linux-gnu/libnss_ldap.so.2", O_RDONLY|O_CLOEXEC) = 4
read(4, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\300\30\0\0\0\0\0\0"..., 832) = 832
fstat(4, {st_mode=S_IFREG|0644, st_size=46960, ...}) = 0
mmap(NULL, 2142224, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 4, 0) = 0x7fe92ce3b000
mprotect(0x7fe92ce46000, 2093056, PROT_NONE) = 0
mmap(0x7fe92d045000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0xa000) = 0x7fe92d045000
close(4)                                = 0
mprotect(0x7fe92d045000, 4096, PROT_READ) = 0
munmap(0x7fe933839000, 19351)           = 0
connect(4, {sa_family=AF_FILE, path="/var/run/nslcd/socket"}, 23) = 0
poll([{fd=4, events=POLLOUT}], 1, 10000) = 1 ([{fd=4, revents=POLLOUT}])
sendto(4, "\1\0\0\0\214\23\0\0", 8, MSG_NOSIGNAL, NULL, 0) = 8
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\1\0\0\0\214\23\0\0\0\0\0\0\4\0\0\0000010\1\0\0\0*\352\1\0\0#\3\0"..., 1024) = 1024
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "ls\10\0\0\0le", 8)             = 8
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "verhar\7\0\0\0hobrien\10\0\0\0jvanesse\10\0\0"..., 1024) = 1024
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "innega\10\0\0\0grakebra\5\0\0\0jrall\10\0\0\0m"..., 2048) = 2048
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\0\0\0jholman\7\0\0\0ejavers\10\0\0\0avserve"..., 4096) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "ove\7\0\0\0mdennis\7\0\0\0kkouri1\10\0\0\0jpi"..., 8192) = 696
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\5\0\0\0drice\10\0\0\0jcollett\7\0\0\0abakker"..., 7496) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\0\0\0cpeders1\7\0\0\0ghaugen\10\0\0\0khilli"..., 16060) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "rpets\10\0\0\0kstephe1\10\0\0\0pchamber\10\0\0"..., 13015) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "fosdick\10\0\0\0cmadrid3\10\0\0\0bhernand\10"..., 15699) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = ? ERESTART_RESTARTBLOCK (To be restarted)
--- SIGWINCH (Window changed) @ 0 (0) ---
restart_syscall(<... resuming interrupted call ...>) = 1
read(4, "montoy2\10\0\0\0rrothwel\7\0\0\0jperez4\10\0"..., 15762) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\10\0\0\0nloisell\10\0\0\0hswindle\10\0\0\0amor"..., 15855) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\10\0\0\0ldegiuli\10\0\0\0dswenso2\10\0\0\0mcis"..., 15646) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\0\0\0plarson4\5\0\0\0ckeja\7\0\0\0dmuscha\7"..., 15689) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "phamelin\10\0\0\0jthomas4\5\0\0\0tcox6\7\0\0"..., 13666) = 4096
brk(0x2392000)                          = 0x2392000
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\7\0\0\0klewis9\6\0\0\0lbunch\7\0\0\0mtennie"..., 16226) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "ovenner\7\0\0\0rthorne\6\0\0\0sabbas\10\0\0\0"..., 13718) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\0\0mjohns36\6\0\0\0cayers\6\0\0\0bhiner\7\0"..., 15748) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "cstrehlo\7\0\0\0lscott7\6\0\0\0afurse\7\0\0"..., 15896) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "2\5\0\0\0kloll\10\0\0\0ssteenst\7\0\0\0bcline"..., 15902) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\0aknoke1\7\0\0\0P604037\10\0\0\0fcarlson\6"..., 15014) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\0\0gkimbrel\6\0\0\0mirwin\7\0\0\0jtilton\10"..., 15957) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\7\0\0\0amikels\10\0\0\0nhansen3\10\0\0\0pgall"..., 15933) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\0baleman\10\0\0\0karchaba\10\0\0\0ssmith13"..., 16356) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\10\0\0\0vvanicke\10\0\0\0ecarwise\10\0\0\0twil"..., 15659) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\7\0\0\0mrangel\6\0\0\0chanes\10\0\0\0mrangel"..., 13506) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\0\0\0mchase\10\0\0\0pwaldsch\10\0\0\0nbartle"..., 16289) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\0astradtm\7\0\0\0tflaata\10\0\0\0khernan3"..., 15725) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "raled\10\0\0\0trolland\10\0\0\0pschempp\6\0\0"..., 15281) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "dvorak\10\0\0\0mhanso11\6\0\0\0lberg2\10\0\0\0"..., 15545) = 4096
brk(0x23dc000)                          = 0x23dc000
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "ingram1\10\0\0\0mthorsby\10\0\0\0mlovell1\10"..., 16212) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "rfritz\7\0\0\0dhunter\10\0\0\0sschmit2\10\0\0"..., 14046) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\0\0jmaes\10\0\0\0dcarpent\10\0\0\0rquevedo\7"..., 15917) = 4096
poll([{fd=4, events=POLLIN}], 1, 60000) = 1 ([{fd=4, revents=POLLIN}])
read(4, "\0lcortez\7\0\0\0nwepplo\5\0\0\0hheck\10\0\0\0"..., 15923) = 4096
[... MANY MORE ...]
```

Eventually, everything works perfect and great. Salt shouldn't need to cache every user/group. In this case, I have >30,000 users as well as a large number of groups. Each server only uses about five users and two groups. It takes over half an hour for me before the state.highstate execution actually starts.

The line

```
connect(4, {sa_family=AF_FILE, path="/var/run/nslcd/socket"}, 23) = 0
```

seems to indicate that it's trying to search every user and pull information for each user. These are not users that are local on the box so look-ups take a long time for each user.

Some states I have:

```
ssh-user:
  group.present
```

```
root:
  user.present:
    - shell: /bin/bash
    - home: /root
    - uid: 0
    - gid: 0
    - optional_groups:
      - ssh-user
    - require:
      - group: ssh-user
    - remove_groups: False
```

```
{% if 'users' in pillar %}
{% for user, attr in pillar['users'].items() %}
{{ user }}:
  user.present:
    - shell: /bin/bash
    - home: /home/{{ user }}
    - uid: {{ attr['uid'] }}
    - gid: {{ attr['gid'] }}
    - optional_groups:
      - ssh-user
    - remove_groups: False
    - require:
      - group: ssh-user
{% endfor %}
{% endif %}
```

In my particular setup, I have samba and nslcd on these servers. The nslcd application allows me to do caching for samba authentications. I also use this to allow specific people to log into the box directly. These users are managed in salt via the above groups.

I feel like my issue is salt trying to cache all users available when it starts. If I turn off nslcd, things go ZOOM during start, as I'd expect. Once I get to a state that requires nslcd be running, it gets turned on, and that whole name look-up thing starts again.
