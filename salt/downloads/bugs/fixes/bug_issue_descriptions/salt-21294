Those three functions do not raise an exception when called in a jinja template:
- get_site_packages
- get_resource_path
- get_resource_content

It would be great if `exec_code` which is used by those three would have an option to get the return value of the executable. We now wrote our own `exec_code`:

``` python
def exec_code(lang, code, cwd=None):
    '''
    Pass in two strings, the first naming the executable language, aka -
    python2, python3, ruby, perl, lua, etc. the second string containing
    the code you wish to execute. The stdout and stderr will be returned

    CLI Example:

    .. code-block:: bash

        salt '*' cmd.exec_code ruby 'puts "cheese"'
    '''
    codefile = salt.utils.mkstemp()
    with salt.utils.fopen(codefile, 'w+t') as fp_:
        fp_.write(code)
    cmd = [lang, codefile]
    ret = __salt__['cmd.run_all'](cmd, cwd=cwd, python_shell=False)
    os.remove(codefile)
    return ret
```

`get_resource_content` now looks like:

``` python
....
    ret = exec_code(bin_path, "import pkg_resources; print pkg_resources.resource_string('{0}', '{1}')".format(package_or_requirement, resource_name))

    if ret['retcode'] != 0:
        raise salt.exceptions.CommandExecutionError("Error importing pkg_resources or executing pkg_resources.resource_filename\n{stdout}{stderr}".format(**ret))

    return ret['stdout']
```
