since boto_rds uses boto.rds2, the implementation of tagging is different than say vpc or ec2.

When writing states and yaml that use the state/module, it is not immediately obvious that you cannot supply the typical dict like other tags:

``` sls
    - tags:
        Key: Value
```

The doc for boto_rds2 states:

``` py
        :type tags: list
        :param tags: The tags to be assigned to the Amazon RDS resource.

        For example::

            items = [('foo', 'bar', 'baz'), ('foo2', 'bar2', 'baz2')]
            label = 'ParamName.member'
            names = ('One', 'Two', 'Three')
            self.build_complex_list_params(params, items, label, names)

        would result in the params dict being updated with these params::

            ParamName.member.1.One = foo
            ParamName.member.1.Two = bar
            ParamName.member.1.Three = baz

            ParamName.member.2.One = foo2
            ParamName.member.2.Two = bar2
            ParamName.member.2.Three = baz2

        :type params: dict
        :param params: The params dict.  The complex list params
            will be added to this dict.

        :type items: list of tuples
        :param items: The list to serialize.

        :type label: string
        :param label: The prefix to apply to the parameter.

        :type names: tuple of strings
        :param names: The names associated with each tuple element.
```

This is how the tags are built:

``` py
self.build_complex_list_params(
            params, tags,
            'Tags.member',
            ('Key', 'Value'))
```

Supporting this data structure for RDS2 in yaml requires this notation:

``` sls
    - tags:
      -
        - key1
        - value2
      -
        - key2
        - value2
```

This is just a reference for anyone looking to use the module with tagging that doesn't want to chase their tail :)

Cheers!
