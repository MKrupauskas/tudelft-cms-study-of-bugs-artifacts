I used your state example from https://github.com/saltstack/salt/issues/28942 with upgraded boto version as mentioned in https://github.com/saltstack/salt/issues/29044.

```
root@saltmaster:/srv/salt/base/aws/eu-central-1# lsb_release -d
Description:    Debian GNU/Linux 8.2 (jessie)
root@saltmaster:/srv/salt/base/aws/eu-central-1# salt-call --version
salt-call 2015.5.3 (Lithium)
root@saltmaster:/srv/salt/base/aws/eu-central-1# aptitude show python-boto | grep ^Version
Version: 2.38.0-1
```

1st run:

```
root@saltmaster:/srv/salt/base/aws/eu-central-1# salt-call state.sls aws.eu-central-1.ec2_security -l debug
[DEBUG   ] Reading configuration from /etc/salt/minion
[DEBUG   ] Including configuration from '/etc/salt/minion.d/_schedule.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/_schedule.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/iamrole.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/iamrole.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/mine.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/mine.conf
[DEBUG   ] Using cached minion ID from /etc/salt/minion_id: saltmaster
[DEBUG   ] Configuration file path: /etc/salt/minion
[DEBUG   ] Reading configuration from /etc/salt/minion
[DEBUG   ] Including configuration from '/etc/salt/minion.d/_schedule.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/_schedule.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/iamrole.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/iamrole.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/mine.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/mine.conf
[DEBUG   ] Initializing new SAuth for ('/etc/salt/pki/minion', 'saltmaster', 'tcp://172.31.0.161:4506')
[DEBUG   ] Decrypting the current master AES key
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[DEBUG   ] LazyLoaded state.sls
[DEBUG   ] LazyLoaded saltutil.is_running
[DEBUG   ] LazyLoaded grains.get
[DEBUG   ] Re-using SAuth for ('/etc/salt/pki/minion', 'saltmaster', 'tcp://172.31.0.161:4506')
[DEBUG   ] Reading configuration from /etc/salt/minion
[DEBUG   ] Including configuration from '/etc/salt/minion.d/_schedule.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/_schedule.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/iamrole.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/iamrole.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/mine.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/mine.conf
[DEBUG   ] Re-using SAuth for ('/etc/salt/pki/minion', 'saltmaster', 'tcp://172.31.0.161:4506')
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[INFO    ] Loading fresh modules for state activity
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[DEBUG   ] Fetching file from saltenv 'base', ** attempting ** 'salt://aws/eu-central-1/ec2_security.sls'
[INFO    ] Fetching file from saltenv 'base', ** done ** 'aws/eu-central-1/ec2_security.sls'
[DEBUG   ] LazyLoaded cmd.run
[DEBUG   ] Jinja search path: ['/var/cache/salt/minion/files/base']
[DEBUG   ] Rendered data from file: /var/cache/salt/minion/files/base/aws/eu-central-1/ec2_security.sls:
##############################
## EC2 security groups:
##############################

# http://ryandlane.com/blog/2014/08/26/saltstack-masterless-bootstrapping/
# https://docs.saltstack.com/en/latest/ref/states/all/salt.states.boto_secgroup.html


aws_ec2_secgroup:
  boto_secgroup:
    - present
    - name: salt
    - description: Gateway VPC security group
    - region: eu-central-1
    #- region: us-east-1
    - profile: eu-central-1.saltmaster-iam-profile
    - rules:
      - ip_protocol: tcp
        from_port: 22
        to_port: 22
        cidr_ip:
          - 0.0.0.0/0

[DEBUG   ] LazyLoaded config.get
[DEBUG   ] Results of YAML rendering:
OrderedDict([('aws_ec2_secgroup', OrderedDict([('boto_secgroup', ['present', OrderedDict([('name', 'salt')]), OrderedDict([('description', 'Gateway VPC security group')]), OrderedDict([('region', 'eu-central-1')]), OrderedDict([('profile', 'eu-central-1.saltmaster-iam-profile')]), OrderedDict([('rules', [OrderedDict([('ip_protocol', 'tcp'), ('from_port', 22), ('to_port', 22), ('cidr_ip', ['0.0.0.0/0'])])])])])]))])
[DEBUG   ] LazyLoaded boto_secgroup.exists
[DEBUG   ] LazyLoaded boto_secgroup.present
[INFO    ] Running state [salt] at time 11:41:54.038277
[INFO    ] Executing state boto_secgroup.present for salt
[DEBUG   ] getting group for salt
[INFO    ] Created security group salt.
[DEBUG   ] getting group for salt
[DEBUG   ] getting group for salt
[ERROR   ] {'new': {'secgroup': None}, 'old': {'secgroup': None}}
[INFO    ] Completed state [salt] at time 11:41:56.009641
[DEBUG   ] File /var/cache/salt/minion/accumulator/140514836573264 does not exist, no need to cleanup.
[DEBUG   ] LazyLoaded config.option
[DEBUG   ] Re-using SAuth for ('/etc/salt/pki/minion', 'saltmaster', 'tcp://172.31.0.161:4506')
[DEBUG   ] LazyLoaded highstate.output
[DEBUG   ] LazyLoaded nested.output
local:
----------
          ID: aws_ec2_secgroup
    Function: boto_secgroup.present
        Name: salt
      Result: False
     Comment: Security group salt created. salt security group configuration could not be retrieved.
     Started: 11:41:54.038277
    Duration: 1971.364 ms
     Changes:
              ----------
              new:
                  ----------
                  secgroup:
                      None
              old:
                  ----------
                  secgroup:
                      None

Summary
------------
Succeeded: 0 (changed=1)
Failed:    1
------------
Total states run:     1
```

2nd run:

```
root@saltmaster:/srv/salt/base/aws/eu-central-1# salt-call state.sls aws.eu-central-1.ec2_security -l debug
[DEBUG   ] Reading configuration from /etc/salt/minion
[DEBUG   ] Including configuration from '/etc/salt/minion.d/_schedule.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/_schedule.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/iamrole.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/iamrole.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/mine.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/mine.conf
[DEBUG   ] Using cached minion ID from /etc/salt/minion_id: saltmaster
[DEBUG   ] Configuration file path: /etc/salt/minion
[DEBUG   ] Reading configuration from /etc/salt/minion
[DEBUG   ] Including configuration from '/etc/salt/minion.d/_schedule.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/_schedule.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/iamrole.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/iamrole.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/mine.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/mine.conf
[DEBUG   ] Initializing new SAuth for ('/etc/salt/pki/minion', 'saltmaster', 'tcp://172.31.0.161:4506')
[DEBUG   ] Decrypting the current master AES key
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[DEBUG   ] LazyLoaded state.sls
[DEBUG   ] LazyLoaded saltutil.is_running
[DEBUG   ] LazyLoaded grains.get
[DEBUG   ] Re-using SAuth for ('/etc/salt/pki/minion', 'saltmaster', 'tcp://172.31.0.161:4506')
[DEBUG   ] Reading configuration from /etc/salt/minion
[DEBUG   ] Including configuration from '/etc/salt/minion.d/_schedule.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/_schedule.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/iamrole.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/iamrole.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/mine.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/mine.conf
[DEBUG   ] Re-using SAuth for ('/etc/salt/pki/minion', 'saltmaster', 'tcp://172.31.0.161:4506')
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[INFO    ] Loading fresh modules for state activity
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[INFO    ] Fetching file from saltenv 'base', ** skipped ** latest already in cache 'salt://aws/eu-central-1/ec2_security.sls'
[DEBUG   ] LazyLoaded cmd.run
[DEBUG   ] Jinja search path: ['/var/cache/salt/minion/files/base']
[DEBUG   ] Rendered data from file: /var/cache/salt/minion/files/base/aws/eu-central-1/ec2_security.sls:
##############################
## EC2 security groups:
##############################

# http://ryandlane.com/blog/2014/08/26/saltstack-masterless-bootstrapping/
# https://docs.saltstack.com/en/latest/ref/states/all/salt.states.boto_secgroup.html


aws_ec2_secgroup:
  boto_secgroup:
    - present
    - name: salt
    - description: Gateway VPC security group
    - region: eu-central-1
    #- region: us-east-1
    - profile: eu-central-1.saltmaster-iam-profile
    - rules:
      - ip_protocol: tcp
        from_port: 22
        to_port: 22
        cidr_ip:
          - 0.0.0.0/0

[DEBUG   ] LazyLoaded config.get
[DEBUG   ] Results of YAML rendering:
OrderedDict([('aws_ec2_secgroup', OrderedDict([('boto_secgroup', ['present', OrderedDict([('name', 'salt')]), OrderedDict([('description', 'Gateway VPC security group')]), OrderedDict([('region', 'eu-central-1')]), OrderedDict([('profile', 'eu-central-1.saltmaster-iam-profile')]), OrderedDict([('rules', [OrderedDict([('ip_protocol', 'tcp'), ('from_port', 22), ('to_port', 22), ('cidr_ip', ['0.0.0.0/0'])])])])])]))])
[DEBUG   ] LazyLoaded boto_secgroup.exists
[DEBUG   ] LazyLoaded boto_secgroup.present
[INFO    ] Running state [salt] at time 11:42:06.906978
[INFO    ] Executing state boto_secgroup.present for salt
[DEBUG   ] getting group for salt
[ERROR   ] An exception occurred in this state: Traceback (most recent call last):
  File "/usr/lib/python2.7/dist-packages/salt/state.py", line 1560, in call
    **cdata['kwargs'])
  File "/usr/lib/python2.7/dist-packages/salt/states/boto_secgroup.py", line 131, in present
    keyid, profile)
  File "/usr/lib/python2.7/dist-packages/salt/states/boto_secgroup.py", line 172, in _security_group_present
    region, key, keyid, profile)
  File "/usr/lib/python2.7/dist-packages/salt/modules/boto_secgroup.py", line 287, in create
    created = conn.create_security_group(name, description, vpc_id)
  File "/usr/local/lib/python2.7/dist-packages/boto/ec2/connection.py", line 3003, in create_security_group
    SecurityGroup, verb='POST')
  File "/usr/local/lib/python2.7/dist-packages/boto/connection.py", line 1208, in get_object
    raise self.ResponseError(response.status, response.reason, body)
EC2ResponseError: EC2ResponseError: 400 Bad Request
<?xml version="1.0" encoding="UTF-8"?>
<Response><Errors><Error><Code>InvalidGroup.Duplicate</Code><Message>The security group 'salt' already exists for VPC 'vpc-6cb31508'</Message></Error></Errors><RequestID>a55a96d8-80cb-440e-9b83-0ad00bf558d2</RequestID></Response>

[INFO    ] Completed state [salt] at time 11:42:07.805648
[DEBUG   ] File /var/cache/salt/minion/accumulator/140355242716240 does not exist, no need to cleanup.
[DEBUG   ] LazyLoaded config.option
[DEBUG   ] Re-using SAuth for ('/etc/salt/pki/minion', 'saltmaster', 'tcp://172.31.0.161:4506')
[DEBUG   ] LazyLoaded highstate.output
local:
----------
          ID: aws_ec2_secgroup
    Function: boto_secgroup.present
        Name: salt
      Result: False
     Comment: An exception occurred in this state: Traceback (most recent call last):
                File "/usr/lib/python2.7/dist-packages/salt/state.py", line 1560, in call
                  **cdata['kwargs'])
                File "/usr/lib/python2.7/dist-packages/salt/states/boto_secgroup.py", line 131, in present
                  keyid, profile)
                File "/usr/lib/python2.7/dist-packages/salt/states/boto_secgroup.py", line 172, in _security_group_present
                  region, key, keyid, profile)
                File "/usr/lib/python2.7/dist-packages/salt/modules/boto_secgroup.py", line 287, in create
                  created = conn.create_security_group(name, description, vpc_id)
                File "/usr/local/lib/python2.7/dist-packages/boto/ec2/connection.py", line 3003, in create_security_group
                  SecurityGroup, verb='POST')
                File "/usr/local/lib/python2.7/dist-packages/boto/connection.py", line 1208, in get_object
                  raise self.ResponseError(response.status, response.reason, body)
              EC2ResponseError: EC2ResponseError: 400 Bad Request
              <?xml version="1.0" encoding="UTF-8"?>
              <Response><Errors><Error><Code>InvalidGroup.Duplicate</Code><Message>The security group 'salt' already exists for VPC 'vpc-6cb31508'</Message></Error></Errors><RequestID>a55a96d8-80cb-440e-9b83-0ad00bf558d2</RequestID></Response>
     Started: 11:42:06.906978
    Duration: 898.67 ms
     Changes:

Summary
------------
Succeeded: 0
Failed:    1
------------
Total states run:     1
```

=> Problems:
- The security group is setup in us-east-1 instead of eu-central-1.
- There are no incoming rules setup.

Testing for fixes/workarounds results in:
- Setting region to us-east-1 didn't change behavior for me.
- Checking the rules with same AWS credentials works fine for awscli:

```
root@saltmaster:/srv/salt/base/aws/eu-central-1# aws ec2 describe-security-groups --region=us-east-1 --output=json
{
    "SecurityGroups": [
        {
            "IpPermissionsEgress": [
                {
                    "IpProtocol": "-1",
                    "IpRanges": [
                        {
                            "CidrIp": "0.0.0.0/0"
                        }
                    ],
                    "UserIdGroupPairs": [],
                    "PrefixListIds": []
                }
            ],
            "Description": "default VPC security group",
            "IpPermissions": [
                {
                    "IpProtocol": "-1",
                    "IpRanges": [],
                    "UserIdGroupPairs": [
                        {
                            "UserId": "123456789012",
                            "GroupId": "sg-e176b787"
                        }
                    ],
                    "PrefixListIds": []
                }
            ],
            "GroupName": "default",
            "VpcId": "vpc-6cb31508",
            "OwnerId": "123456789012",
            "GroupId": "sg-e176b787"
        },
        {
            "IpPermissionsEgress": [
                {
                    "IpProtocol": "-1",
                    "IpRanges": [
                        {
                            "CidrIp": "0.0.0.0/0"
                        }
                    ],
                    "UserIdGroupPairs": [],
                    "PrefixListIds": []
                }
            ],
            "Description": "Gateway VPC security group",
            "IpPermissions": [],
            "GroupName": "salt",
            "VpcId": "vpc-6cb31508",
            "OwnerId": "123456789012",
            "GroupId": "sg-8a1c6eec"
        }
    ]
}
```
