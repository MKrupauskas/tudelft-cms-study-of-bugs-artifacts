alternatives.check_installed looks for "set" alternatives rather than "installed" alternatives; therefore it fails for all alternatives that are installed except the currently selected one.

For example, I have java configured as follows:

```
[root@hkl105032 ~]# alternatives --display java
java - status is auto.
 link currently points to /usr/java/jdk1.8.0_40/bin/java
/usr/java/jdk1.8.0_40/bin/java - priority 18040
Current `best' version is /usr/java/jdk1.8.0_40/bin/java.
```
Now I use Salt to install an additional version:

`[root@hkl105032 ~]# salt 'hkl105032' alternatives.install java /usr/bin/java /usr/java/jdk1.7.0_75/bin/java 17075
`
But when I try to check if it's installed, I get:

```
[root@hkl105032 ~]# salt 'hkl105032' alternatives.check_installed java /usr/java/jdk1.7.0_75/bin/java
hkl105032:
    False
```
Even though alternatives clearly tells me it is installed:

```
[root@hkl105032 ~]# alternatives --display java
java - status is auto.
 link currently points to /usr/java/jdk1.8.0_40/bin/java
/usr/java/jdk1.8.0_40/bin/java - priority 18040
/usr/java/jdk1.7.0_75/bin/java - priority 17075
Current `best' version is /usr/java/jdk1.8.0_40/bin/java.
```

This is because the check_installed method checks to see if the symlinks in /etc/alternatives point to /usr/java/jdk1.7.0_75... but of course they don't because this alternative is merely "installed", not "set".
