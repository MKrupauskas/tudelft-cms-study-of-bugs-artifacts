### Description of Issue/Question

We have about 10 different environments set for the machines we manage.  File roots look like this:

```
file_roots:
  base:
    - /srv/salt/base
  dev:
    - /srv/salt/dev
    - /srv/salt/base
    - /srv/salt/common
  env1:
    - /srv/salt/env1
    - /srv/salt/base
    - /srv/salt/common
```

our merge strategy is set to same.  Environments are configured on the minions in minion.d
This works well for us, allow shared states between environments along with isolation of environments.  However, we had an issue where the environments specified on the minions got blanked out.  So, in absence of a defined environment; all the top files in all environments were merged.  

The "base" environment's top file contains only a single state that manages the salt minion's configs and applies configs, such as the minion's defined environment, based on an external pillar source (cobbler in this case).

Our expectation was that if a environment was ever not specified, the minion would run just the top file for the base environment.  (default_top is set to base)  
So, we tested two configurations of env_order to see if we could enforce this behavior.  

env_order: ['base']
and
env_order: ['base', 'dev', 'env1', 'env2', 'env3', 'env4', 'env5', 'env6', 'env7, 'env8']

env_order: ['base'] resulted in the base top file being run when no environment was specified.  But, after an environment was specified on the minion, a state.apply would fail with as the minion could only see the base environment.  (state.show_top would generate the correct top file however)

env_order: ['base', 'dev', 'env1', 'env2', 'env3', 'env4', 'env5', 'env6', 'env7, 'env8'] 
This time, the correct top file was run when the environment was specified on the minion.  But, if no environment is specified, all the top files are merged.  

So, there seems to be no way to get the functionality of running only the base top file when no environment is specified and following the merge strategy same when an environment is specified.  


The above tests seem to be in conflict with the describe behavior of default_top

"When top_file_merging_strategy is set to same, and no environment is specified for a highstate (i.e. environment is not set for the minion), this config option specifies a fallback environment in which to look for a top file if an environment lacks one."


### Setup
(Please provide relevant configs and/or SLS files (Be sure to remove sensitive info).)

### Steps to Reproduce Issue
(Include debug logs if possible and relevant.)

### Versions Report
(Provided by running `salt --versions-report`. Please also mention any differences in master/minion versions.)
alt Version:
           Salt: 2017.7.1

Dependency Versions:
           cffi: Not Installed
       cherrypy: unknown
       dateutil: Not Installed
      docker-py: Not Installed
          gitdb: Not Installed
      gitpython: Not Installed
          ioflo: Not Installed
         Jinja2: 2.7.2
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: Not Installed
           Mako: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.4.7
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
   pycryptodome: 3.4.3
         pygit2: Not Installed
         Python: 2.7.5 (default, Nov  6 2016, 00:28:07)
   python-gnupg: Not Installed
         PyYAML: 3.11
          PyZMQ: 15.3.0
           RAET: Not Installed
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.2.1
            ZMQ: 4.1.4

System Versions:
           dist: centos 7.3.1611 Core
         locale: UTF-8
        machine: x86_64
        release: 3.10.0-514.26.2.el7.x86_64
         system: Linux
        version: CentOS Linux 7.3.1611 Core
