If the target of `file.replace` is a symbolic link, `file.replace` is writing a new, regular file over the symbolic link. This happens whether or not there is a change to the file.

```
# echo "baz" > foo
# ln -s foo bar
# ls -al
total 40
dr-xr-x---  4 root root 4096 Feb 21 18:20 .
dr-xr-xr-x 24 root root 4096 Feb 21  2015 ..
lrwxrwxrwx  1 root root    3 Feb 21 18:20 bar -> foo
-rw-r--r--  1 root root    4 Feb 21 17:47 foo
```

Note that `bar` is a symbolic link. Now:

```
# salt-call --local file.replace bar badstring justbecause
local:

#
# ls -al
total 44
dr-xr-x---  4 root root 4096 Feb 21 18:22 .
dr-xr-xr-x 24 root root 4096 Feb 21  2015 ..
-rw-r--r--  1 root root    4 Feb 21 18:22 bar
lrwxrwxrwx  1 root root    3 Feb 21 18:20 bar.bak -> foo
-rw-r--r--  1 root root    4 Feb 21 17:47 foo
```

Note that `bar` is no longer a symbolic link.

```
# salt-call --versions-report
           Salt: 2014.7.0
         Python: 2.6.6 (r266:84292, Jan 22 2014, 09:42:36)
         Jinja2: 2.2.1
       M2Crypto: 0.20.2
 msgpack-python: 0.4.4
   msgpack-pure: Not Installed
       pycrypto: 2.0.1
        libnacl: Not Installed
         PyYAML: 3.10
          ioflo: Not Installed
          PyZMQ: 14.3.1
           RAET: Not Installed
            ZMQ: 3.2.4
           Mako: Not Installed
```
