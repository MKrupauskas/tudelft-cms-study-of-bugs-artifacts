### Description of Issue/Question

I am trying to use gitfs to drive environment isolation using a top file. I have 3 environments : 
- base: on master branch
- dev: on dev branch
- qa: on qa branch

When I try from a minion a state.show_top in trace level, the minion only tries the targeting of the base environment. So show_top is empty since the minion is matching a target of 'dev' environment. 

Adding  'environment: dev' in the minion configuration solves the issue.

Here are the logs of the show_top:

``` shell
salt-call state.show_top -l trace
[DEBUG   ] Reading configuration from /etc/salt/minion
[DEBUG   ] Including configuration from '/etc/salt/minion.d/_schedule.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/_schedule.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/custom.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/custom.conf
[TRACE   ] None of the required configuration sections, 'logstash_udp_handler' and 'logstash_zmq_handler', were found the in the configuration. Not loading the Logstash logging handlers module.
[TRACE   ] The required configuration section, 'fluent_handler', was not found the in the configuration. Not loading the fluent logging handlers module.
[DEBUG   ] Configuration file path: /etc/salt/minion
[WARNING ] Insecure logging configuration detected! Sensitive data may be logged.
[DEBUG   ] Reading configuration from /etc/salt/minion
[DEBUG   ] Including configuration from '/etc/salt/minion.d/_schedule.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/_schedule.conf
[DEBUG   ] Including configuration from '/etc/salt/minion.d/custom.conf'
[DEBUG   ] Reading configuration from /etc/salt/minion.d/custom.conf
[TRACE   ] Loading core.hwaddr_interfaces grain
[TRACE   ] Loading core.hostname grain
[TRACE   ] Loading core.get_master grain
[TRACE   ] Loading core.pythonversion grain
[TRACE   ] Loading core.path grain
[TRACE   ] Loading core.get_server_id grain
[TRACE   ] Loading core.ip6 grain
[TRACE   ] Loading core.ip4 grain
[TRACE   ] Loading core.saltversion grain
[TRACE   ] Loading core.saltpath grain
[TRACE   ] Loading core.pythonexecutable grain
[TRACE   ] Loading core.fqdn_ip4 grain
[TRACE   ] Loading core.fqdn_ip6 grain
[TRACE   ] Loading core.ip6_interfaces grain
[TRACE   ] Loading core.ip4_interfaces grain
[TRACE   ] Loading core.append_domain grain
[TRACE   ] Loading core.os_data grain
[TRACE   ] Loading core.zmqversion grain
[TRACE   ] Loading core.saltversioninfo grain
[TRACE   ] Loading core.pythonpath grain
[TRACE   ] Loading core.id_ grain
[TRACE   ] Loading core.locale_info grain
[TRACE   ] Loading core.get_machine_id grain
[TRACE   ] Loading core.ip_interfaces grain
[TRACE   ] Device xvda reports itself as an SSD
[TRACE   ] Device xvdf reports itself as an SSD
[DEBUG   ] Initializing new SAuth for ('/etc/salt/pki/minion', 'd5-dropship-minion01#########', 'tcp://########:4506')
[DEBUG   ] Generated random reconnect delay between '1000ms' and '11000ms' (9877)
[DEBUG   ] Setting zmq_reconnect_ivl to '9877ms'
[DEBUG   ] Setting zmq_reconnect_ivl_max to '11000ms'
[DEBUG   ] Initializing new AsyncZeroMQReqChannel for ('/etc/salt/pki/minion', 'd5-dropship-minion01###########', 'tcp://########:4506', 'aes')
[DEBUG   ] Initializing new SAuth for ('/etc/salt/pki/minion', 'd5-dropship-minion01#########', 'tcp://############:4506')
[DEBUG   ] Initializing new AsyncZeroMQReqChannel for ('/etc/salt/pki/minion', 'd5-dropship-minion01#############', 'tcp://###########:4506', 'clear')
[DEBUG   ] Decrypting the current master AES key
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[DEBUG   ] LazyLoaded state.show_top
[DEBUG   ] LazyLoaded saltutil.is_running
[DEBUG   ] Initializing new AsyncZeroMQReqChannel for ('/etc/salt/pki/minion', 'd5-dropship-minion01############', 'tcp://############:4506', 'aes')
[DEBUG   ] Initializing new SAuth for ('/etc/salt/pki/minion', 'd5-dropship-minion01#########, 'tcp://#############:4506')
[DEBUG   ] Initializing new AsyncZeroMQReqChannel for ('/etc/salt/pki/minion', 'd5-dropship-minion01########', 'tcp://########:4506', 'aes')
[DEBUG   ] Initializing new SAuth for ('/etc/salt/pki/minion', 'd5-dropship-minion01########', 'tcp://#########:4506')
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[INFO    ] Loading fresh modules for state activity
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[DEBUG   ] In saltenv 'base', looking at rel_path u'top.sls' to resolve u'salt://top.sls'
[DEBUG   ] In saltenv 'base', ** considering ** path u'/var/cache/salt/minion/files/base/top.sls' to resolve u'salt://top.sls'
[INFO    ] Fetching file from saltenv 'base', ** skipped ** latest already in cache u'salt://top.sls'
[DEBUG   ] compile template: /var/cache/salt/minion/files/base/top.sls
[DEBUG   ] Jinja search path: ['/var/cache/salt/minion/files/base']
[PROFILE ] Time (in seconds) to render '/var/cache/salt/minion/files/base/top.sls' using 'jinja' renderer: 0.0116651058197
[DEBUG   ] Rendered data from file: /var/cache/salt/minion/files/base/top.sls:


# Inclusion des states pour la branche qa
qa:
  'G@dropship-env:qa':
    - match: compound
    - commons
  'G@dropship-env:qa and G@roles:commons':
    - match: compound
    - commons

# Inclusion des states pour la branche base
base:
  'G@dropship-env:prod':
    - match: compound
    - commons
  'G@dropship-env:prod and G@roles:commons':
    - match: compound
    - commons

# Inclusion des states pour la branche dev
dev:
  'G@dropship-env:dev':
    - match: compound
    - commons
  'G@dropship-env:dev and G@roles:commons':
    - match: compound
    - commons
[DEBUG   ] LazyLoaded config.get
[DEBUG   ] Results of YAML rendering:
OrderedDict([('qa', OrderedDict([('G@dropship-env:qa', [OrderedDict([('match', 'compound')]), 'commons']), ('G@dropship-env:qa and G@roles:commons', [OrderedDict([('match', 'compound')]), 'commons'])])), ('base', OrderedDict([('G@dropship-env:prod', [OrderedDict([('match', 'compound')]), 'commons']), ('G@dropship-env:prod and G@roles:commons', [OrderedDict([('match', 'compound')]), 'commons'])])), ('dev', OrderedDict([('G@dropship-env:dev', [OrderedDict([('match', 'compound')]), 'commons']), ('G@dropship-env:dev and G@roles:commons', [OrderedDict([('match', 'compound')]), 'commons'])]))])
[PROFILE ] Time (in seconds) to render '/var/cache/salt/minion/files/base/top.sls' using 'yaml' renderer: 0.00949597358704
[DEBUG   ] compound_match: d5-dropship-minion01######## ? G@dropship-env:prod
[DEBUG   ] grains target: dropship-env:prod
[DEBUG   ] Attempting to match 'prod' in 'dropship-env' using delimiter ':'
[DEBUG   ] compound_match d5-dropship-minion01######## ? "G@dropship-env:prod" => "False"
[DEBUG   ] compound_match: d5-dropship-minion01####### ? G@dropship-env:prod and G@roles:commons
[DEBUG   ] grains target: dropship-env:prod
[DEBUG   ] Attempting to match 'prod' in 'dropship-env' using delimiter ':'
[DEBUG   ] grains target: roles:commons
[DEBUG   ] Attempting to match 'commons' in 'roles' using delimiter ':'
[DEBUG   ] compound_match d5-dropship-minion01.mg.int.coprod.eu-west-1.aws ? "G@dropship-env:prod and G@roles:commons" => "False and True"
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[DEBUG   ] Initializing new AsyncZeroMQReqChannel for ('/etc/salt/pki/minion', 'd5-dropship-minion01.mg.int.coprod.eu-west-1.aws', 'tcp://#########', 'aes')
[DEBUG   ] Initializing new SAuth for ('/etc/salt/pki/minion', 'd5-dropship-minion01######', 'tcp://##########:4506')
[DEBUG   ] LazyLoaded nested.output
[TRACE   ] data = {'local': {}}
local:
    ----------

The minion has the grain 'dropship-env: dev' 

```
### Setup

Master config contains:

``` yaml
top_file_merging_strategy: same
gitfs_provider: gitpython
fileserver_backend:
  - roots
  - git

gitfs_remotes:
  - {{ git_repo }}:
    - root: salt-states

gitfs_env_whitelist:
  - dev
  - base
  - qa

ext_pillar:
  - git:
    - master {{ git_repo }}:
      - root: salt-pillars
      - env: base
      - name: master
    - qa {{ git_repo }}:
      - root: salt-pillars
      - env: qa
      - name: qa
    - dev {{ git_repo }}:
      - root: salt-pillars
      - env: dev
      - name: dev

file_roots:
  base:
    - /app/cd-factory/salt-states
    - /app/salt

pillar_roots:
  base:
    - /app/cd-factory/salt-pillars
```
### Versions Report

``` yaml
salt --versions-report
Salt Version:
           Salt: 2015.8.5

Dependency Versions:
         Jinja2: 2.7.2
       M2Crypto: 0.21.1
           Mako: Not Installed
         PyYAML: 3.11
          PyZMQ: 14.7.0
         Python: 2.7.5 (default, Nov 20 2015, 02:00:19)
           RAET: Not Installed
        Tornado: 4.2.1
            ZMQ: 4.0.5
           cffi: Not Installed
       cherrypy: Not Installed
       dateutil: 2.5.0
          gitdb: 0.5.4
      gitpython: 0.3.2 RC1
          ioflo: Not Installed
        libgit2: Not Installed
        libnacl: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.4.6
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
         pygit2: Not Installed
   python-gnupg: Not Installed
          smmap: 0.8.1
        timelib: Not Installed

System Versions:
           dist: centos 7.2.1511 Core
        machine: x86_64
        release: 3.10.0-327.10.1.el7.x86_64
         system: CentOS Linux 7.2.1511 Core
```
