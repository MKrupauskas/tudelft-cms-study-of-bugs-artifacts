Dear ,
This is an minion client .

```
[root@dev]~# salt-call state.highstate -l debug
[DEBUG   ] Reading configuration from /etc/salt/minion
[DEBUG   ] Using cached minion ID from /etc/salt/minion_id: dev-autopage
[DEBUG   ] Configuration file path: /etc/salt/minion
[DEBUG   ] Reading configuration from /etc/salt/minion
[DEBUG   ] Decrypting the current master AES key
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[DEBUG   ] Mako not available
[DEBUG   ] Decrypting the current master AES key
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[DEBUG   ] Reading configuration from /etc/salt/minion
[DEBUG   ] Decrypting the current master AES key
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[INFO    ] Loading fresh modules for state activity
[DEBUG   ] Fetching file from saltenv 'base', ** attempting ** 'salt://top.sls'
[INFO    ] Fetching file from saltenv 'base', ** done ** 'top.sls'
[DEBUG   ] Jinja search path: ['/var/cache/salt/minion/files/base']
[DEBUG   ] Rendered data from file: /var/cache/salt/minion/files/base/top.sls:
#All monion host Salt states control Base config
base:
  '*':
    - bin.deploy
    - bin.salt_minion
    - bin.newrelic
    - bin.zabbix
    - bin.hosts
#Common mongos app host Salt control
  mongos-app:
    - match: nodegroup
    - bin.mongos
    - bin.nginx
    - bin.redis
#Single mongos app host Salt control.
  'ysp-testapp':
    - bin.testapp_site

  'ysp-rc-bd1':
    - bin.rc-bd1_site

  'ysp-rc-dev-v2':
    - bin.rc-dev-v2_site

  'ysp-rc-ide1':
    -bin.rc-ide1_site

  'ysp-rc-pf1':
    -bin.rc-pf1_site

  'ysp-rc-proxy1':
    -bin.rc-proxy1_site
[DEBUG   ] Results of YAML rendering: 
OrderedDict([('base', OrderedDict([('*', ['bin.deploy', 'bin.salt_minion', 'bin.newrelic', 'bin.zabbix', 'bin.hosts']), ('mongos-app', [OrderedDict([('match', 'nodegroup')]), 'bin.mongos', 'bin.nginx', 'bin.redis']), ('ysp-testapp', ['bin.testapp_site']), ('ysp-rc-bd1', ['bin.rc-bd1_site']), ('ysp-rc-dev-v2', ['bin.rc-dev-v2_site']), ('ysp-rc-ide1', '-bin.rc-ide1_site'), ('ysp-rc-pf1', '-bin.rc-pf1_site'), ('ysp-rc-proxy1', '-bin.rc-proxy1_site')]))])
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[DEBUG   ] Syncing all
[INFO    ] Creating module dir '/var/cache/salt/minion/extmods/modules'
[INFO    ] Syncing modules for environment 'base'
[INFO    ] Loading cache from salt://_modules, for base)
[DEBUG   ] Decrypting the current master AES key
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
[INFO    ] Caching directory '_modules/' for environment 'base'
[DEBUG   ] Local cache dir: '/var/cache/salt/minion/files/base/_modules'
[INFO    ] Creating module dir '/var/cache/salt/minion/extmods/states'
[INFO    ] Syncing states for environment 'base'
[INFO    ] Loading cache from salt://_states, for base)
[INFO    ] Caching directory '_states/' for environment 'base'
[DEBUG   ] Local cache dir: '/var/cache/salt/minion/files/base/_states'
[INFO    ] Creating module dir '/var/cache/salt/minion/extmods/grains'
[INFO    ] Syncing grains for environment 'base'
[INFO    ] Loading cache from salt://_grains, for base)
[INFO    ] Caching directory '_grains/' for environment 'base'
[DEBUG   ] Local cache dir: '/var/cache/salt/minion/files/base/_grains'
[INFO    ] Creating module dir '/var/cache/salt/minion/extmods/renderers'
[INFO    ] Syncing renderers for environment 'base'
[INFO    ] Loading cache from salt://_renderers, for base)
[INFO    ] Caching directory '_renderers/' for environment 'base'
[DEBUG   ] Local cache dir: '/var/cache/salt/minion/files/base/_renderers'
[INFO    ] Creating module dir '/var/cache/salt/minion/extmods/returners'
[INFO    ] Syncing returners for environment 'base'
[INFO    ] Loading cache from salt://_returners, for base)
[INFO    ] Caching directory '_returners/' for environment 'base'
[DEBUG   ] Local cache dir: '/var/cache/salt/minion/files/base/_returners'
[INFO    ] Creating module dir '/var/cache/salt/minion/extmods/outputters'
[INFO    ] Syncing outputters for environment 'base'
[INFO    ] Loading cache from salt://_outputters, for base)
[INFO    ] Caching directory '_outputters/' for environment 'base'
[DEBUG   ] Local cache dir: '/var/cache/salt/minion/files/base/_outputters'
[INFO    ] Creating module dir '/var/cache/salt/minion/extmods/utils'
[INFO    ] Syncing utils for environment 'base'
[INFO    ] Loading cache from salt://_utils, for base)
[INFO    ] Caching directory '_utils/' for environment 'base'
[DEBUG   ] Local cache dir: '/var/cache/salt/minion/files/base/_utils'
[DEBUG   ] Refreshing modules...
[INFO    ] Loading fresh modules for state activity
[DEBUG   ] SaltEvent PUB socket URI: ipc:///var/run/salt/minion/minion_event_5d2cf93440_pub.ipc
[DEBUG   ] SaltEvent PULL socket URI: ipc:///var/run/salt/minion/minion_event_5d2cf93440_pull.ipc
[DEBUG   ] Sending event - data = {'_stamp': '2014-11-24T17:00:10.631166'}
[INFO    ] Fetching file from saltenv 'base', ** skipped ** latest already in cache 'salt://bin/deploy.sls'
[DEBUG   ] Jinja search path: ['/var/cache/salt/minion/files/base']
[DEBUG   ] Rendered data from file: /var/cache/salt/minion/files/base/bin/deploy.sls:
#Deploy base system environment SLS file
#User bash set
/home/amuser/.zshrc:
  file.managed:
    - user: amuser
    - group: amuser
    - source: salt://common/deploy/zshrc.sh
    - mode: 660

#id_rsa
/home/amuser/.ssh/id_rsa:
  file.managed:
    - user: amuser
    - group: amuser
    - source: salt://common/deploy/deploy
    - mode: 600
#id_rsa.pub
/home/amuser/.ssh/id_rsa.pub:
  file.managed:
    - user: amuser
    - group: amuser
    - source: salt://common/deploy/deploy.pub
    - mode: 600
#limits.conf
/etc/security/limits.conf:
  file.managed:
    - user: root
    - group: root
    - source: salt://common/deploy/limits.conf
    - mode: 644

#Openssh-server control
openssh-server:
  pkg:
    - installed
  service:
    - name: sshd
    - running
    - watch:
      - file: /etc/ssh/sshd_config
    - require:
      - pkg: openssh-server
#SSH config file
/etc/ssh/sshd_config:
  file.managed:
    - usre: root
    - group: root
    - source: salt://common/deploy/sshd_config
    - mode: 600
#Remote Use SSH authorized_keys 
/home/amuser/.ssh/authorized_keys:
  file.managed:
    - user: amuser
    - group: amuser
    - source: salt://common/deploy/authorized_keys
    - mode: 600
[DEBUG   ] Results of YAML rendering: 
OrderedDict([('/home/amuser/.zshrc', OrderedDict([('file.managed', [OrderedDict([('user', 'amuser')]), OrderedDict([('group', 'amuser')]), OrderedDict([('source', 'salt://common/deploy/zshrc.sh')]), OrderedDict([('mode', 660)])])])), ('/home/amuser/.ssh/id_rsa', OrderedDict([('file.managed', [OrderedDict([('user', 'amuser')]), OrderedDict([('group', 'amuser')]), OrderedDict([('source', 'salt://common/deploy/deploy')]), OrderedDict([('mode', 600)])])])), ('/home/amuser/.ssh/id_rsa.pub', OrderedDict([('file.managed', [OrderedDict([('user', 'amuser')]), OrderedDict([('group', 'amuser')]), OrderedDict([('source', 'salt://common/deploy/deploy.pub')]), OrderedDict([('mode', 600)])])])), ('/etc/security/limits.conf', OrderedDict([('file.managed', [OrderedDict([('user', 'root')]), OrderedDict([('group', 'root')]), OrderedDict([('source', 'salt://common/deploy/limits.conf')]), OrderedDict([('mode', 644)])])])), ('openssh-server', OrderedDict([('pkg', ['installed']), ('service', [OrderedDict([('name', 'sshd')]), 'running', OrderedDict([('watch', [OrderedDict([('file', '/etc/ssh/sshd_config')])])]), OrderedDict([('require', [OrderedDict([('pkg', 'openssh-server')])])])])])), ('/etc/ssh/sshd_config', OrderedDict([('file.managed', [OrderedDict([('usre', 'root')]), OrderedDict([('group', 'root')]), OrderedDict([('source', 'salt://common/deploy/sshd_config')]), OrderedDict([('mode', 600)])])])), ('/home/amuser/.ssh/authorized_keys', OrderedDict([('file.managed', [OrderedDict([('user', 'amuser')]), OrderedDict([('group', 'amuser')]), OrderedDict([('source', 'salt://common/deploy/authorized_keys')]), OrderedDict([('mode', 600)])])]))])
[DEBUG   ] Fetching file from saltenv 'base', ** attempting ** 'salt://bin/salt_minion.sls'
[INFO    ] Fetching file from saltenv 'base', ** done ** 'bin/salt_minion.sls'
[DEBUG   ] Jinja search path: ['/var/cache/salt/minion/files/base']
[DEBUG   ] Rendered data from file: /var/cache/salt/minion/files/base/bin/salt_minion.sls:
#Salt Minion SLS File Col.
/etc/salt/minion:
  file.managed:
    - user: root
    - group: root
    - source: salt://common/salt/salt_minion.conf
    - mode: 600

salt-minion:
  pkg:
    - latest
  service:
    - running
    - watch:
      - file: /etc/salt/minion
    - require:
      - pkg: salt-minion
[DEBUG   ] Results of YAML rendering: 
OrderedDict([('/etc/salt/minion', OrderedDict([('file.managed', [OrderedDict([('user', 'root')]), OrderedDict([('group', 'root')]), OrderedDict([('source', 'salt://common/salt/salt_minion.conf')]), OrderedDict([('mode', 600)])])])), ('salt-minion', OrderedDict([('pkg', ['latest']), ('service', ['running', OrderedDict([('watch', [OrderedDict([('file', '/etc/salt/minion')])])]), OrderedDict([('require', [OrderedDict([('pkg', 'salt-minion')])])])])]))])
[DEBUG   ] Fetching file from saltenv 'base', ** attempting ** 'salt://bin/newrelic.sls'
[INFO    ] Fetching file from saltenv 'base', ** done ** 'bin/newrelic.sls'
[DEBUG   ] Jinja search path: ['/var/cache/salt/minion/files/base']
[DEBUG   ] Rendered data from file: /var/cache/salt/minion/files/base/bin/newrelic.sls:
#Newrelic controller file

newrelic_repo:
  file.managed:
    - name: /root/newrelic-repo-5-3.noarch.rpm
    - source: salt://common/newrelic/newrelic-repo-5-3.noarch.rpm
    - user: root
    - group: root
  cmd.run:
    - name: rpm -ivh /root/newrelic-repo-5-3.noarch.rpm
    - unless: test -f /etc/yum.repos.d/newrelic.repo
    - require:
      - file: newrelic_repo

newrelic-sysmond:
  pkg:
      - installed
      - require:
        - file: newrelic_repo
  cmd.run:
    - name: nrsysmond-config --set license_key=32b6db19fb73891b7857f7555f9e7ceab5f2ecc5
    - require:
      - pkg: newrelic-sysmond
  service:
    - running
    - watch:
      - file: /etc/newrelic/nrsysmond.cfg
    - require:
      - pkg: newrelic-sysmond
/etc/newrelic/nrsysmond.cfg:
#  file.exists
  file.managed:
    - source: salt://common/newrelic/nrsysmond.cfg
    - user: root
    - group: root
    - mode: 644

[DEBUG   ] Results of YAML rendering: 
OrderedDict([('newrelic_repo', OrderedDict([('file.managed', [OrderedDict([('name', '/root/newrelic-repo-5-3.noarch.rpm')]), OrderedDict([('source', 'salt://common/newrelic/newrelic-repo-5-3.noarch.rpm')]), OrderedDict([('user', 'root')]), OrderedDict([('group', 'root')])]), ('cmd.run', [OrderedDict([('name', 'rpm -ivh /root/newrelic-repo-5-3.noarch.rpm')]), OrderedDict([('unless', 'test -f /etc/yum.repos.d/newrelic.repo')]), OrderedDict([('require', [OrderedDict([('file', 'newrelic_repo')])])])])])), ('newrelic-sysmond', OrderedDict([('pkg', ['installed', OrderedDict([('require', [OrderedDict([('file', 'newrelic_repo')])])])]), ('cmd.run', [OrderedDict([('name', 'nrsysmond-config --set license_key=32b6db19fb73891b7857f7555f9e7ceab5f2ecc5')]), OrderedDict([('require', [OrderedDict([('pkg', 'newrelic-sysmond')])])])]), ('service', ['running', OrderedDict([('watch', [OrderedDict([('file', '/etc/newrelic/nrsysmond.cfg')])])]), OrderedDict([('require', [OrderedDict([('pkg', 'newrelic-sysmond')])])])])])), ('/etc/newrelic/nrsysmond.cfg', OrderedDict([('file.managed', [OrderedDict([('source', 'salt://common/newrelic/nrsysmond.cfg')]), OrderedDict([('user', 'root')]), OrderedDict([('group', 'root')]), OrderedDict([('mode', 644)])])]))])
[INFO    ] Fetching file from saltenv 'base', ** skipped ** latest already in cache 'salt://bin/zabbix.sls'
[DEBUG   ] Jinja search path: ['/var/cache/salt/minion/files/base']
[DEBUG   ] Rendered data from file: /var/cache/salt/minion/files/base/bin/zabbix.sls:
#Zabbix-agent install

zabbix_repo:
  file.managed:
    - name: /root/zabbix-release-2.2-1.el6.noarch.rpm
    - source: salt://common/deploy/zabbix-release-2.2-1.el6.noarch.rpm
    - user: root
    - group: root
  cmd.run:
    - name: rpm -ivh /root/zabbix-release-2.2-1.el6.noarch.rpm
    - unless: test -f /etc/yum.repos.d/zabbix.repo
    - require:
      - file: zabbix_repo

zabbix-agent:
  pkg:
#      - installed
      - latest
      - require:
        - file: zabbix_repo
  service:
    - running
    - watch:
      - file: /etc/zabbix/zabbix_agentd.conf
    - require:
      - pkg: zabbix-agent

/etc/zabbix/zabbix_agentd.conf:
  file.managed:
    - source: salt://common/deploy/zabbix_agentd.conf
    - user: root
    - group: root
    - mode: 644
[DEBUG   ] Results of YAML rendering: 
OrderedDict([('zabbix_repo', OrderedDict([('file.managed', [OrderedDict([('name', '/root/zabbix-release-2.2-1.el6.noarch.rpm')]), OrderedDict([('source', 'salt://common/deploy/zabbix-release-2.2-1.el6.noarch.rpm')]), OrderedDict([('user', 'root')]), OrderedDict([('group', 'root')])]), ('cmd.run', [OrderedDict([('name', 'rpm -ivh /root/zabbix-release-2.2-1.el6.noarch.rpm')]), OrderedDict([('unless', 'test -f /etc/yum.repos.d/zabbix.repo')]), OrderedDict([('require', [OrderedDict([('file', 'zabbix_repo')])])])])])), ('zabbix-agent', OrderedDict([('pkg', ['latest', OrderedDict([('require', [OrderedDict([('file', 'zabbix_repo')])])])]), ('service', ['running', OrderedDict([('watch', [OrderedDict([('file', '/etc/zabbix/zabbix_agentd.conf')])])]), OrderedDict([('require', [OrderedDict([('pkg', 'zabbix-agent')])])])])])), ('/etc/zabbix/zabbix_agentd.conf', OrderedDict([('file.managed', [OrderedDict([('source', 'salt://common/deploy/zabbix_agentd.conf')]), OrderedDict([('user', 'root')]), OrderedDict([('group', 'root')]), OrderedDict([('mode', 644)])])]))])
[DEBUG   ] Fetching file from saltenv 'base', ** attempting ** 'salt://bin/hosts.sls'
[INFO    ] Fetching file from saltenv 'base', ** done ** 'bin/hosts.sls'
[DEBUG   ] Jinja search path: ['/var/cache/salt/minion/files/base']
[DEBUG   ] Rendered data from file: /var/cache/salt/minion/files/base/bin/hosts.sls:
#All server hosts file control
/etc/hosts:
  file.managed:
    - source: salt://common/deploy/hosts
    - mode: 644
    - user: root
    - group: root
[DEBUG   ] Results of YAML rendering: 
OrderedDict([('/etc/hosts', OrderedDict([('file.managed', [OrderedDict([('source', 'salt://common/deploy/hosts')]), OrderedDict([('mode', 644)]), OrderedDict([('user', 'root')]), OrderedDict([('group', 'root')])])]))])
[DEBUG   ] LazyLoaded .returner
[DEBUG   ] Decrypting the current master AES key
[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem
local:
    Data failed to compile:
----------
    Malformed topfile (state declarations not formed as a list)
----------
    Malformed topfile (state declarations not formed as a list)
----------
    Malformed topfile (state declarations not formed as a list)
[root@dev]~# 
```

In the end, how can i resolve this problem ?
