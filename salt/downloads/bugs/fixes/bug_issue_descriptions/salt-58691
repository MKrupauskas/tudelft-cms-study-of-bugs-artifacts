**Description**

Repeated calls to `salt.utils.vmware.get_service_instance` over time can result in an old service instance object being used after its authentication has expired.

**Setup**

Create a custom runner `/srv/salt/_runners/vmware_auth_test.py`:

```python
import salt.cloud

def minimal():
    cloud_client = salt.cloud.CloudClient(__opts__["conf_file"])
    result = cloud_client.action(fun="list_nodes", provider="my-vsphere-provider")
    return result
```

**Steps to Reproduce the behavior**

Run `salt-run vmware_auth_test.minimal` on a schedule of every couple of hours.  I didn't test this with salt's scheduler directly, it was the Enterprise scheduler.

This will happen not on the first run, but on subsequent ones:

```
Exception occurred in runner vmware_auth_test.minimal: Traceback (most recent call last):
  File "/usr/lib/python3.6/site-packages/salt/utils/vmware.py", line 904, in get_content
    container_ref, [obj_type], True
  File "/usr/local/lib/python3.6/site-packages/pyVmomi/VmomiSupport.py", line 706, in <lambda>
    self.f(*(self.args + (obj,) + args), **kwargs)
  File "/usr/local/lib/python3.6/site-packages/pyVmomi/VmomiSupport.py", line 512, in _InvokeMethod
    return self._stub.InvokeMethod(self, info, args)
  File "/usr/local/lib/python3.6/site-packages/pyVmomi/SoapAdapter.py", line 1397, in InvokeMethod
    raise obj # pylint: disable-msg=E0702
pyVmomi.VmomiSupport.vim.fault.NotAuthenticated: (vim.fault.NotAuthenticated) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   msg = 'The session is not authenticated.',
   faultCause = <unset>,
   faultMessage = (vmodl.LocalizableMessage) [],
   object = 'vim.Folder:group-d1',
   privilegeId = 'System.View'
}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.6/site-packages/salt/client/mixins.py", line 397, in low
    data["return"] = func(*args, **kwargs)
  File "/var/cache/salt/master/extmods/runners/vmware_auth_test.py", line 5, in minimal
    result = cloud_client.action(fun="list_nodes", provider="my-vsphere-provider")
  File "/usr/lib/python3.6/site-packages/salt/cloud/__init__.py", line 503, in action
    return mapper.do_function(provider, fun, kwargs)
  File "/usr/lib/python3.6/site-packages/salt/cloud/__init__.py", line 1567, in do_function
    return {alias: {driver: self.clouds[fun](call="function")}}
  File "/usr/lib/python3.6/site-packages/salt/cloud/clouds/vmware.py", line 1997, in list_nodes
    _get_si(), vim.VirtualMachine, vm_properties
  File "/usr/lib/python3.6/site-packages/salt/utils/vmware.py", line 1069, in get_mors_with_properties
    content = get_content(*content_args, **content_kwargs)
  File "/usr/lib/python3.6/site-packages/salt/utils/vmware.py", line 910, in get_content
    "{}".format(exc.privilegeId)
salt.exceptions.VMwareApiError: Not enough permissions. Required privilege: System.View
```

**Expected behavior**

Given a proper provider configuration, this should work.

**Versions Report**
<details><summary>salt --versions-report</summary>
(Provided by running salt --versions-report. Please also mention any differences in master/minion versions.) 

```
Salt Version:
           Salt: 3001.1
 
Dependency Versions:
           cffi: 1.14.3
       cherrypy: Not Installed
       dateutil: Not Installed
      docker-py: Not Installed
          gitdb: Not Installed
      gitpython: Not Installed
         Jinja2: 2.11.1
        libgit2: Not Installed
       M2Crypto: 0.35.2
           Mako: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.6.2
   mysql-python: Not Installed
      pycparser: 2.20
       pycrypto: Not Installed
   pycryptodome: Not Installed
         pygit2: Not Installed
         Python: 3.6.8 (default, Apr  2 2020, 13:34:55)
   python-gnupg: Not Installed
         PyYAML: 3.13
          PyZMQ: 17.0.0
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.5.3
            ZMQ: 4.1.4
 
System Versions:
           dist: centos 7 Core
         locale: UTF-8
        machine: x86_64
        release: 5.4.0-48-generic
         system: Linux
        version: CentOS Linux 7 Core
```
</details>

**Additional context**

I think this will fix it, by checking the service instance retrieved from `GetSi()` for current auth instead of just returning it.

```patch
diff --git a/salt/utils/vmware.py b/salt/utils/vmware.py
index 11ade89334..f8bf21df6e 100644
--- a/salt/utils/vmware.py
+++ b/salt/utils/vmware.py
@@ -435,10 +435,8 @@ def get_service_instance(
             # and reconnect
             Disconnect(service_instance)
             service_instance = None
-        else:
-            return service_instance
 
-    if not service_instance:
+    else:
         service_instance = _get_service_instance(
             host, username, password, protocol, port, mechanism, principal, domain
         )
```
