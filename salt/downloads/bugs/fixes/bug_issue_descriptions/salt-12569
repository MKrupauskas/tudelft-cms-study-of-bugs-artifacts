```
CentOS release 6.4 (Final)

Linux dummy01 2.6.32-358.23.2.el6.x86_64 #1 SMP Wed Oct 16 18:37:12 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux

           Salt: 2014.1.3
         Python: 2.6.6 (r266:84292, Jul 10 2013, 22:48:45)
         Jinja2: 2.2.1
       M2Crypto: 0.20.2
 msgpack-python: 0.1.9.final
   msgpack-pure: Not Installed
       pycrypto: 2.0.1
         PyYAML: 3.10
          PyZMQ: 13.0.2
            ZMQ: 3.2.3
```

We noticed recently that running a highstate against a certain Linux server consumed an insane amount of RAM, to the point where it started swapping heavily.

We traced this to a file.managed state managing a very large (16GB) log file. The state only manages the owner and permissions, not contents or anything else. I was able to reproduce locally using this minimal SLS file, and a file created with `fallocate -l 3G`. The test VM was provisioned with 4GB of RAM.

```
/home/vagrant/test.img:
  file.managed:
    - user: vagrant
    - group: vagrant
    - mode: 766
```

One important note is that if the file is larger than total available memory (RAM + swap), Salt fails to allocate the memory (obviously) and the highstate runs very fast. But if the file can fit into memory, it will be read, and potentially bring the box to its knees with swap usage.

It seems to me that if we do not care about the contents or hash of the file, no attempt should be made to read it. With the current behavior it's impossible to manage the attributes of very large files.

Here's some output from strace where I found the correlation between file size, available RAM and performance.

File size > available memory, Salt runs very fast:

```
stat("/home/vagrant/test.img", {st_mode=S_IFREG|0766, st_size=6442450944, ...}) = 0
open("/home/vagrant/test.img", O_RDONLY) = 4
fstat(4, {st_mode=S_IFREG|0766, st_size=6442450944, ...}) = 0
fcntl(4, F_GETFD)                       = 0
fcntl(4, F_SETFD, FD_CLOEXEC)           = 0
fstat(4, {st_mode=S_IFREG|0766, st_size=6442450944, ...}) = 0
lseek(4, 0, SEEK_CUR)                   = 0
fstat(4, {st_mode=S_IFREG|0766, st_size=6442450944, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fed2428c000
lseek(4, 0, SEEK_CUR)                   = 0
mmap(NULL, 6442455040, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = -1 ENOMEM (Cannot allocate memory)
brk(0x182b65000)                        = 0x2c65000
mmap(NULL, 6442586112, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = -1 ENOMEM (Cannot allocate memory)
mmap(NULL, 6442455040, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = -1 ENOMEM (Cannot allocate memory)
close(4)                                = 0
munmap(0x7fed2428c000, 4096)            = 0
```

File size < available memory. Large file is read and box grinds to a halt.

```
stat("/home/vagrant/test.img", {st_mode=S_IFREG|0644, st_size=3221225472, ...}) = 0
open("/home/vagrant/test.img", O_RDONLY) = 4
fstat(4, {st_mode=S_IFREG|0644, st_size=3221225472, ...}) = 0
fcntl(4, F_GETFD)                       = 0
fcntl(4, F_SETFD, FD_CLOEXEC)           = 0
fstat(4, {st_mode=S_IFREG|0644, st_size=3221225472, ...}) = 0
lseek(4, 0, SEEK_CUR)                   = 0
fstat(4, {st_mode=S_IFREG|0644, st_size=3221225472, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f1823409000
lseek(4, 0, SEEK_CUR)                   = 0
mmap(NULL, 3221229568, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f1747fff000
read(4, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 3221225472) = 2147479552
read(4, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 1073745920) = 1073745920
read(4, "", 4096)                       = 0
munmap(0x7f1747fff000, 3221229568)      = 0
close(4)                                = 0
munmap(0x7f1823409000, 4096)            = 0
```
