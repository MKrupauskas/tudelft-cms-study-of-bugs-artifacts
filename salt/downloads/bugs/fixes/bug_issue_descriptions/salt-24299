I am running a system which uses openssh 6.8 and is now incompatible with salt ssh key fingerprint functionality.

http://www.openssh.com/txt/release-6.8: 

> Add FingerprintHash option to ssh(1) and sshd(8), and equivalent
>    command-line flags to the other tools to control algorithm used
>    for key fingerprints. The default changes from MD5 to SHA256 and
>    format from hex to base64.

Offending/"wrong"/"historical" salt code: 
https://github.com/saltstack/salt/blob/develop/salt/modules/ssh.py#L223

Similar problem have been solved in gitolite community. Discussion and working patch can be found here (I am using this patch in production successfully):
https://groups.google.com/forum/#!topic/gitolite/rkMMk8Xz3yI

Additionally i'd like to raise the question why is it necessary for salt to play a middleman and re-hash received keys manually into an "expected format". "Expected format" is implied by two end points: (1) user manually entering specific fingerprint (ie "expected formatted fingerprint") into their state/pillar. (2) ssh-keygen -l -f .. will generate fingerprint in own "expected format". These two strings (user provided, and ssh-keygen generated) could be compared verbatim without salt re-hashing them manually.
