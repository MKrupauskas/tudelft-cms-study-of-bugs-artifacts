### Description of Issue/Question

cp.push_dir gets confused when using upload_path and the source minion is Windows. You have this code in master.py, _file_recv function:

```
    # Normalize Windows paths
    normpath = load['path']
    if ':' in normpath:
        # make sure double backslashes are normalized
        normpath = normpath.replace('\\', '/')
        normpath = os.path.normpath(normpath)
```

The condition will not trigger when upload_path has been set (then the minion sends the relative path only). What happens on the master's side is you get a bunch of files in /var/cache/salt/master/minions/<id>/files containing backslashes in their names instead of a directory structure.

Moreover, as the sanity checks (such as looking for ../) are done before converting backslashes to slashes, this means that anyone smart enough can probably overwrite arbitrary files on the master. That normpath = os.path.normpath(normpath) doesn't seem to help much as it can produce a path starting with many '../' which then joined with the rest of components can become dangerous.
### Setup

Standard 2016.3.2 setup with uploads enabled.
### Steps to Reproduce Issue

Do any cp.push_dir from a Windows server with upload_path=whatever and see what happens.
### Versions Report

2016.3.2
