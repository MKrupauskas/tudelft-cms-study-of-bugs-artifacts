**Description**

Cloud operations that use WinRM need a minimum version to operate.  Ideally this would be enforced, and failure to meet that requirement would be logged appropriately.  At the moment, [any version is good enough](https://github.com/saltstack/salt/blob/da6819735ce055f16e326472cb1768faece72ad6/salt/utils/cloud.py#L83-L89), and it leads to a traceback that takes some effort to interpret.

We enforce `pywinrm==0.3.0` in the [CI cloud requirements](https://github.com/saltstack/salt/blob/da6819735ce055f16e326472cb1768faece72ad6/requirements/static/ci/py3.6/cloud.txt#L18), maybe that's a good cutoff.  (Edit: I do see this is documented at https://docs.saltstack.com/en/latest/topics/cloud/windows.html#self-signed-certificates-with-winrm ... if that's current, then maybe enforce those versions.)

**Setup**

```bash
pip3 install salt=3002.2 pywinrm==0.1.1
```

**Steps to Reproduce the behavior**

```text
$ ipython
Python 3.6.9 (default, Oct  8 2020, 12:12:24) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.16.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from salt.utils.cloud import wait_for_winrm

In [2]: wait_for_winrm('127.0.0.1', 5985, 'vagrant', 'vagrant')
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-2-d02e84c698b3> in <module>
----> 1 wait_for_winrm('127.0.0.1', 5985, 'vagrant', 'vagrant')

~/working/git/github/saltstack/salt-one/salt/utils/cloud.py in wait_for_winrm(host, port, username, password, timeout, use_ssl, verify)
   1048                 s.protocol.set_timeout(15)
   1049             log.trace("WinRM endpoint url: %s", s.url)
-> 1050             r = s.run_cmd("sc query winrm")
   1051             if r.status_code == 0:
   1052                 log.debug("WinRM session connected...")

~/.virtualenvs/zd6108/lib/python3.6/site-packages/winrm/__init__.py in run_cmd(self, command, args)
     27     def run_cmd(self, command, args=()):
     28         # TODO optimize perf. Do not call open/close shell every time
---> 29         shell_id = self.protocol.open_shell()
     30         command_id = self.protocol.run_command(shell_id, command, args)
     31         rs = Response(self.protocol.get_command_output(shell_id, command_id))

~/.virtualenvs/zd6108/lib/python3.6/site-packages/winrm/protocol.py in open_shell(self, i_stream, o_stream, working_directory, env_vars, noprofile, codepage, lifetime, idle_timeout)
    119                 env['rsp:Variable'] = {'@Name': key, '#text': value}
    120 
--> 121         rs = self.send_message(xmltodict.unparse(rq))
    122         # rs = xmltodict.parse(rs)
    123         # return rs['s:Envelope']['s:Body']['x:ResourceCreated']['a:ReferenceParameters']['w:SelectorSet']['w:Selector']['#text']  # NOQA

~/.virtualenvs/zd6108/lib/python3.6/site-packages/winrm/protocol.py in send_message(self, message)
    191         # TODO add message_id vs relates_to checking
    192         # TODO port error handling code
--> 193         return self.transport.send_message(message)
    194 
    195     def close_shell(self, shell_id):

~/.virtualenvs/zd6108/lib/python3.6/site-packages/winrm/transport.py in send_message(self, message)
    106             # install_opener is ignored in > 2.7.9 when an SSLContext is passed to urlopen, so
    107             # we'll have to call open manually with our stored opener chain
--> 108             response = self.opener.open(request, timeout=self.timeout)
    109             # Version 1.1 of WinRM adds the namespaces in the document instead
    110             # of the envelope so we have to

/usr/lib/python3.6/urllib/request.py in open(self, fullurl, data, timeout)
    522         for processor in self.process_request.get(protocol, []):
    523             meth = getattr(processor, meth_name)
--> 524             req = meth(req)
    525 
    526         response = self._open(req, data)

/usr/lib/python3.6/urllib/request.py in do_request_(self, request)
   1253                 msg = "POST data should be bytes, an iterable of bytes, " \
   1254                       "or a file object. It cannot be of type str."
-> 1255                 raise TypeError(msg)
   1256             if not request.has_header('Content-type'):
   1257                 request.add_unredirected_header(

TypeError: POST data should be bytes, an iterable of bytes, or a file object. It cannot be of type str.
```
(Include debug logs if possible and relevant)

**Expected behavior**

Clear error logs on a non-operable `pywinrm` version.

**Versions Report**
<details><summary>salt --versions-report</summary>

```text
Salt Version:
          Salt: 3002.2
 
Dependency Versions:
          cffi: 1.14.4
      cherrypy: Not Installed
      dateutil: Not Installed
     docker-py: Not Installed
         gitdb: Not Installed
     gitpython: Not Installed
        Jinja2: 2.11.2
       libgit2: Not Installed
      M2Crypto: Not Installed
          Mako: Not Installed
       msgpack: 1.0.1
  msgpack-pure: Not Installed
  mysql-python: Not Installed
     pycparser: 2.20
      pycrypto: Not Installed
  pycryptodome: 3.9.9
        pygit2: Not Installed
        Python: 3.6.9 (default, Oct  8 2020, 12:12:24)
  python-gnupg: Not Installed
        PyYAML: 5.3.1
         PyZMQ: 20.0.0
         smmap: Not Installed
       timelib: Not Installed
       Tornado: 4.5.3
           ZMQ: 4.3.3
 
System Versions:
          dist: ubuntu 18.04 bionic
        locale: UTF-8
       machine: x86_64
       release: 5.4.0-54-generic
        system: Linux
       version: Ubuntu 18.04 bionic
```
</details>

**Additional context**

ZD-6108.
