I'd like to clarify that this bug only seems to exist on platforms where the iptables "--check" arg is not used to verify the iptables rule existence, such as RedHat machines (in 2014.1.5 this also include Amazon Linux, which actually has "--check" available). I believe HEAD is broken similarly when "--check" is not available , but the _has_check logic is more extensive.

The iptables.check uses iptables.build to build the rule command. It then looks for the rule text returned by iptables.build in the iptables-save command output. The problem here is how to make sure that exactly the right text is generated by iptables.build. It turns out that this is not possible for certain iptables rules. Consider the following command:

<pre># salt-call iptables.build_rule table=nat chain=PREROUTING command=I position=1 destination=10.0.0.1 in-interface=bridge0 proto=tcp dport=25 jump=DNAT to-destination=127.0.0.1:25</pre>


which outputs:

<pre>local:
    -p tcp -m tcp --dport 25 --in-interface bridge0 --__pub_pid 26135 --destination 10.0.0.1 --jump DNAT --to-destination 127.0.0.1:25</pre>


There are two problems here. (1)What is __pub_pid doing in here? (2) The "destination" arg is just before the "jump". Let's compare to "iptables-save" for reference:

<pre># iptables-save 
...
-A PREROUTING -d 10.0.0.1/32 -i docker-bridge -p tcp -m tcp --dport 25 -j DNAT --to-destination 127.0.0.1:25
...</pre>


Here's a non-working check using a command built with iptables.build_rule that I've stripped the __pub_pid arg from:

<pre># salt-call iptables.check nat PREROUTING rule='-p tcp -m tcp --dport 25 --in-interface bridge0 --destination 10.0.0.1 --jump DNAT --to-destination 127.0.0.1:25'
...
local:
    False</pre>


I can make it work if I shuffle and fix the text (including added /32 on the dest address) for iptables.check to be the following:

<pre># salt-call iptables.check nat PREROUTING rule='-d 10.0.0.1/32 -i bridge0 -p tcp -m tcp --dport 25 -j DNAT --to-destination 127.0.0.1:25'
...
local:
    True</pre>
