When a new minion starts up I am getting the error "RSAError: data too large for modulus" and then "RSAError: oaep decoding error". Most of the time the minion starts and applies the state just fine, but maybe 1 out of every 10 machines fail with the error. I have pasted the log below.

These are new machines that startup from an image and on boot the /etc/salt/minion_id and /etc/salt/pki/ are deleted to force a new id and keys. All machines are identical, except for a different timestamp in the hostname, and run the same states. Also, if it helps I seem to run into this error more often when launching a group of machines at the same time. It just happened to me when I launched 5 machines, but the size varies. Salt master is open.

OS: Ubuntu Server 14.04.1
Minion version: 2014.1.10
Master version: 2014.1.10

```
[INFO    ] Generating keys: /etc/salt/pki/minion
[ERROR   ] An un-handled exception was caught by salt's global exception handler:
RSAError: data too large for modulus
Traceback (most recent call last):
  File "/usr/bin/salt-call", line 11, in <module>
    salt_call()
  File "/usr/lib/python2.7/dist-packages/salt/scripts.py", line 82, in salt_call
    client.run()
  File "/usr/lib/python2.7/dist-packages/salt/cli/__init__.py", line 309, in run
    caller = salt.cli.caller.Caller(self.config)
  File "/usr/lib/python2.7/dist-packages/salt/cli/caller.py", line 47, in __init__
    self.minion = salt.minion.SMinion(opts)
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 283, in __init__
    self.gen_modules()
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 295, in gen_modules
    self.opts['environment'],
  File "/usr/lib/python2.7/dist-packages/salt/pillar/__init__.py", line 73, in compile_pillar
    ret_pillar = self.sreq.crypted_transfer_decode_dictentry(load, dictkey='pillar', tries=3, timeout=7200)
  File "/usr/lib/python2.7/dist-packages/salt/transport/__init__.py", line 61, in crypted_transfer_decode_dictentry
    aes = key.private_decrypt(ret['key'], 4)
  File "/usr/lib/python2.7/dist-packages/M2Crypto/RSA.py", line 63, in private_decrypt
    return m2.rsa_private_decrypt(self.rsa, data, padding)
RSAError: data too large for modulus
Traceback (most recent call last):
  File "/usr/bin/salt-call", line 11, in <module>
    salt_call()
  File "/usr/lib/python2.7/dist-packages/salt/scripts.py", line 82, in salt_call
    client.run()
  File "/usr/lib/python2.7/dist-packages/salt/cli/__init__.py", line 309, in run
    caller = salt.cli.caller.Caller(self.config)
  File "/usr/lib/python2.7/dist-packages/salt/cli/caller.py", line 47, in __init__
    self.minion = salt.minion.SMinion(opts)
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 283, in __init__
    self.gen_modules()
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 295, in gen_modules
    self.opts['environment'],
  File "/usr/lib/python2.7/dist-packages/salt/pillar/__init__.py", line 73, in compile_pillar
    ret_pillar = self.sreq.crypted_transfer_decode_dictentry(load, dictkey='pillar', tries=3, timeout=7200)
  File "/usr/lib/python2.7/dist-packages/salt/transport/__init__.py", line 61, in crypted_transfer_decode_dictentry
    aes = key.private_decrypt(ret['key'], 4)
  File "/usr/lib/python2.7/dist-packages/M2Crypto/RSA.py", line 63, in private_decrypt
    return m2.rsa_private_decrypt(self.rsa, data, padding)
M2Crypto.RSA.RSAError: data too large for modulus
[ERROR   ] An un-handled exception was caught by salt's global exception handler:
RSAError: oaep decoding error
Traceback (most recent call last):
  File "/usr/bin/salt-call", line 11, in <module>
    salt_call()
  File "/usr/lib/python2.7/dist-packages/salt/scripts.py", line 82, in salt_call
    client.run()
  File "/usr/lib/python2.7/dist-packages/salt/cli/__init__.py", line 309, in run
    caller = salt.cli.caller.Caller(self.config)
  File "/usr/lib/python2.7/dist-packages/salt/cli/caller.py", line 47, in __init__
    self.minion = salt.minion.SMinion(opts)
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 283, in __init__
    self.gen_modules()
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 295, in gen_modules
    self.opts['environment'],
  File "/usr/lib/python2.7/dist-packages/salt/pillar/__init__.py", line 73, in compile_pillar
    ret_pillar = self.sreq.crypted_transfer_decode_dictentry(load, dictkey='pillar', tries=3, timeout=7200)
  File "/usr/lib/python2.7/dist-packages/salt/transport/__init__.py", line 61, in crypted_transfer_decode_dictentry
    aes = key.private_decrypt(ret['key'], 4)
  File "/usr/lib/python2.7/dist-packages/M2Crypto/RSA.py", line 63, in private_decrypt
    return m2.rsa_private_decrypt(self.rsa, data, padding)
RSAError: oaep decoding error
Traceback (most recent call last):
  File "/usr/bin/salt-call", line 11, in <module>
    salt_call()
  File "/usr/lib/python2.7/dist-packages/salt/scripts.py", line 82, in salt_call
    client.run()
  File "/usr/lib/python2.7/dist-packages/salt/cli/__init__.py", line 309, in run
    caller = salt.cli.caller.Caller(self.config)
  File "/usr/lib/python2.7/dist-packages/salt/cli/caller.py", line 47, in __init__
    self.minion = salt.minion.SMinion(opts)
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 283, in __init__
    self.gen_modules()
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 295, in gen_modules
    self.opts['environment'],
  File "/usr/lib/python2.7/dist-packages/salt/pillar/__init__.py", line 73, in compile_pillar
    ret_pillar = self.sreq.crypted_transfer_decode_dictentry(load, dictkey='pillar', tries=3, timeout=7200)
  File "/usr/lib/python2.7/dist-packages/salt/transport/__init__.py", line 61, in crypted_transfer_decode_dictentry
    aes = key.private_decrypt(ret['key'], 4)
  File "/usr/lib/python2.7/dist-packages/M2Crypto/RSA.py", line 63, in private_decrypt
    return m2.rsa_private_decrypt(self.rsa, data, padding)
M2Crypto.RSA.RSAError: oaep decoding error
```
