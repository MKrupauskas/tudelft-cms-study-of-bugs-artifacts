### Description of Issue/Question

Using supervisord as pid 1 in a docker container fill grains['init'] with "systemd" value

`
root@b9e49580d089:/# salt-call --local -l quiet grains.item init
local:
    ----------
    init:
        systemd`
### Setup

Use a Dockerfile as this

```
FROM ubuntu:trusty

RUN apt-get update \
 && apt-get install -y apt-transport-https ca-certificates curl supervisor

RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D \
 && curl -L https://repo.saltstack.com/apt/ubuntu/14.04/amd64/latest/SALTSTACK-GPG-KEY.pub | apt-key add -

CMD ["/usr/bin/supervisord","-c","/etc/supervisor/supervisord.conf"]
RUN mkdir -p /etc/supervisor
ADD dockerfiles/trusty/supervisord.conf /etc/supervisor/supervisord.conf
ADD tools/supervisord_minion.conf /etc/supervisor/conf.d/salt-minion.conf
RUN apt-get -y install \
 python-apt \
 python-git \
 python-pip \
 salt-minion \
 virt-what
```

Here is the supervisord.conf files
/etc/supervisor/supervisord.conf

```
[supervisord]
logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB       ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10          ; (num of main logfile rotation backups;default 10)
loglevel=info               ; (logging level;default info; others: debug,warn)
pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
nodaemon=true              ; (start in foreground if true;default false)
minfds=1024                 ; (min. avail startup file descriptors;default 1024)
minprocs=200                ; (min. avail process descriptors;default 200)

[unix_http_server]
file=/var/tmp/supervisor.sock
username=setup
password=setup

[supervisorctl]
serverurl=unix:///var/tmp/supervisor.sock ; use a unix:// URL  for a unix socket
username=setup
password=setup

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[include]
files = /etc/supervisor/conf.d/*.conf
```

 /etc/supervisor/conf.d/salt-minion.conf

```
[program:salt-minion]
command=/usr/bin/salt-minion -l debug
```

Then start the docker.
### Steps to Reproduce Issue

By extracting the relevant code in grains.core.py as following I can see that systemd comes out

```
import salt.utils
import os
import salt.ext.six as six
import salt.config
import salt.loader
__opts__ = salt.config.minion_config('/etc/salt/minion')

grains = {
    'num_gpus': 0,
    'gpus': [],
}


try:
    os.stat('/run/systemd/system')
    grains['init'] = 'systemd'
except (OSError, IOError):
    if os.path.exists('/proc/1/cmdline'):
        with salt.utils.fopen('/proc/1/cmdline') as fhr:
            init_cmdline = fhr.read().replace('\x00', ' ').split()
            init_bin = salt.utils.which(init_cmdline[0])
            if init_bin is not None:
                supported_inits = (six.b('upstart'), six.b('sysvinit'), six.b('systemd'))
                edge_len = max(len(x) for x in supported_inits) - 1
                try:
                    buf_size = __opts__['file_buffer_size']
                except KeyError:
                    # Default to the value of file_buffer_size for the minion
                    buf_size = 262144
                try:
                    with salt.utils.fopen(init_bin, 'rb') as fp_:
                        buf = True
                        edge = six.b('')
                        buf = fp_.read(buf_size).lower()
                        while buf:
                            buf = edge + buf
                            for item in supported_inits:
                                if item in buf:
                                    if six.PY3:
                                        item = item.decode('utf-8')
                                    grains['init'] = item
                                    buf = six.b('')
                                    break
                            edge = buf[-edge_len:]
                            buf = fp_.read(buf_size).lower()
                except (IOError, OSError) as exc:
                    log.error(
                        'Unable to read from init_bin ({0}): {1}'
                        .format(init_bin, exc)
                    )
            else:
                log.error(
                    'Could not determine init location from command line: ({0})'
                    .format(' '.join(init_cmdline))
                )
```

You can see that the condition "if item in buf:" is triggered with the result being systemd

/proc/1/cmdline looks like this :

```
root@b9e49580d089:/# cat /proc/1/cmdline 
/usr/bin/python/usr/bin/supervisord-c/etc/supervisor/supervisord.conf
```
### Versions Report

```
root@b9e49580d089:/# salt-call --local -l quiet --versions-report
Salt Version:
           Salt: 2016.3.3

Dependency Versions:
           cffi: Not Installed
       cherrypy: Not Installed
       dateutil: 1.5
          gitdb: 0.5.4
      gitpython: 0.3.2 RC1
          ioflo: Not Installed
         Jinja2: 2.7.2
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: Not Installed
           Mako: 0.9.1
   msgpack-pure: Not Installed
 msgpack-python: 0.4.6
   mysql-python: 1.2.3
      pycparser: Not Installed
       pycrypto: 2.6.1
         pygit2: Not Installed
         Python: 2.7.6 (default, Jun 22 2015, 17:58:13)
   python-gnupg: Not Installed
         PyYAML: 3.10
          PyZMQ: 14.0.1
           RAET: Not Installed
          smmap: 0.8.2
        timelib: Not Installed
        Tornado: 4.2.1
            ZMQ: 4.0.5

System Versions:
           dist: Ubuntu 14.04 trusty
        machine: x86_64
        release: 4.2.0-42-generic
         system: Linux
        version: Ubuntu 14.04 trusty
```
