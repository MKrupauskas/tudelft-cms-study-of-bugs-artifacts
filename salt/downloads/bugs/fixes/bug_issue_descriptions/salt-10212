(im new perhaps I misunderstand the basic)

Issue: if a minion is compromised an attacker could change grain data and this might make pillar data vulnerable.

To work around the issue, we can prefix role(s) on minion ID and select pillar data based on the ID.  This is a hack solution!

It would be nice if we could trust our grains!. 

possible solution: 

Have the master hash or store custom none standard grains of each minion.
If the master changes a grain, the master can rehash the grains.
Master verifies custom grains before running something like highstate.
If a minion changes grain, a user on the master can manually verify then have master accept

example:

```
MINION='matsalt01'
HASHER=md5sum

## hash grains
mkdir -p /etc/salt/pki/master/minions_grains
salt $MINION grains.items | $HASHER > /etc/salt/pki/master/minions_grains/$MINION

## times passes. Minion got hacked and smart hacker changed grains 
## to try and get access to other server roles or passwords protected by pillar grain matching

## ensure minion grains unchanged
HASH_KEY=`cat /etc/salt/pki/master/minions_grains/$MINION`
HASH=`salt $MINION grains.items | $HASHER`
if [ "$HASH_KEY" = "$HASH" ] ; then echo 'ALLOW HIGH STATE' ; fi
```

It might be good to built into salt.
