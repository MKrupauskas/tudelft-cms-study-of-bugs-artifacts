Right now we save the load in two places: once during the publish (inside of the `publish` function), and once inside of the `_return` function. This means we try to save the load again for each minion return. This is far from ideal from a performance standpoint, and also causes problems with some returners (such as mysql).

The reason we `save_load` on returns is in case of `salt-call`-initiated jobs on the minion, or jobs initiated from a lower-level master in a syndic setup.

For the former, we should be able to see from the return that it was salt-call-initiated (no jid) and save the load only then. For the latter, we're going to have to get more creative -- perhaps another syndic-specific event for saving the load?
