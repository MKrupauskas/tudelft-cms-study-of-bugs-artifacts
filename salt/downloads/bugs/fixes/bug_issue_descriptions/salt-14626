If i try to use the file.append function it will fail if the string i want to append contains an equal sign.

```
# salt '*' file.append /tmp/testfile foo=bar
TypeError encountered executing file.append: append() got an unexpected keyword argument 'foo'. See debug log for more info.  Possibly a missing arguments issue:  ArgSpec(args=['path'], varargs='args', keywords=None, defaults=None)
```

Quoting will produce the same Error message as above:

```
# salt '*' file.append /tmp/testfile "foo=bar"
TypeError encountered executing file.append: append() got an unexpected keyword argument 'foo'. See debug log for more info.  Possibly a missing arguments issue:  ArgSpec(args=['path'], varargs='args', keywords=None, defaults=None)

# salt '*' file.append /tmp/testfile 'foo=bar'
TypeError encountered executing file.append: append() got an unexpected keyword argument 'foo'. See debug log for more info.  Possibly a missing arguments issue:  ArgSpec(args=['path'], varargs='args', keywords=None, defaults=None)

# salt '*' file.append /tmp/testfile '"foo=bar"'
TypeError encountered executing file.append: append() got an unexpected keyword argument 'foo'. See debug log for more info.  Possibly a missing arguments issue:  ArgSpec(args=['path'], varargs='args', keywords=None, defaults=None)
```

It does however work if whitespace is surrounding the equal sign:

```
# salt '*' file.append /tmp/testfile 'foo = bar'
minion01:
    Wrote 1 lines to "/tmp/testfile"
```

But in my case i do not want any whitespace, I do have a workaround:

```
# salt '*' cmd.run 'echo foo=bar >> /tmp/testfile'
```

But i guess this is something that file.append should be able to do by itself.
