#8402

Seeing this on new autoscale members authenticating to a syndic in open mode:

```
gpg: keyring `/tmp/tmparz6s6d1/secring.gpg' created
gpg: keyring `/tmp/tmparz6s6d1/pubring.gpg' created
gpg: requesting key 0E27C0A6 from hkp server keyserver.ubuntu.com
gpg: /tmp/tmparz6s6d1/trustdb.gpg: trustdb created
gpg: key 0E27C0A6: public key "Launchpad PPA for Salt Stack" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
OK
Reading package lists...
Building dependency tree...
Reading state information...
salt-minion is already the newest version.
0 upgraded, 0 newly installed, 0 to remove and 19 not upgraded.
[INFO    ] Generating keys: /etc/salt/pki/minion
[ERROR   ] An un-handled exception was caught by salt's global exception handler:
RSAError: oaep decoding error
Traceback (most recent call last):
  File "/usr/bin/salt-call", line 11, in <module>
    salt_call()
  File "/usr/lib/python2.7/dist-packages/salt/scripts.py", line 82, in salt_call
    client.run()
  File "/usr/lib/python2.7/dist-packages/salt/cli/__init__.py", line 309, in run
    caller = salt.cli.caller.Caller(self.config)
  File "/usr/lib/python2.7/dist-packages/salt/cli/caller.py", line 47, in __init__
    self.minion = salt.minion.SMinion(opts)
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 283, in __init__
    self.gen_modules()
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 295, in gen_modules
    self.opts['environment'],
  File "/usr/lib/python2.7/dist-packages/salt/pillar/__init__.py", line 73, in compile_pillar
    ret_pillar = self.sreq.crypted_transfer_decode_dictentry(load, dictkey='pillar', tries=3, timeout=7200)
  File "/usr/lib/python2.7/dist-packages/salt/transport/__init__.py", line 61, in crypted_transfer_decode_dictentry
    aes = key.private_decrypt(ret['key'], 4)
  File "/usr/lib/python2.7/dist-packages/M2Crypto/RSA.py", line 63, in private_decrypt
    return m2.rsa_private_decrypt(self.rsa, data, padding)
RSAError: oaep decoding error
Traceback (most recent call last):
  File "/usr/bin/salt-call", line 11, in <module>
    salt_call()
  File "/usr/lib/python2.7/dist-packages/salt/scripts.py", line 82, in salt_call
    client.run()
  File "/usr/lib/python2.7/dist-packages/salt/cli/__init__.py", line 309, in run
    caller = salt.cli.caller.Caller(self.config)
  File "/usr/lib/python2.7/dist-packages/salt/cli/caller.py", line 47, in __init__
    self.minion = salt.minion.SMinion(opts)
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 283, in __init__
    self.gen_modules()
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 295, in gen_modules
    self.opts['environment'],
  File "/usr/lib/python2.7/dist-packages/salt/pillar/__init__.py", line 73, in compile_pillar
    ret_pillar = self.sreq.crypted_transfer_decode_dictentry(load, dictkey='pillar', tries=3, timeout=7200)
  File "/usr/lib/python2.7/dist-packages/salt/transport/__init__.py", line 61, in crypted_transfer_decode_dictentry
    aes = key.private_decrypt(ret['key'], 4)
  File "/usr/lib/python2.7/dist-packages/M2Crypto/RSA.py", line 63, in private_decrypt
    return m2.rsa_private_decrypt(self.rsa, data, padding)
M2Crypto.RSA.RSAError: oaep decoding error
[ERROR   ] An un-handled exception was caught by salt's global exception handler:
RSAError: oaep decoding error
Traceback (most recent call last):
  File "/usr/bin/salt-call", line 11, in <module>
    salt_call()
  File "/usr/lib/python2.7/dist-packages/salt/scripts.py", line 82, in salt_call
    client.run()
  File "/usr/lib/python2.7/dist-packages/salt/cli/__init__.py", line 309, in run
    caller = salt.cli.caller.Caller(self.config)
  File "/usr/lib/python2.7/dist-packages/salt/cli/caller.py", line 47, in __init__
    self.minion = salt.minion.SMinion(opts)
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 283, in __init__
    self.gen_modules()
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 295, in gen_modules
    self.opts['environment'],
  File "/usr/lib/python2.7/dist-packages/salt/pillar/__init__.py", line 73, in compile_pillar
    ret_pillar = self.sreq.crypted_transfer_decode_dictentry(load, dictkey='pillar', tries=3, timeout=7200)
  File "/usr/lib/python2.7/dist-packages/salt/transport/__init__.py", line 61, in crypted_transfer_decode_dictentry
    aes = key.private_decrypt(ret['key'], 4)
  File "/usr/lib/python2.7/dist-packages/M2Crypto/RSA.py", line 63, in private_decrypt
    return m2.rsa_private_decrypt(self.rsa, data, padding)
RSAError: oaep decoding error
Traceback (most recent call last):
  File "/usr/bin/salt-call", line 11, in <module>
    salt_call()
  File "/usr/lib/python2.7/dist-packages/salt/scripts.py", line 82, in salt_call
    client.run()
  File "/usr/lib/python2.7/dist-packages/salt/cli/__init__.py", line 309, in run
    caller = salt.cli.caller.Caller(self.config)
  File "/usr/lib/python2.7/dist-packages/salt/cli/caller.py", line 47, in __init__
    self.minion = salt.minion.SMinion(opts)
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 283, in __init__
    self.gen_modules()
  File "/usr/lib/python2.7/dist-packages/salt/minion.py", line 295, in gen_modules
    self.opts['environment'],
  File "/usr/lib/python2.7/dist-packages/salt/pillar/__init__.py", line 73, in compile_pillar
    ret_pillar = self.sreq.crypted_transfer_decode_dictentry(load, dictkey='pillar', tries=3, timeout=7200)
  File "/usr/lib/python2.7/dist-packages/salt/transport/__init__.py", line 61, in crypted_transfer_decode_dictentry
    aes = key.private_decrypt(ret['key'], 4)
  File "/usr/lib/python2.7/dist-packages/M2Crypto/RSA.py", line 63, in private_decrypt
    return m2.rsa_private_decrypt(self.rsa, data, padding)
```

```
ubuntu@production-media-api-082214213501:~$ sudo dpkg -l | grep salt
sudo: unable to resolve host production-media-api-082214213501
ii  salt-common                          2014.1.10+ds-1trusty1                 all          shared libraries that salt requires for all packages
ii  salt-minion                          2014.1.10+ds-1trusty1                 all          client package for salt, the distributed remote execution system
```

```
ubuntu@production-blahblahblah:~$ dpkg -l | grep salt
ii  salt-common                          2014.1.10+ds-1trusty1                 all          shared libraries that salt requires for all packages
ii  salt-minion                          2014.1.10+ds-1trusty1                 all          client package for salt, the distributed remote execution system
```

cloud-init looks like so:

```
#!/usr/bin/env bash
# Setup Hostname
APP=blah
ENV=production
DATE=`date +"%m%d%y%H%M%S"`
echo "$ENV-$APP-$DATE" > /etc/hostname
/bin/hostname `/bin/cat /etc/hostname`
# Install saltstack
export DEBIAN_FRONTEND=noninteractive
add-apt-repository ppa:saltstack/salt -y >> /var/log/autoscale-init.log 2>&1
apt-get update
apt-get install salt-minion -y >> /var/log/autoscale-init.log 2>&1

# In case salt was already installed be sure to delete the id and keys
# to force salt to regen on start
rm -f /etc/salt/minion_id
rm -rf /etc/salt/pki/

# Set salt master location and start minion
echo "master: ourmaster.ourdomain.com
grains:
  roles:
    - blah
  app:
    - blah
  env:
    - production
mine_functions:
  network.interfaces: []
  grains.item:
    - app
    - roles
    - env
    - fqdn
 "> /etc/salt/minion
/usr/sbin/service salt-minion stop
sleep 2
/usr/sbin/service salt-minion start
/usr/sbin/service salt-master stop
/usr/sbin/update-rc.d -f salt-master remove
/usr/bin/salt-call state.highstate >> /var/log/autoscale-init.log 2>&1
if [ $? -ne 0 ]; then
  sleep 10
  /usr/bin/salt-call state.highstate >> /var/log/autoscale-init.log 2>&1
fi
```
