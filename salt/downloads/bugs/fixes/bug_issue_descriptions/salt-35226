### Description of Issue/Question

When an invalid require tag is set, there are no safety check in the code and an exception will be raised instead of showing a nice explanation of what is going on. It makes it really difficult to diagnose what's wrong with the SLS file.
### Setup

Example SLS :

```
{% set pil = pillar['git'] %}

git:
  pkg.installed:
    - require:
      - file: {{ pil }}
```

The following exception will be raised :

```
    The minion function caused an exception: Traceback (most recent call last):
      File "/usr/lib/python2.6/site-packages/salt/minion.py", line 1320, in _thread_return
        return_data = executor.execute()
      File "/usr/lib/python2.6/site-packages/salt/executors/direct_call.py", line 28, in execute
        return self.func(*self.args, **self.kwargs)
      File "/usr/lib/python2.6/site-packages/salt/modules/state.py", line 722, in highstate
        whitelist=kwargs.get('whitelist')
      File "/usr/lib/python2.6/site-packages/salt/state.py", line 3271, in call_highstate
        os.umask(cumask)
      File "/usr/lib/python2.6/site-packages/salt/state.py", line 2276, in call_high
        return errors
      File "/usr/lib/python2.6/site-packages/salt/state.py", line 1799, in call_chunks
        running = self.call_chunk(low, running, chunks)
      File "/usr/lib/python2.6/site-packages/salt/state.py", line 2066, in call_chunk
        return running
      File "/usr/lib/python2.6/site-packages/salt/state.py", line 1982, in call_chunk
        requisites.append('prerequired')
      File "/usr/lib/python2.6/site-packages/salt/state.py", line 1868, in check_requisite
        if (fnmatch.fnmatch(chunk['name'], req_val) or
      File "/usr/lib64/python2.6/fnmatch.py", line 43, in fnmatch
        return fnmatchcase(name, pat)
      File "/usr/lib64/python2.6/fnmatch.py", line 75, in fnmatchcase
        res = translate(pat)
      File "/usr/lib64/python2.6/fnmatch.py", line 90, in translate
        c = pat[i]
    KeyError: 0
```

The line **1868** in **/usr/lib/python2.6/site-packages/salt/state.py** tries to compare two strings. In this case, a dictionary will be passed instead of a string. When the **fnmatch** method will try to match the values, it will access `req_val[0]`, which is not a valid key for the dictionary.
### Steps to Reproduce Issue

Write an invalid SLS with a require on a dictionary.
### Versions Report

Salt Version:
           Salt: 2016.3.2

Dependency Versions:
           cffi: Not Installed
       cherrypy: 3.2.2
       dateutil: 1.4.1
          gitdb: Not Installed
      gitpython: Not Installed
          ioflo: Not Installed
         Jinja2: 2.2.1
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: 0.20.2
           Mako: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.4.6
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
         pygit2: Not Installed
         Python: 2.6.6 (r266:84292, May 22 2015, 08:34:51)
   python-gnupg: Not Installed
         PyYAML: 3.10
          PyZMQ: 14.5.0
           RAET: Not Installed
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.2.1
            ZMQ: 4.0.5

System Versions:
           dist: redhat 6.7 Santiago
        machine: x86_64
        release: 2.6.32-573.22.1.el6.x86_64
         system: Linux
        version: Red Hat Enterprise Linux Server 6.7 Santiago
