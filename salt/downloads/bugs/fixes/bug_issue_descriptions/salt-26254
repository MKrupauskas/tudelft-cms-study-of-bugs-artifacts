Tested versions, with same behaviours:
- 2015.5.3 (debian package)
- git v2015.5.3
- git v2015.8.0rc3
- git develop (commit: eca42b1 from Wed Aug 12 09:20:54 2015 -0600)

Testing with just test.version as command, the batch mode seems to "miss" some results.

Since some time (was not in 2014.7, but is present in 2015.5), batch mode tends to relaunch the missing amount of minions when a few sent their results. That's nice to not wait for _everyone_ to finish before launching the next ones, but unfortunately, it fails to get all results, making it much harder to use.

Calling it directly gives a fast answer right away:

```
# time salt '*' test.version
minion00:
    2015.8.0rc3
minion01:
    2015.8.0rc3
minion07:
    2015.8.0rc3
minion05:
    2015.8.0rc3
minion08:
    2015.8.0rc3
minion02:
    2015.8.0rc3
minion06:
    2015.8.0rc3
minion09:
    2015.8.0rc3
minion03:
    2015.8.0rc3
minion04:
    2015.8.0rc3

real    0m2.626s
user    0m0.140s
sys     0m0.128s
```

But calling it in batch mode can lead to missing answers:

```
# time salt -b 3 --out=yaml --out-file=/tmp/versions '*' test.version

Executing run on ['minion09', 'minion08', 'minion01']


Executing run on ['minion00', 'minion03']


Executing run on ['minion02']


Executing run on ['minion05']


Executing run on ['minion04']


Executing run on ['minion07']


Executing run on ['minion06']


real    0m22.795s
user    0m0.272s
sys     0m0.156s
```

With output file:

```
minion08: 2015.8.0rc3
retcode: 0
minion01: 2015.8.0rc3
retcode: 0
minion09: 2015.8.0rc3
retcode: 0
minion03: 2015.8.0rc3
retcode: 0
minion00: 2015.8.0rc3
retcode: 0
minion02: {}
minion05: {}
minion04: {}
minion07: {}
minion06: {}
```

Some minions with "missed" result gives an empty dict, rather than having a retcode and the version.

Checking jobs, they did get reply pretty fast, but were ignored.

Easily reproduced with a small amount of minions, just need to batch with more than 1, and less then all. Might need to run it multiple time to have the buggy behaviour.
