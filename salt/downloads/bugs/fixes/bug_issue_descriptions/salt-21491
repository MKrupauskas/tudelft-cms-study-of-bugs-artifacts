Currently, the `composer.installed` state always returns `True` with no changes, when the file `composer.lock` is present ([1], line 114ff.). The basic assumption is probably that the lock file is created by the `composer install` command, and that its presence is an indicator that `composer install` does not need to be run again.

This directly contradicts the suggested composer workflow to **check the `composer.lock` into version control**. See [2] for reference:

> Commit your application's composer.lock (along with composer.json) into version control.
> 
> This is important because the install command checks if a lock file is present, and if it is, it downloads the versions specified there (regardless of what composer.json says).
> 
> This means that anyone who sets up the project will download the exact same version of the dependencies. Your CI server, production machines, other developers in your team, everything and everyone runs on the same dependencies

So a very typical workflow of deploying a PHP application might consist of cloning an application from git (including a `composer.lock` file) and then running `composer install` on this very lock file to install the _exact dependency versions_ from that lock file.

This means that the presence of a `composer.lock` file is **no reason at all** to not execute a `composer install` command (on the contrary, since many deployment workflows _rely_ on this).

Would you be willing to accept a pull request to change this behaviour (if required, triggered by an optional parameter for backwards compatibility)?

[1] https://github.com/saltstack/salt/blob/develop/salt/states/composer.py
[2] https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file
