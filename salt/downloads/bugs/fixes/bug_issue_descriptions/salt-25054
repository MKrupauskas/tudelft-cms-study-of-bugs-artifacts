Testing Environment:
OS: Windows 8.1
Running the latest development branch on Windows 8.1. Here's the versions report:

```
Salt Version:
               Salt: 2015.5.0-1662-g1c4030b

    Dependency Versions:
             Jinja2: 2.7.3
           M2Crypto: Not Installed
               Mako: Not Installed
             PyYAML: 3.11
              PyZMQ: 14.6.0
             Python: 2.7.8 (default, Jun 30 2014, 16:08:48) [MSC v.1500 64 bit (AMD64)]
               RAET: Not Installed
            Tornado: 4.2
                ZMQ: 4.0.5
              ioflo: Not Installed
            libnacl: Not Installed
       msgpack-pure: Not Installed
     msgpack-python: 0.4.6
           pycrypto: 2.6.1

    System Versions:
               dist:
            machine: AMD64
            release: 8
             system: 8 6.2.9200  Multiprocessor Free
```

To recreate:
Run the following state file to create a text file on the minion:

```
my_file:
  file.managed:
   - name: c:\stuff1.txt
   - contents: 'hello and a few other things world'
```

Then run the following state file to comment out a line in the file.

```
comment:
  file.comment:
    - name: c:\stuff1.txt
    - regex: '^hello'
    - char: '#'
```

Result:

```
    Passed invalid arguments: string indices must be integers, not str

        Execute a set list of state files from an environment.

        test
            Notify states to execute in test-only (dry-run) mode.

            Sets the ``test`` variable in the minion ``opts`` for the duration of
            the state run.
        pillar
            Custom Pillar data can be passed with the ``pillar`` kwarg. Values
            passed here will override hard-coded Pillar values.
        queue : ``False``
            Instead of failing immediately when another state run is in progress,
            queue the new state run to begin running once the other has finished.

            This option starts a new thread for each queued state run so use this
            option sparingly.
        saltenv : None
            Specify a ``file_roots`` environment.

            .. versionchanged:: 0.17.0
                Argument name changed from ``env`` to ``saltenv``.
            .. versionchanged:: 2014.7
                Defaults to None. If no saltenv is specified, the minion config will
                be checked for a saltenv and if found, it will be used. If none is found,
                base will be used.
        pillarenv : None
            Specify a ``pillar_roots`` environment. By default all pillar environments
            merged together will be used.
        concurrent:
            WARNING: This flag is potentially dangerous. It is designed
            for use when multiple state runs can safely be run at the same
            Do not use this flag for performance optimization.
        localconfig:
            Instead of using running minion opts, load ``localconfig`` and merge that
            with the running minion opts. This functionality is intended for using
            "roots" of salt directories (with their own minion config, pillars,
            file_roots) to run highstate out of.

        CLI Example:

        .. code-block:: bash

            salt '*' state.sls core,edit.vim dev
            salt '*' state.sls core exclude="[{'id': 'id_to_exclude'}, {'sls': 'sls_to_exclude'}]"

            salt '*' state.sls myslsfile pillar="{foo: 'Foo!', bar: 'Bar!'}"
```
