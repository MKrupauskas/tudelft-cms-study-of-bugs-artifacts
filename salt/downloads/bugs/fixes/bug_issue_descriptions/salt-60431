**Description**

If you pass an empty non-dict datatype to defaults.merge (defaults.update), you get the following stracktrace

```
local:
    Data failed to compile:
----------
    Rendering SLS 'base:monitoring.bug' failed: Jinja error: Cannot update using non-dict types in dictupdate.update()
Traceback (most recent call last):
  File "/usr/lib/python3.6/site-packages/salt/utils/templates.py", line 501, in render_jinja_tmpl
    output = template.render(**decoded_context)
  File "/usr/lib/python3.6/site-packages/jinja2/environment.py", line 1090, in render
    self.environment.handle_exception()
  File "/usr/lib/python3.6/site-packages/jinja2/environment.py", line 832, in handle_exception
    reraise(*rewrite_traceback_stack(source=source))
  File "/usr/lib/python3.6/site-packages/jinja2/_compat.py", line 28, in reraise
    raise value.with_traceback(tb)
  File "<template>", line 15, in top-level template code
  File "/usr/lib/python3.6/site-packages/jinja2/sandbox.py", line 462, in call
    return __context.call(__obj, *args, **kwargs)
  File "/usr/lib/python3.6/site-packages/salt/modules/defaults.py", line 134, in merge
    return dictupdate.update(merged, src, merge_lists=merge_lists)
  File "/usr/lib/python3.6/site-packages/salt/utils/dictupdate.py", line 45, in update
    raise TypeError("Cannot update using non-dict types in dictupdate.update()")
TypeError: Cannot update using non-dict types in dictupdate.update()
```

**Setup**

Copy/paste the following into your ssh session on your master...

<details><summary>1. create state file and reset grains</summary>

```cat <<EOF > /srv/salt/example.sls
{% load_yaml as conf %}
default:
  loglevel:  error  (default)

role:
  db:
    loglevel: info (from role)

stage:
  dev:
    loglevel: debug (from stage)
{% endload %}

# Get the values...
{% set val_role  = salt.grains.filter_by(conf.role,    grain='role') %}
{% set val_stage = salt.grains.filter_by(conf.stage, grain='stage') %}

# Merge them...
{% set vals = salt.defaults.merge(conf.default, val_role) %}
{% set vals = salt.defaults.merge(vals,         val_stage) %}

Demonstrate Loglevel configuration:
  test.show_notification:
    - text: |
        stage: {{ salt.grains.get('stage', 'NOT SET') }}
        role:  {{ salt.grains.get('role', 'NOT SET') }}
        vals:
          loglevel: {{ vals.loglevel }}
EOF

salt-call grains.delkey role
salt-call grains.delkey stage
```
</details>

2. Ensure that the "role" and "stage" grains aren't set

```
# salt-call grains.delkey role
# salt-call grains.delkey stage
```



**Steps to Reproduce the behavior**

<details><summary>1. Run it (salt-call state.apply example) and get a big, ugly stacktrace</summary>

```
local:
    Data failed to compile:
----------
    Rendering SLS 'base:monitoring.bug' failed: Jinja error: Cannot update using non-dict types in dictupdate.update()
Traceback (most recent call last):
  File "/usr/lib/python3.6/site-packages/salt/utils/templates.py", line 501, in render_jinja_tmpl
    output = template.render(**decoded_context)tage, grain='stage') %}
  File "/usr/lib/python3.6/site-packages/jinja2/environment.py", line 1090, in render
    self.environment.handle_exception()
  File "/usr/lib/python3.6/site-packages/jinja2/environment.py", line 832, in handle_exception
    reraise(*rewrite_traceback_stack(source=source))stage) %}
  File "/usr/lib/python3.6/site-packages/jinja2/_compat.py", line 28, in reraise
    raise value.with_traceback(tb):
  File "<template>", line 21, in top-level template code
  File "/usr/lib/python3.6/site-packages/jinja2/sandbox.py", line 462, in call
    return __context.call(__obj, *args, **kwargs)
  File "/usr/lib/python3.6/site-packages/salt/modules/defaults.py", line 134, in merge
    return dictupdate.update(merged, src, merge_lists=merge_lists)
  File "/usr/lib/python3.6/site-packages/salt/utils/dictupdate.py", line 45, in update
    raise TypeError("Cannot update using non-dict types in dictupdate.update()")
TypeError: Cannot update using non-dict types in dictupdate.update()

; line 21

---
[...]
# Get the values...
{% set val_role  = salt.grains.filter_by(conf.role,    grain='role') %}
{% set val_stage = salt.grains.filter_by(conf.stage, grain='stage') %}

# Merge them...
{% set vals = salt.defaults.merge(conf.default, val_role) %}    <======================
{% set vals = salt.defaults.merge(vals,         val_stage) %}

Demonstrate Loglevel configuration:
  test.show_notification:
    - text: |
[...]
---
```
</details>

2. Obviously, if you set the grains....
```
salt-call grains.set role db
salt-call grains.set stage dev
```


<details><summary>3. And then run it (salt-call state.apply example), it works</summary>

```
local:
----------
          ID: Demonstrate Loglevel configuration
    Function: test.show_notification
      Result: True
     Comment: stage: dev
              role:  db
              vals:
                loglevel: debug (from stage)
     Started: 23:42:22.633862
    Duration: 1.346 ms
     Changes:

Summary for local
------------
Succeeded: 1
Failed:    0
------------
Total states run:     1
Total run time:   1.346 ms
```
</details>

**Expected behavior**

I can understand that defaults.update() wants a dict for both datasets, but if it's passed an empty dict or NoneType it should simply return the remaining dataset that is a dict.  If both input datasets are empty/None then it should just return an empty dict.

Note: My one concern about the above set of empty/None values is that if you just use a "not" comparison (as is the pythonic way), the values for bool:False, str:'' (empty string), list:[ ], tuple:( ) will also be implicitly included in this request.  I think that these values *should* raise the exception because they are, explicitly, a non-dict type and just letting them through would be a side-effect (and side-effects inevitably lead to 2am debugging sessions for some poor sod later on down the road)

What I'm not clear on is what is being passed to the renderer when when a salt.grains.filter_by() returns an empty dataset.  I'm guessing that it's probably a NoneType, but perhaps it's an empty string (I doubt it, but I haven't looked)?

Ideally it's a NoneType and the fix is simple - test for `isinstance(NoneType) or isinstance(dict) and not param`

Anyways... There are a couple of workarounds for this , like supplying a "defaults" key under each subsection and then passing that key as the default return for filter_by().  Or, if you don't want to pollute your data with a bunch of defaults, you can do this:

```
{% set vals = salt.defaults.merge(conf.default, val_role if val_role else { }) %}
{% set vals = salt.defaults.merge(conf.default, val_stage if val_stage else {} ) %}
```

But it's just messy and it complicates the jinja and makes it harder to read... and jinja is already visually displeasing enough.

**Versions Report**
<details><summary>salt --versions-report</summary>
(Provided by running salt --versions-report. Please also mention any differences in master/minion versions.) 

```
Salt Version:
          Salt: 3002.6

Dependency Versions:
          cffi: 1.9.1
      cherrypy: 5.6.0
      dateutil: 2.8.1
     docker-py: Not Installed
         gitdb: 0.6.4
     gitpython: 1.0.1
        Jinja2: 2.11.1
       libgit2: Not Installed
      M2Crypto: 0.35.2
          Mako: Not Installed
       msgpack: 0.6.2
  msgpack-pure: Not Installed
  mysql-python: Not Installed
     pycparser: 2.14
      pycrypto: Not Installed
  pycryptodome: 3.10.1
        pygit2: Not Installed
        Python: 3.6.8 (default, Nov 16 2020, 16:55:22)
  python-gnupg: Not Installed
        PyYAML: 3.13
         PyZMQ: 17.0.0
         smmap: 0.9.0
       timelib: Not Installed
       Tornado: 4.5.3
           ZMQ: 4.1.4

System Versions:
          dist: centos 7 Core
        locale: UTF-8
       machine: x86_64
       release: 3.10.0-957.1.3.el7.x86_64
        system: Linux
       version: CentOS Linux 7 Core
```
</details>

**Additional context**
Add any other context about the problem here.
