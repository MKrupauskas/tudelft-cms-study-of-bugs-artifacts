**Description**
State salt.states.file.directory applies "This folder and subfolders" instead of "This folder only"

**Setup**
(Please provide relevant configs and/or SLS files (be sure to remove sensitive info).
Windows Server 2019
Fresh installed salt-minion from https://repo.saltstack.com/windows/Salt-Minion-3003-Py3-AMD64-Setup.exe with default config. 

test.sls file with content:
```yaml
test_dir:
    file.directory:
    - name: 'C:\test'
    - makedirs: True
    - win_owner: Administrators
    - win_perms_reset: yes
    - win_inheritance: false
    - win_perms:
        testuser:
          perms:
            - read_attributes
            - create_folders
          applies_to: this_folder_only
```

**Steps to Reproduce the behavior**
Put test.sls in c:\tmp and apply
`salt-call --local --file-root=c:\tmp --log-level=debug state.apply test`

Folder `c:\test` created with correct permissions and propagation "This folder and subfolders"

Log
<pre>
[DEBUG   ] Reading configuration from c:\salt\conf\minion
[DEBUG   ] Using cached minion ID from c:\salt\conf\minion_id: hostname
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Override  __grains__: <module 'salt.loaded.int.log_handlers.sentry_mod' from 'c:\\salt\\bin\\lib\\site-packages\\salt-3003-py3.7.egg\\salt\\log\\handlers\\sentry_mod.py'>
[DEBUG   ] Configuration file path: c:\salt\conf\minion
[WARNING ] Insecure logging configuration detected! Sensitive data may be logged.
[DEBUG   ] Grains refresh requested. Refreshing grains.
[DEBUG   ] Reading configuration from c:\salt\conf\minion
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Override  __utils__: <module 'salt.loaded.int.grains.zfs' from 'c:\\salt\\bin\\lib\\site-packages\\salt-3003-py3.7.egg\\salt\\grains\\zfs.py'>
[DEBUG   ] Determining pillar cache
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] LazyLoaded state.apply
[DEBUG   ] LazyLoaded direct_call.execute
[DEBUG   ] LazyLoaded saltutil.is_running
[DEBUG   ] Override  __grains__: <module 'salt.loaded.int.module.grains' from 'c:\\salt\\bin\\lib\\site-packages\\salt-3003-py3.7.egg\\salt\\modules\\grains.py'>
[DEBUG   ] LazyLoaded grains.get
[DEBUG   ] LazyLoaded config.get
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] LazyLoaded roots.envs
[DEBUG   ] Could not LazyLoad roots.init: 'roots.init' is not available.
[DEBUG   ] Updating roots fileserver cache
[DEBUG   ] Gathering pillar data for state run
[DEBUG   ] Determining pillar cache
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Finished gathering pillar data for state run
[INFO    ] Loading fresh modules for state activity
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] In saltenv 'base', looking at rel_path 'test.sls' to resolve 'salt://test.sls'
[DEBUG   ] In saltenv 'base', ** considering ** path 'c:\salt\var\cache\salt\minion\files\base\test.sls' to resolve 'salt://test.sls'
[DEBUG   ] compile template: c:\salt\var\cache\salt\minion\files\base\test.sls
[DEBUG   ] Jinja search path: ['c:\\salt\\var\\cache\\salt\\minion\\files\\base']
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] LazyLoaded roots.envs
[DEBUG   ] Could not LazyLoad roots.init: 'roots.init' is not available.
[PROFILE ] Time (in seconds) to render 'c:\salt\var\cache\salt\minion\files\base\test.sls' using 'jinja' renderer: 0.03125166893005371
[DEBUG   ] Rendered data from file: c:\salt\var\cache\salt\minion\files\base\test.sls:
test_dir:
    file.directory:
    - name: 'C:\test'
    - makedirs: True
    - win_owner: Administrators
    - win_perms_reset: yes
    - win_inheritance: false
    - win_perms:
        testuser:
          perms:
            - read_attributes
            - create_folders
          applies_to: this_folder_only
[DEBUG   ] Results of YAML rendering:
OrderedDict([('test_dir', OrderedDict([('file.directory', [OrderedDict([('name', 'C:\\test')]), OrderedDict([('makedirs', True)]), OrderedDict([('win_owner', 'Administrators')]), OrderedDict([('win_perms_reset', True)]), OrderedDict([('win_inheritance', False)]), OrderedDict([('win_perms', OrderedDict([('testuser', OrderedDict([('perms', ['read_attributes', 'create_folders']), ('applies_to', 'this_folder_only')]))]))])])]))])
[PROFILE ] Time (in seconds) to render 'c:\salt\var\cache\salt\minion\files\base\test.sls' using 'yaml' renderer: 0.0
[DEBUG   ] LazyLoaded config.option
[DEBUG   ] LazyLoaded file.directory
[INFO    ] Running state [C:\test] at time 09:36:13.429997
[INFO    ] Executing state file.directory for [C:\test]
[DEBUG   ] LazyLoaded file.mkdir
[DEBUG   ] LazyLoaded dacl.set_owner
[INFO    ] {'C:\\test': {'directory': 'new'}}
[INFO    ] Completed state [C:\test] at time 09:36:13.476878 (duration_in_ms=46.881)
[DEBUG   ] File c:\salt\var\cache\salt\minion\accumulator\2991130033672 does not exist, no need to cleanup
[DEBUG   ] LazyLoaded cmd.run
[INFO    ] Executing command attrib in directory 'C:\Users\User'
[DEBUG   ] output:
[DEBUG   ] LazyLoaded state.check_result
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] LazyLoaded highstate.output
[DEBUG   ] Using pkg_resources to load entry points
[DEBUG   ] LazyLoaded nested.output
local:
----------
          ID: test_dir
    Function: file.directory
        Name: C:\test
      Result: True
     Comment:
     Started: 09:36:13.429997
    Duration: 46.881 ms
     Changes:
              ----------
              C:\test:
                  ----------
                  directory:
                      new

Summary for local
------------
Succeeded: 1 (changed=1)
Failed:    0
------------
Total states run:     1
Total run time:  46.881 ms
</pre>
**Expected behavior**
Folder `c:\test` created with correct permissions and propagation "This folder only"

**Versions Report**
<details><summary>salt --versions-report</summary>
(Provided by running salt --versions-report. Please also mention any differences in master/minion versions.) 

```
Salt Version:
          Salt: 3003

Dependency Versions:
          cffi: 1.14.5
      cherrypy: 18.6.0
      dateutil: 2.8.1
     docker-py: Not Installed
         gitdb: 4.0.5
     gitpython: Not Installed
        Jinja2: 2.10.1
       libgit2: Not Installed
      M2Crypto: Not Installed
          Mako: 1.1.4
       msgpack: 1.0.2
  msgpack-pure: Not Installed
  mysql-python: Not Installed
     pycparser: 2.20
      pycrypto: Not Installed
  pycryptodome: 3.9.8
        pygit2: Not Installed
        Python: 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)]
  python-gnupg: 0.4.6
        PyYAML: 5.3.1
         PyZMQ: 18.0.1
         smmap: 3.0.4
       timelib: 0.2.4
       Tornado: 4.5.3
           ZMQ: 4.3.1

System Versions:
          dist:
        locale: cp1251
       machine: AMD64
       release: 2019Server
        system: Windows
       version: 2019Server 10.0.17763 SP0
```
</details>

