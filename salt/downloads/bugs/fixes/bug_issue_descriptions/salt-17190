When calling an orchestration function, the fail_function is supposed to receive the return data from the called function. Instead it is receiving some string that has nothing to do with the called function.

Here is my test orchestration:

``` yaml
cmd.run_all:
  salt.function:
    - tgt: dev
    - arg: 'date'
    - fail_function: 'fail.test'
```

Here is my "fail" custom module, which does nothing but log the argument so I can see what is being passed:

``` python
import logging

# Set up logging
log = logging.getLogger(__name__)

def test(retdata):

    log.debug("Return data: {0}".format(retdata))
    return True
```

Here is what I see in the log:

```
[DEBUG   ] get_iter_returns for jid 20141105082351711212 sent to set(['dev']) will timeout at 08:23:56.714527
[DEBUG   ] jid 20141105082351711212 return from dev
[DEBUG   ] jid 20141105082351711212 found all minions set(['dev'])
[DEBUG   ] Return data: ERROR: User 'e' is not available
[INFO    ] {'ret': {'dev': "ERROR: User 'e' is not available"}, 'out': 'highstate'}
[INFO    ] Completed state [cmd.run_all] at time 08:23:51.944578
```

The string "ERROR: User 'e' is not available" is being passed to my function, rather than the results of the cmd.run_all function. I've tested this on two different Salt masters with the same result.

This makes the fail_function unusable and I'm left with no way to determine if my orchestration functions actually worked.
