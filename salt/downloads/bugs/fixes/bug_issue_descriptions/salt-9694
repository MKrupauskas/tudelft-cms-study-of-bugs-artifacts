Environment:  All environments

```
Salt: 0.17.2
         Python: 2.6.9 (unknown, Oct 29 2013, 19:58:13)
         Jinja2: 2.6
       M2Crypto: 0.20.2
 msgpack-python: 0.1.13
   msgpack-pure: Not Installed
       pycrypto: 2.6.1
         PyYAML: 3.10
          PyZMQ: 2.2.0.1
            ZMQ: 3.2.4
```

If you look at sign_in function in crypt.py, you'll notice the following line:

``` python
self.opts['master_ip'] = salt.utils.dns_check(
                self.opts['master'],
                True,
                self.opts['ipv6']
            )
```

This sets a new master_ip if the dns lookup resolved to a new ip address.

However,  you'll notice a little further down the following line of code

``` python
sreq = salt.payload.SREQ(
            self.opts['master_uri'],
        )
```

This is using master_uri to make some sort of authentication request to the master.  

Unfortunately, master_uri doesn't change if master_ip changes resulting in master_uri using a stale ip address until the minion is restarted.

This exact scenario happened to me because for some reason my router initially hands out the incorrect ip address until it gets Internet and then hands out the correct ip address.  The minion repeats the authentication cycle forever because it never uses the new correct ip address because master_uri never gets updated. 
