As per the request from David Boucha : https://groups.google.com/forum/#!topic/salt-users/i4pRKlI9FMI

I have been having issues with my WSUS server - and due to the following it actually took me a while to understand that this was not a salt related error because this is my first test use-case for saltstack - however it should probably handle the exception a little better to begin with?  Note that when running with debug there is a much better indication of what is going on.

when calling win_wua.list_updates and the WSUS server is not responding properly (even using salt-call locally) I get:

```
'Passed invalid arguments to win_wua.list_updates: The Python instance can not be converted to a COM object'   -> this error  is followed by the complete usage dialog. 
```
### Steps to Reproduce Issue

```
C:\salt>salt-call win_wua.list_updates summary=true -l debug
[DEBUG   ] Reading configuration from c:\salt\conf\minion
[DEBUG   ] Configuration file path: c:\salt\conf\minion
[WARNING ] Insecure logging configuration detected! Sensitive data may be logged
.
[DEBUG   ] Reading configuration from c:\salt\conf\minion
[DEBUG   ] Initializing new SAuth for ('c:\\salt\\conf\\pki\\minion', 'MINION', 'tcp://x.x.x.x:4506')
[DEBUG   ] Generated random reconnect delay between '1000ms' and '11000ms' (1162)
[DEBUG   ] Setting zmq_reconnect_ivl to '1162ms'
[DEBUG   ] Setting zmq_reconnect_ivl_max to '11000ms'
[INFO    ] Determining pillar cache
[DEBUG   ] Initializing new AsyncZeroMQReqChannel for ('c:\\salt\\conf\\pki\\min
ion', 'MINION', 'tcp://x.x.x.x:4506', 'aes')
[DEBUG   ] Initializing new SAuth for ('c:\\salt\\conf\\pki\\minion', 'MINION', 'tcp://x.x.x.x:4506')
[DEBUG   ] Initializing new AsyncZeroMQReqChannel for ('c:\\salt\\conf\\pki\\min
ion', 'MINION', 'tcp://x.x.x.x:4506', 'clear')
[DEBUG   ] Decrypting the current master AES key
[DEBUG   ] Loaded minion key: c:\salt\conf\pki\minion\minion.pem
[DEBUG   ] Loaded minion key: c:\salt\conf\pki\minion\minion.pem
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[DEBUG   ] LazyLoaded win_wua.list_updates
[DEBUG   ] Searching for updates: IsHidden=0 and IsInstalled=0 and Type='Softwar
e'
[INFO    ] Search for updates failed. (-2147352567, 'Exception occurred.', (0, N
one, None, None, 0, -2145107934), None)

Passed invalid arguments: The Python instance can not be converted to a COM obje
ct.

Usage:

    Returns a detailed list of available updates or a summary

    :param bool software:
        Include software updates in the results (default is True)

    :param bool drivers:
        Include driver updates in the results (default is False)

    :param bool summary:
        True: Return a summary of updates available for each category.        Fa
lse (default): Return a detailed list of available updates.

    :param bool installed:
        Include installed updates in the results (default if False)

    :param bool download:
        (Overrides reporting functionality) Download the list of updates
        returned by this function. Run this function first to see what will be
        installed, then set download=True to download the updates.

    :param bool install:
        (Overrides reporting functionality) Install the list of updates
        returned by this function. Run this function first to see what will be
        installed, then set install=True to install the updates. This will
        override download=True

    :param list categories:
        Specify the categories to list. Must be passed as a list. All
        categories returned by default.

        Categories include the following:

        * Critical Updates
        * Definition Updates
        * Drivers (make sure you set drivers=True)
        * Feature Packs
        * Security Updates
        * Update Rollups
        * Updates
        * Update Rollups
        * Windows 7
        * Windows 8.1
        * Windows 8.1 drivers
        * Windows 8.1 and later drivers
        * Windows Defender

    :param list severities:
        Specify the severities to include. Must be passed as a list. All
        severities returned by default.

        Severities include the following:

        * Critical
        * Important

    :return:
        Returns a dict containing either a summary or a list of updates:

        .. code-block:: cfg

            List of Updates:
            {'<GUID>': {'Title': <title>,
                        'KB': <KB>,
                        'GUID': <the globally uinique identifier for the update>

                        'Description': <description>,
                        'Downloaded': <has the update been downloaded>,
                        'Installed': <has the update been installed>,
                        'Mandatory': <is the update mandatory>,
                        'UserInput': <is user input required>,
                        'EULAAccepted': <has the EULA been accepted>,
                        'Severity': <update severity>,
                        'NeedsReboot': <is the update installed and awaiting reb
oot>,
                        'RebootBehavior': <will the update require a reboot>,
                        'Categories': [ '<category 1>',
                                        '<category 2>',
                                        ...]
                        }
            }

            Summary of Updates:
            {'Total': <total number of updates returned>,
             'Available': <updates that are not downloaded or installed>,
             'Downloaded': <updates that are downloaded but not installed>,
             'Installed': <updates installed (usually 0 unless installed=True)>,

             'Categories': { <category 1>: <total for that category>,
                             <category 2>: <total for category 2>,
                             ... }
            }
    :return type: dict

    CLI Examples:

    .. code-block:: bash

        # Normal Usage (list all software updates)
        salt '*' wua.list_updates

        # List all updates with categories of Critical Updates and Drivers
        salt '*' wua.list_updates categories=['Critical Updates','Drivers']

        # List all Critical Security Updates
        salt '*' wua.list_updates categories=['Security Updates'] severities=['C
ritical']

        # List all updates with a severity of Critical
        salt '*' wua.list_updates severities=['Critical']

        # A summary of all available updates
        salt '*' wua.list_updates summary=True

        # A summary of all Feature Packs and Windows 8.1 Updates
        salt '*' wua.list_updates categories=['Feature Packs','Windows 8.1'] sum
mary=True


Traceback (most recent call last):
  File "C:\salt\bin\lib\site-packages\salt\cli\caller.py", line 196, in call
    ret['return'] = func(*args, **kwargs)
  File "C:\salt\bin\lib\site-packages\salt\modules\win_wua.py", line 520, in lis
t_updates
    categories=categories)
  File "C:\salt\bin\lib\site-packages\salt\modules\win_wua.py", line 124, in _fi
lter_list_by_category
    update_list.Add(update)
  File "<COMObject Microsoft.Update.UpdateColl>", line 2, in Add
TypeError: The Python instance can not be converted to a COM object

C:\salt>
```
### Versions Report

``` yaml
$ sudo salt-master --versions-report
                  Salt: 2015.5.3
                Python: 2.7.6 (default, Jun 22 2015, 17:58:13)
                Jinja2: 2.7.2
              M2Crypto: 0.21.1
        msgpack-python: 0.3.0
          msgpack-pure: Not Installed
              pycrypto: 2.6.1
               libnacl: Not Installed
                PyYAML: 3.10
                 ioflo: Not Installed
                 PyZMQ: 14.0.1
                  RAET: Not Installed
                   ZMQ: 4.0.4
                  Mako: Not Installed
               Tornado: Not Installed
 Debian source package: 2015.5.3+ds-1trusty1

$ sudo salt 'minion' test.versions_report
    Salt Version:
               Salt: 2015.8.8

    Dependency Versions:
             Jinja2: 2.7.3
           M2Crypto: Not Installed
               Mako: Not Installed
             PyYAML: 3.11
              PyZMQ: 14.7.0
             Python: 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 20:40:30) [MSC v.1500 64 bit (AMD64)]
               RAET: Not Installed
            Tornado: 4.2.1
                ZMQ: 4.1.2
               cffi: Not Installed
           cherrypy: Not Installed
           dateutil: 2.4.2
              gitdb: Not Installed
          gitpython: Not Installed
              ioflo: Not Installed
            libgit2: Not Installed
            libnacl: Not Installed
       msgpack-pure: Not Installed
     msgpack-python: 0.4.6
       mysql-python: Not Installed
          pycparser: Not Installed
           pycrypto: 2.6.1
             pygit2: Not Installed
       python-gnupg: 0.3.7
              smmap: Not Installed
            timelib: Not Installed

    System Versions:
               dist:
            machine: AMD64
            release: 2012ServerR2
             system: 2012ServerR2 6.3.9600  Multiprocessor Free
```
