Server : 2015.5.3
Minion : 2015.8.0rc2

Haven't had much luck with the Windows 2015.8.0rc2 minion

Some interesting information at boot

```
2015-08-03 20:55:30,175 [salt.transport.zeromq][DEBUG   ][5544] Initializing new AsyncZeroMQReqChannel for ('c:\\salt\\conf\\pki\\minion', 'AC1-873A7F.dev.ktm.np.adshel.net', 'tcp://10.156.47.9:4506', 'aes')
2015-08-03 20:55:30,175 [salt.crypt       ][DEBUG   ][5544] Initializing new SAuth for ('c:\\salt\\conf\\pki\\minion', 'AC1-873A7F.dev.ktm.np.adshel.net', 'tcp://10.156.47.9:4506')
2015-08-03 20:55:30,721 [salt.transport.zeromq][DEBUG   ][5544] Re-using AsyncZeroMQReqChannel for ('c:\\salt\\conf\\pki\\minion', 'AC1-873A7F.dev.ktm.np.adshel.net', 'tcp://10.156.47.9:4506', 'aes')
2015-08-03 20:55:30,721 [salt.utils.schedule][ERROR   ][5544] Unhandled exception running mine.update
Traceback (most recent call last):
  File "C:\salt\bin\lib\site-packages\salt\utils\schedule.py", line 706, in handle_func
    channel.send(load)
  File "C:\salt\bin\lib\site-packages\salt\utils\async.py", line 77, in wrap
    ret = self._block_future(ret)
  File "C:\salt\bin\lib\site-packages\salt\utils\async.py", line 86, in _block_future
    self.io_loop.start()
  File "C:\salt\bin\lib\site-packages\zmq\eventloop\ioloop.py", line 151, in start
    super(ZMQIOLoop, self).start()
  File "C:\salt\bin\lib\site-packages\tornado\ioloop.py", line 731, in start
    raise RuntimeError("IOLoop is already running")
RuntimeError: IOLoop is already running
2015-08-03 20:55:30,721 [salt.utils.schedule][DEBUG   ][5544] schedule.handle_func: Removing c:\salt\var\cache\salt\minion\proc\20150803205530144000
2015-08-03 20:55:31,953 [tornado.application][ERROR   ][5544] Exception in callback <functools.partial object at 0x00000000046D60E8>
Traceback (most recent call last):
  File "C:\salt\bin\lib\site-packages\tornado\ioloop.py", line 592, in _run_callback
    ret = callback()
  File "C:\salt\bin\lib\site-packages\tornado\stack_context.py", line 275, in null_wrapper
    return fn(*args, **kwargs)
  File "C:\salt\bin\lib\site-packages\tornado\ioloop.py", line 598, in <lambda>
    self.add_future(ret, lambda f: f.result())
  File "C:\salt\bin\lib\site-packages\tornado\concurrent.py", line 215, in result
    raise_exc_info(self._exc_info)
  File "C:\salt\bin\lib\site-packages\tornado\gen.py", line 230, in wrapper
    yielded = next(result)
  File "C:\salt\bin\lib\site-packages\salt\minion.py", line 1505, in handle_event
    self._mine_send(package)
  File "C:\salt\bin\lib\site-packages\salt\minion.py", line 1480, in _mine_send
    ret = channel.send(load)
  File "C:\salt\bin\lib\site-packages\salt\utils\async.py", line 77, in wrap
    ret = self._block_future(ret)
  File "C:\salt\bin\lib\site-packages\salt\utils\async.py", line 87, in _block_future
    return future.result()
  File "C:\salt\bin\lib\site-packages\tornado\concurrent.py", line 216, in result
    self._check_done()
  File "C:\salt\bin\lib\site-packages\tornado\concurrent.py", line 294, in _check_done
    raise Exception("DummyFuture does not support blocking for results")
Exception: DummyFuture does not support blocking for results
2015-08-03 20:55:55,166 [salt.minion      ][INFO    ][5544] User sudo_andrewc Executing command test.ping with jid 20150803205546082435
2015-08-03 20:55:55,166 [salt.minion      ][DEBUG   ][5544] Command details {'tgt_type': 'glob', 'jid': '20150803205546082435', 'tgt': '*.ktm.*', 'ret': '', 'user': 'sudo_andrewc', 'arg': [], 'fun': 'test.ping'}
2015-08-03 20:55:55,182 [salt.minion      ][INFO    ][5544] Starting a new job with PID 5544
2015-08-03 20:55:55,229 [salt.utils.lazy  ][DEBUG   ][5544] LazyLoaded test.ping
2015-08-03 20:55:55,229 [salt.minion      ][INFO    ][5544] Returning information for job: 20150803205546082435
2015-08-03 20:55:55,229 [salt.transport.zeromq][DEBUG   ][5544] Re-using AsyncZeroMQReqChannel for ('c:\\salt\\conf\\pki\\minion', 'AC1-873A7F.dev.ktm.np.adshel.net', 'tcp://10.156.47.9:4506', 'aes')
```
