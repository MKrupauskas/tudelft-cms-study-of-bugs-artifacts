### Description of Issue/Question
It seems that it is impossible to pass any arguments to `gpg.create_key` from `module.run`. It seems that this not only applies to this function, but all execution module functions that have a wrapping decorator.

### Setup
install `python-gnupg`, or the gpg module won't be available. Also, it may be helpful to `ln -s /dev/null ~/.gnupg` if you don't want to wait forever for gpg to generate a useless key

### Steps to Reproduce Issue
Apply the following state (`salt-call --local` will do fine):

```
gpg.create_key:
  module.run:
  - gnupghome: /tmp
  - user: salt
```

Observe it try to create a keyring in ~/.gnupg instead. In fact, you can pass it any of the mentioned parameters, and every one of them will be ignored and the defaults used instead: the call will always create a 1024-bit RSA key in the name of "Autogenerated Key (Generated by SaltStack)".

I believe the problem is in `salt.utils.args.get_function_argspec`: this function is supposed to enumerate the valid parameters for the execution function, but fails because `create_key` is decorated with a function wrapper (`_restore_ownership`). The result is that none of the parameters given to `module.run` are passed through to the execution module.

Manually adding some debug leads to this trace (edited for brevity, note the empty `aspec` variable in module.run):
[DEBUG   ] Results of YAML rendering:
OrderedDict([('gpg.create_key', OrderedDict([('module.run', [OrderedDict([('user', 'salt')]), OrderedDict([('gnupghome', '/tmp')])])]))])
[DEBUG   ] == in module.run: name=<gpg.create_key> kwargs=<{'user': 'salt', 'gnupghome': '/tmp'}> ==
[DEBUG   ] == in module.run: aspec=<ArgSpec(args=[], varargs='args', keywords='kwargs', defaults=None)> ==

If you symlinked ~/.gnupg away, you will get
[ERROR   ] Module function gpg.create_key threw an exception. Exception: [Errno 17] File exists: '{{HOME}}/.gnupg'

Otherwise, you will get 
[DEBUG   ] ['gpg1', '--status-fd', '2', '--no-tty', '--homedir', '{{HOME}}/.gnupg', '--version']


Both the new `run` and the old `_run` rely on the same `salt.utils.args.get_function_argspec`, so I believe both have the same issue. I have not tried the new `run` though.

### Versions Report

Salt Version:
           Salt: 2017.7.0

Dependency Versions:
           cffi: Not Installed
       cherrypy: Not Installed
       dateutil: 2.5.3
      docker-py: Not Installed
          gitdb: Not Installed
      gitpython: Not Installed
          ioflo: Not Installed
         Jinja2: 2.8
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: 0.24.0
           Mako: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.4.8
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
   pycryptodome: Not Installed
         pygit2: Not Installed
         Python: 2.7.13 (default, Jan 19 2017, 14:48:08)
   python-gnupg: 0.3.9
         PyYAML: 3.12
          PyZMQ: 16.0.2
           RAET: Not Installed
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.4.3
            ZMQ: 4.2.1

System Versions:
           dist: debian stretch/sid
         locale: UTF-8
        machine: x86_64
        release: 4.9.0-3-amd64
         system: Linux
        version: debian stretch/sid
