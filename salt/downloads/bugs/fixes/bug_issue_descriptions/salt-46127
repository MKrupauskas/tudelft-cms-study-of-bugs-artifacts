I have a formula for managing graphite installation which requires PYTHONPATH to be set to a custom directory (without changing the `bin_env`). The state looks something like

```
graphite-web:
  pip.installed:
    - name: 'graphite-web{% if graphite_web_version %}=={{graphite_web_version}}{% endif %}'
    - env_vars:
        PYTHONPATH: "/opt/graphite/lib/:/opt/graphite/webapp/"
    - require:
      - file: /opt/graphite
```

Running this state always results in an output like

```
----------
          ID: graphite-web
    Function: pip.installed
        Name: graphite-web==1.1.2
      Result: True
     Comment: There was no error installing package 'graphite-web==1.1.2' although it does not show when calling 'pip.freeze'.
     Started: 16:51:54.604922
    Duration: 6326.189 ms
     Changes:   
----------

```

or something like this with `test=True`

```
----------
          ID: graphite-web
    Function: pip.installed
        Name: graphite-web==1.1.2
      Result: None
     Comment: Python package graphite-web==1.1.2 is set to be installed
     Started: 16:55:14.297774
    Duration: 2413.703 ms
     Changes:   
----------

```

This creates problems in writing dependent states that must only be run in case pip updated the package.

Looking at the code, it looks like `pip freeze` is called before and after installation to check whether the package is installed/needs installation, but while `install` is passed env variables, `freeze` is not.

I am running salt-2017.7.3

I came across a similar bug #37038 but this one is a subset of the issues mentioned there.
