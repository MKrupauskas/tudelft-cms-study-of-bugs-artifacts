### 2014.1.{11..14}

``` python
# salt-master -l debug
...
[DEBUG   ] Loaded sqlite3_return as virtual sqlite3
[INFO    ] Worker binding to socket ipc:///var/run/salt/master/workers.ipc
[INFO    ] Worker binding to socket ipc:///var/run/salt/master/workers.ipc
[INFO    ] Worker binding to socket ipc:///var/run/salt/master/workers.ipc
[INFO    ] Worker binding to socket ipc:///var/run/salt/master/workers.ipc
[INFO    ] Worker binding to socket ipc:///var/run/salt/master/workers.ipc
^C[WARNING ] Stopping the Salt Master
```
### 2014.7.{0..2}, 2015.2 and beyond

``` python
# salt-master -l debug
...
[INFO    ] Worker binding to socket ipc:///var/run/salt/master/workers.ipc
[INFO    ] Worker binding to socket ipc:///var/run/salt/master/workers.ipc
[INFO    ] Worker binding to socket ipc:///var/run/salt/master/workers.ipc
[INFO    ] Worker binding to socket ipc:///var/run/salt/master/workers.ipc
[INFO    ] Worker binding to socket ipc:///var/run/salt/master/workers.ipc
^CProcess Process-4:6:
Traceback (most recent call last):
  File "/usr/lib64/python2.7/multiprocessing/process.py", line 258, in _bootstrap
    self.run()
  File "/usr/lib64/python2.7/multiprocessing/process.py", line 114, in run
    self._target(*self._args, **self._kwargs)
  File "/root/salt/salt/master.py", line 489, in zmq_device
[WARNING ] Stopping the Salt Master

Exiting on Ctrl-c
Process Process-4:
Traceback (most recent call last):
  File "/usr/lib64/python2.7/multiprocessing/process.py", line 258, in _bootstrap
    self.run()
  File "/usr/lib64/python2.7/multiprocessing/process.py", line 114, in run
    self._target(*self._args, **self._kwargs)
  File "/root/salt/salt/master.py", line 313, in run_reqserver
    reqserv.run()
  File "/root/salt/salt/master.py", line 524, in run
    self.__bind()
  File "/root/salt/salt/master.py", line 518, in __bind
    self.process_manager.run()
  File "/root/salt/salt/utils/process.py", line 196, in run
    pid, exit_status = os.wait()
  File "/usr/lib64/python2.7/site-packages/async/__init__.py", line 21, in thread_interrupt_handler
    prev_handler(signum, frame)
KeyboardInterrupt
```

Of course, if you `<ctrl>c` before the master processes begin worker idling, stack traces will splatter all over.
