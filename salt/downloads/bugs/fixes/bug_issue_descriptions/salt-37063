Basically, if you call `cloudclient.destroy("vm") on a vultr instance, and you get a command failure, the resulting output is confusing:

```
1 durr@rwpscrape:/media/Storage/Scripts/AutoTriever/marshaller sudo python salt_runner.py destroy
Setting up loggers....
done
Main.MainThread - CRITICAL - Uncaught exception!
Main.MainThread - CRITICAL - Uncaught exception
Traceback (most recent call last):
  File "salt_runner.py", line 282, in <module>
    herder.destroy_client("test-1")
  File "salt_runner.py", line 200, in destroy_client
    self.cc.destroy(clientname)
  File "/usr/lib/python2.7/dist-packages/salt/cloud/__init__.py", line 371, in destroy
    mapper.destroy(names)
  File "/usr/lib/python2.7/dist-packages/salt/cloud/__init__.py", line 1032, in destroy
    ret = self.clouds[fun](name)
  File "/usr/lib/python2.7/dist-packages/salt/cloud/clouds/vultrpy.py", line 179, in destroy
    if result['body'] == '' and result['text'] == '':
KeyError: 'body'

```

In this case, The Vultr api is returning `{'status': 412, 'error': 'HTTP 412: Request Failed'}`, which is why accessing `body` fails.

Since `body` and `text` are not guaranteed to be present, they should probably be checked for their presence before checking their value.
