```
salt '*' pkg.upgrade openssl
```

is the same as

```
salt '*' pkg.upgrade refresh=openssl # doesn't make sense
```

and causes that all systems are COMPLETELY upgraded (ALL PACKAGES, not only openssl), because `salt.utils.is_true('openssl')` returns `True`, not an exception. This happened to my colleague and caused serious troubles to the my whole team.

The API of the function 'upgrade' should be changed in all modules exporting virtual module pkg so that argument name is on the first place the same way as it is in install.

yumpkg (see pull request #26022) and aptpkg (see issue #16293) already support upgrade of specific packages instead of whole system. In yumpkg by passing parameters 'name' or 'packages', in aptpkg by --only-upgrade in install.

The principle of the least surprise should be followed here. I understand the consequences of this change, but the worst-case scenario is that after upgrade to new SaltStack someone will run.

`salt '*' pkg.upgrade False # not so common I think`
and will get 0 upgrades because package `False` doesn't exist. I think this is less evil than what happened to my team and can happen to anyone.
