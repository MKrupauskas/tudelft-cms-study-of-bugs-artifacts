Spinning up a VM results in:

```
[ERROR   ] Error creating testvm.example.com: exceptions must be old-style classes or derived from BaseException, not NoneType
Traceback (most recent call last):
  File "/usr/lib/python2.7/dist-packages/salt/cloud/clouds/vmware.py", line 1908, in create
    _wait_for_task(task, vm_name, "clone", 5, 'info')
  File "/usr/lib/python2.7/dist-packages/salt/cloud/clouds/vmware.py", line 608, in _wait_for_task
    raise task.info.error
TypeError: exceptions must be old-style classes or derived from BaseException, not NoneType
Error: There was a profile error: Failed to deploy VM
```

Debug (sanitized):

```
[DEBUG   ] Sending event - data = {'profile': 'vmware-ubuntu14.04', 'event': 'starting create', '_stamp': '2015-05-04T06:14:37.209518', 'name': 'testvm.example.com', 'provider': 'example-vmware:vmware'}
[WARNING ] Specified host: vmtest.example.com does not exist
[WARNING ] Using host used by the template ubuntu_1404_template
[DEBUG   ] Disks to create: []
[DEBUG   ] Networks to create: []
[DEBUG   ] SCSI adapters to create: ['SCSI controller 1']
[DEBUG   ] clone_spec set to (vim.vm.CloneSpec) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   location = (vim.vm.RelocateSpec) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      datastore = <unset>,
      diskMoveType = <unset>,
      pool = 'vim.ResourcePool:resgroup-283',
      host = <unset>,
      disk = (vim.vm.RelocateSpec.DiskLocator) [],
      transform = <unset>,
      deviceChange = (vim.vm.device.VirtualDeviceSpec) [],
      profile = (vim.vm.ProfileSpec) []
   },
   template = false,
   config = (vim.vm.ConfigSpec) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      changeVersion = <unset>,
      name = <unset>,
      version = <unset>,
      uuid = <unset>,
      instanceUuid = <unset>,
      npivNodeWorldWideName = (long) [],
      npivPortWorldWideName = (long) [],
      npivWorldWideNameType = <unset>,
      npivDesiredNodeWwns = <unset>,
      npivDesiredPortWwns = <unset>,
      npivTemporaryDisabled = <unset>,
      npivOnNonRdmDisks = <unset>,
      npivWorldWideNameOp = <unset>,
      locationId = <unset>,
      guestId = <unset>,
      alternateGuestName = <unset>,
      annotation = <unset>,
      files = <unset>,
      tools = <unset>,
      flags = <unset>,
      consolePreferences = <unset>,
      powerOpInfo = <unset>,
      numCPUs = 2,
      numCoresPerSocket = <unset>,
      memoryMB = 1024,
      memoryHotAddEnabled = <unset>,
      cpuHotAddEnabled = <unset>,
      cpuHotRemoveEnabled = <unset>,
      virtualICH7MPresent = <unset>,
      virtualSMCPresent = <unset>,
      deviceChange = (vim.vm.device.VirtualDeviceSpec) [
         (vim.vm.device.VirtualDeviceSpec) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            operation = 'edit',
            fileOperation = <unset>,
            device = (vim.vm.device.VirtualVmxnet3) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               key = 4000,
               deviceInfo = (vim.Description) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  label = 'Network adapter 1',
                  summary = 'VM Network'
               },
               backing = (vim.vm.device.VirtualEthernetCard.NetworkBackingInfo) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  deviceName = 'VM Network',
                  useAutoDetect = <unset>,
                  network = 'vim.Network:network-11',
                  inPassthroughMode = <unset>
               },
               connectable = (vim.vm.device.VirtualDevice.ConnectInfo) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startConnected = true,
                  allowGuestControl = true,
                  connected = false,
                  status = 'untried'
               },
               slotInfo = <unset>,
               controllerKey = 100,
               unitNumber = 7,
               addressType = 'assigned',
               macAddress = '00:50:56:97:13:38',
               wakeOnLanEnabled = true
            },
            profile = (vim.vm.ProfileSpec) []
         },
         (vim.vm.device.VirtualDeviceSpec) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            operation = 'add',
            fileOperation = <unset>,
            device = (vim.vm.device.ParaVirtualSCSIController) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               key = -1004,
               deviceInfo = (vim.Description) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  label = 'SCSI controller 1',
                  summary = 'VMware paravirtual SCSI'
               },
               backing = <unset>,
               connectable = <unset>,
               slotInfo = <unset>,
               controllerKey = <unset>,
               unitNumber = <unset>,
               busNumber = 1,
               device = (int) [],
               hotAddRemove = <unset>,
               sharedBus = 'noSharing',
               scsiCtlrUnitNumber = <unset>
            },
            profile = (vim.vm.ProfileSpec) []
         }
      ],
      cpuAllocation = <unset>,
      memoryAllocation = <unset>,
      latencySensitivity = <unset>,
      cpuAffinity = <unset>,
      memoryAffinity = <unset>,
      networkShaper = <unset>,
      cpuFeatureMask = (vim.vm.ConfigSpec.CpuIdInfoSpec) [],
      extraConfig = (vim.option.OptionValue) [
         (vim.option.OptionValue) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            key = 'guestinfo.saltMaster',
            value = 'SNIP'
         },
         (vim.option.OptionValue) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            key = 'mem.hotadd',
            value = 'yes'
         },
         (vim.option.OptionValue) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            key = 'guestinfo.domain',
            value = 'example.com'
         }
      ],
      swapPlacement = <unset>,
      bootOptions = <unset>,
      vAppConfig = <unset>,
      ftInfo = <unset>,
      vAppConfigRemoved = <unset>,
      vAssertsEnabled = <unset>,
      changeTrackingEnabled = <unset>,
      firmware = <unset>,
      maxMksConnections = <unset>,
      guestAutoLockEnabled = <unset>,
      managedBy = <unset>,
      memoryReservationLockedToMax = <unset>,
      nestedHVEnabled = <unset>,
      vPMCEnabled = <unset>,
      scheduledHardwareUpgradeInfo = <unset>,
      vmProfile = (vim.vm.ProfileSpec) []
   },
   customization = (vim.vm.customization.Specification) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      options = <unset>,
      identity = (vim.vm.customization.LinuxPrep) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         hostName = (vim.vm.customization.FixedName) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            name = 'testvm'
         },
         domain = 'example.com',
         timeZone = <unset>,
         hwClockUTC = <unset>
      },
      globalIPSettings = (vim.vm.customization.GlobalIPSettings) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         dnsSuffixList = (str) [],
         dnsServerList = (str) [
            '8.8.8.8',
            '8.8.4.4'            
         ]
      },
      nicSettingMap = (vim.vm.customization.AdapterMapping) [
         (vim.vm.customization.AdapterMapping) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            macAddress = <unset>,
            adapter = (vim.vm.customization.IPSettings) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               ip = (vim.vm.customization.FixedIp) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  ipAddress = '10.0.0.10'
               },
               subnetMask = '255.255.254.0',
               gateway = (str) [
                  '10.0.0.1'
               ],
               ipV6Spec = <unset>,
               dnsServerList = (str) [],
               dnsDomain = 'example.com',
               primaryWINS = <unset>,
               secondaryWINS = <unset>,
               netBIOS = <unset>
            }
         }
      ],
      encryptionKey = (byte) []
   },
   powerOn = true,
   snapshot = <unset>,
   memory = <unset>
}

[INFO    ] Creating testvm.example.com from template(ubuntu_1404_template)

[DEBUG   ] MasterEvent PUB socket URI: ipc:///var/run/salt/master/master_event_pub.ipc
[DEBUG   ] MasterEvent PULL socket URI: ipc:///var/run/salt/master/master_event_pull.ipc
[DEBUG   ] Sending event - data = {'_stamp': '2015-05-04T06:14:48.065103', 'event': 'requesting instance', 'kwargs': {'profile': 'vmware-ubuntu14.04', 'domain': 'example.com', 'dns_servers': ['8.8.8.8', '8.8.4.4'], 'deploy': True, 'minion': {'master': 'SNIP'}, 'ssh_username': 'example', 'provider': 'example-vmware:vmware', 'resourcepool': 'Resources', 'cluster': 'example', 'host': 'vmtest.example.com', 'priv_key': '-----BEGIN RSA PRIVATE KEY-----\nSNIP-----END RSA PRIVATE KEY-----\n', 'datastore': 'vmexp01:storage1', 'password': 'SNIP', 'pub_key': '-----BEGIN PUBLIC KEY-----\nSNIP-----END PUBLIC KEY-----\n', 'private_key': '/root/.ssh/id_rsa', 'public_key': '/root/.ssh/id_rsa.pub', 'name': 'testvm.example.com', 'clonefrom': 'ubuntu_1404_template', 'num_cpus': 2, 'devices': {'scsi': {'SCSI controller 1': {'type': 'paravirtual'}}, 'disk': {'Hard disk 1': {'size': 15}}, 'network': {'Network adapter 1': {'switch_type': 'standard', 'subnet_mask': '255.255.0.0', 'domain': 'example.com', 'name': 'VM Network', 'ip': '10.0.0.10', 'gateway': ['10.0.0.1']}}}, 'power_on': True, 'datacenter': 'example', 'template': False, 'memory': 1024, 'folder': 'vm', 'os': 'bootstrap-salt', 'extra_config': {'guestinfo.saltMaster': 'SNIP', 'guestinfo.domain': 'example.com', 'mem.hotadd': 'yes'}}}
[ERROR   ] Error creating testvm.example.com: exceptions must be old-style classes or derived from BaseException, not NoneType
Traceback (most recent call last):
  File "/usr/lib/python2.7/dist-packages/salt/cloud/clouds/vmware.py", line 1908, in create
    _wait_for_task(task, vm_name, "clone", 5, 'info')
  File "/usr/lib/python2.7/dist-packages/salt/cloud/clouds/vmware.py", line 608, in _wait_for_task
    raise task.info.error
TypeError: exceptions must be old-style classes or derived from BaseException, not NoneType
Error: There was a profile error: Failed to deploy VM
```

Profile (sanitized):

```
vmware-ubuntu14.04:
  provider: example-vmware
  clonefrom: ubuntu_1404_template

  ## Optional arguments
  num_cpus: 2
  memory: 1024
  devices:
    disk:
      Hard disk 1:
        size: 15
    network:
      Network adapter 1:
        ip: 10.0.0.10
        gateway: [10.0.0.1]
        subnet_mask: 255.255.0.0
        domain: example.com
        name: VM Network
        switch_type: standard
    scsi:
      SCSI controller 1:
        type: paravirtual

  domain: example.com
  dns_servers:
    - 8.8.8.8
    - 8.8.4.4

  # If cloning from template, either resourcepool or cluster MUST be specified!
  resourcepool: Resources
  cluster: example

  datastore: 'vmexp01:storage1'
  folder: vm
  datacenter: example
  host: vmtest.example.com
  template: False
  power_on: True
  extra_config:
    mem.hotadd: 'yes'
    guestinfo.saltMaster: SNIP
    guestinfo.domain: example.com

  deploy: True
  public_key: /root/.ssh/id_rsa.pub
  private_key: /root/.ssh/id_rsa
  ssh_username: example
  password: 'SNIP'
  minion:
    master: SNIP
```
