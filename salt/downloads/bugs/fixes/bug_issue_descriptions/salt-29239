When running state.highstate for a single minion, everything works fine.
When running state.highstate for all minions (5), it sometimes gives incorrect results. (All highstate commands are being run with test=True)
Digging down, it appears that for some minions, the git_pillar fails to update, and so the pillar data for that minion is empty, causing the states to give the wrong output. Ideally if the git_pillar (ext_pillar) fails it shouldn't try and compile states for the minion, as the data is incorrect. I'm also not sure why the pillar data appears to be empty instead of using the last successful pull.

Some of the workarounds that I've seen involve just using Cron to pull the pillars repo, and then pointing at that. This would probably speed things up, but I'd expect salt to already do that.

Lines such as the following appear in the logs when this occurs

```
2015-11-27 10:12:18,883 [salt.utils.gitfs ][ERROR   ][26560] Failed to checkout master from git_pillar remote 'master git@version-control:it-internal/saltstack-config.git': aabb80c2f754bdcb6a9100c16445a05c4858c309: The index is locked. This might be due to a concurrent or crashed process
2015-11-27 10:38:09,410 [salt.utils.gitfs ][ERROR   ][26556] Failed to checkout master from git_pillar remote 'master git@version-control:it-internal/saltstack-config.git': Failed to create locked file '/var/cache/salt/master/git_pillar/5e3205db799031016a50dbe438df411c/.git/index.lock': File exists
```

My understanding of https://github.com/saltstack/salt/pull/22962 and https://github.com/saltstack/salt/issues/19994 is that this should have been fixed in 2015.8.0. Maybe this is related, maybe not.

Running on Centos 7 with 4Gb of RAM

```
$ salt --version
salt 2015.8.1 (Beryllium)
```
