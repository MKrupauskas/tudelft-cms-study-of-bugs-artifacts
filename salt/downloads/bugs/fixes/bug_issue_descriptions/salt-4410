Per salt/utils/**init**.py:

```
175     # A normal daemonization redirects the process output to /dev/null. 
176     # Unfortunately when a python multiprocess is called the output is 
177     # not cleanly redirected and the parent process dies when the 
178     # multiprocessing process attempts to access stdout or err. 
179     #dev_null = open('/dev/null', 'rw') 
180     #os.dup2(dev_null.fileno(), sys.stdin.fileno()) 
181     #os.dup2(dev_null.fileno(), sys.stdout.fileno()) 
182     #os.dup2(dev_null.fileno(), sys.stderr.fileno()) 
```

This causes service.start to hang if executed from the console:

```
# cat /etc/issue
CentOS release 6.3 (Final)
Kernel \r on an \m

# salt-call service.start salt-minion
[INFO    ] Loaded configuration file: /etc/salt/minion
[INFO    ] Executing command '/sbin/service salt-minion start' in directory '/root'
(hangs here)
```

I see two ways to potential fix this:
1.  Close the inherited file handles in the python code
2.  Change the init scripts, redirecting the start of the daemon to /dev/null.  I've verified that this is a workaround.
