There appears to be a **major** error in logic in the state `file.copy` when force is set to true.

From [salt/states/file.py](https://github.com/saltstack/salt/blob/c2bc1f8303c9cc60e622eea7547035bfdefe0234/salt/states/file.py#L3734):

``` python
    if os.path.lexists(source) and os.path.lexists(name):
        # if this is a file which did not change, do not update
        if force and os.path.isfile(name):
            hash1 = salt.utils.get_hash(name)
            hash2 = salt.utils.get_hash(source)
            if hash1 != hash2:
                changed = False
        if not force:
            changed = False
        elif not __opts__['test']:
            # Remove the destination to prevent problems later
            try:
                if os.path.islink(name):
                    os.unlink(name)
                elif os.path.isfile(name):
                    os.remove(name)
                else:
                    shutil.rmtree(name)
            except (IOError, OSError):
                return _error(
                    ret,
                    'Failed to delete "{0}" in preparation for '
                    'forced move'.format(name)
                )

```

If the file hash is different, it will set `changed` equal to False, which, doesn't make sense when you're reading it.

This should probably read:

``` python
            if hash1 != hash2:
                changed = True
```

What does this mean?  Well, if the file already exists, and there are changes, then it will just simply delete the file, as the function will return before actually replacing the file:

``` python
    if not changed:
        ret['comment'] = ('The target file "{0}" exists and will not be '
                          'overwritten'.format(name))
        ret['result'] = True
        return ret
```

There doesn't appear to be any unit tests for when force equals true, which should have tripped this bug up.  I can write pull request to fix this change (it's a one-liner), but I wouldn't know how to write a test for it easily.
