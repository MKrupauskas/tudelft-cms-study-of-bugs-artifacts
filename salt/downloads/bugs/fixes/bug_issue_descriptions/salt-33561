### Description of Issue/Question

Time testing a salt-call state.highstate vs. a salt '<minion_id>' state.highstate, the timing can be 2+ x longer.  Same results can be seen even running the salt-call vs. salt 'minion_id' state.highstate on a salt-master.
### Setup

(Please provide relevant configs and/or SLS files (Be sure to remove sensitive info).)
### Steps to Reproduce Issue

(Include debug logs if possible and relevant.)
Setup a salt master with a series of rules to apply to itself and make the salt-master a minion of itself (easiest way, but just as easily have any # of minions attached to the salt-master).  Then just run `time salt-call state.highstate` vs. `time salt '<salt-master minion_id>' state.highstate`.  You'll notice a significant time difference.

Running in debug mode, it would appear in my case, there's a long delay in the following:

2016-05-26 15:31:53,200 [salt.utils.event ][DEBUG   ][26599] Sending event - data = {'fun_args': ['20160526153147994499'], 'jid': '20160526153153163941', 'return': {'tgt_type': 'glob', 'jid': '20160526153147994499', 'tgt': '10.73.0.13', 'pid': 735, 'ret': '', 'user': 'root', 'arg': [], 'fun': 'state.highstate'}, 'retcode': 0, 'success': True, 'cmd': '_return', '_stamp': '2016-05-26T21:31:53.200121', 'fun': 'saltutil.find_job', 'id': '10.73.0.13'}
2016-05-26 15:31:53,201 [salt.utils.reactor][DEBUG   ][26386] Gathering reactors for tag salt/job/20160526153153163941/ret/10.73.0.13
2016-05-26 15:32:03,308 [salt.client      ][DEBUG   ][718] Checking whether jid 20160526153147994499 is still running
2016-05-26 15:32:03,308 [salt.transport.zeromq][DEBUG   ][718] Initializing new AsyncZeroMQReqChannel for ('/etc/salt/pki/master', '10.73.0.13_master', 'tcp://127.0.0.1:4506', 'clear')
2016-05-26 15:32:03,363 [salt.utils.lazy  ][DEBUG   ][26600] LazyLoaded local_cache.prep_jid

Note there's 10 seconds between the Gathering reactors for tag... and Checking whether jid...

and...

in performing additional tests, it "appears" to be isolated to this section as shown from the CLI when running the later mentioned commands:

[DEBUG   ] Initializing new AsyncTCPReqChannel for ('/etc/salt/pki/master', '10.73.0.13_master', 'tcp://127.0.0.1:4506', 'clear')
[DEBUG   ] Checking whether jid 20160526162529376753 is still running
[DEBUG   ] Initializing new AsyncTCPReqChannel for ('/etc/salt/pki/master', '10.73.0.13_master', 'tcp://127.0.0.1:4506', 'clear')
[DEBUG   ] jid 20160526162529376753 return from 10.73.0.13

My time test results:
time salt '10.73.0.13' state.highstate
## Summary for 10.73.0.13

Succeeded: 212
## Failed:      0

Total states run:     212

real    0m20.154s
user    0m0.551s
sys 0m0.074s

time salt-call state.highstate
local:
## Summary for local

Succeeded: 212
## Failed:      0

Total states run:     212

real    0m9.179s
user    0m6.443s
sys 0m0.996s
### Versions Report

(Provided by running `salt --versions-report`. Please also mention any differences in master/minion versions.)
Salt Version:
           Salt: 2016.3.0

Dependency Versions:
           cffi: 0.8.6
       cherrypy: 3.2.2
       dateutil: 1.5
          gitdb: Not Installed
      gitpython: Not Installed
          ioflo: Not Installed
         Jinja2: 2.7.3
        libgit2: Not Installed
        libnacl: 1.4.3
       M2Crypto: 0.21.1
           Mako: 0.8.1
   msgpack-pure: Not Installed
 msgpack-python: 0.4.7
   mysql-python: 1.2.3
      pycparser: 2.14
       pycrypto: 2.6.1
         pygit2: Not Installed
         Python: 2.7.5 (default, Nov 20 2015, 02:00:19)
   python-gnupg: Not Installed
         PyYAML: 3.11
          PyZMQ: 14.7.0
           RAET: Not Installed
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.2.1
            ZMQ: 4.0.5

System Versions:
           dist: centos 7.2.1511 Core
        machine: x86_64
        release: 4.4.4.bs.ufd
         system: Linux
        version: CentOS Linux 7.2.1511 Core
