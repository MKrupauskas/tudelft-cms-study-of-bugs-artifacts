### Description of Issue/Question
Proxy Minion fails on Windows master using python 3.

### Setup
Set up proxy minion setup/environment.

```
Master config:
c:/salt/conf/master

pillar_roots:
  base:
    - c:/salt-manual-tests/proxy/pillar
file_roots:
  base:
    - c:/salt-manual-tests/proxy/states
```

```
proxy config:
c:/salt/conf/proxy

master: localhost
add_proxymodules_to_opts: false
```

Accept key(s):

```
C:\>salt-key
Accepted Keys:
p8000
Denied Keys:
Unaccepted Keys:
Rejected Keys:
```

### Steps to Reproduce Issue
Running the command `salt-proxy --proxyid=p8000 -l debug` gives me:
```
C:\>salt-proxy --proxyid=p8000 -l debug
[DEBUG   ] Reading configuration from c:\salt\conf\proxy
[DEBUG   ] Configuration file path: c:\salt\conf\proxy
[WARNING ] Insecure logging configuration detected! Sensitive data may be logged.
[INFO    ] Setting up "p8000" the Salt ProxyMinion
[DEBUG   ] Created pidfile: c:\salt\var\run\salt\p8000\salt-minion.pid
[INFO    ] The Proxy Minion is starting up the Salt ProxyMinion
[DEBUG   ] AsyncEventPublisher PUB socket URI: 4510
[DEBUG   ] AsyncEventPublisher PULL socket URI: 4511
[INFO    ] Starting pull socket on 4511
[DEBUG   ] SaltEvent PUB socket URI: 4510
[DEBUG   ] SaltEvent PULL socket URI: 4511
[DEBUG   ] Initializing new IPCClient for path: 4510
[INFO    ] Creating minion process manager
[DEBUG   ] Process Manager starting!
[DEBUG   ] Process Manager starting!
[DEBUG   ] Connecting to master. Attempt 1 (infinite attempts)
[DEBUG   ] Initializing new AsyncAuth for ('c:\\salt\\conf\\pki\\minion', 'p8000', 'tcp://127.0.0.1:4506')
[DEBUG   ] Generated random reconnect delay between '1000ms' and '11000ms' (6331)
[DEBUG   ] Setting zmq_reconnect_ivl to '6331ms'
[DEBUG   ] Setting zmq_reconnect_ivl_max to '11000ms'
[DEBUG   ] Initializing new AsyncZeroMQReqChannel for ('c:\\salt\\conf\\pki\\minion', 'p8000', 'tcp://127.0.0.1:4506', 'clear')
[DEBUG   ] Decrypting the current master AES key
[DEBUG   ] Loaded minion key: c:\salt\conf\pki\minion\minion.pem
[ERROR   ] Exception in callback functools.partial(<function wrap.<locals>.null_wrapper at 0x0000022D729EE2F0>, <tornado.concurrent.Future object at 0x0000022D729E4940>)
Traceback (most recent call last):
  File "C:\salt\bin\lib\site-packages\tornado\ioloop.py", line 604, in _run_callback
    ret = callback()
  File "C:\salt\bin\lib\site-packages\tornado\stack_context.py", line 275, in null_wrapper
    return fn(*args, **kwargs)
  File "C:\salt\bin\lib\site-packages\tornado\ioloop.py", line 619, in <lambda>
    self.add_future(ret, lambda f: f.result())
  File "C:\salt\bin\lib\site-packages\tornado\concurrent.py", line 237, in result
    raise_exc_info(self._exc_info)
  File "<string>", line 3, in raise_exc_info
  File "C:\salt\bin\lib\site-packages\tornado\gen.py", line 1021, in run
    yielded = self.gen.throw(*exc_info)
  File "C:\salt\bin\lib\site-packages\salt\crypt.py", line 476, in _authenticate
    creds = yield self.sign_in(channel=channel)
  File "C:\salt\bin\lib\site-packages\tornado\gen.py", line 1015, in run
    value = future.result()
  File "C:\salt\bin\lib\site-packages\tornado\concurrent.py", line 237, in result
    raise_exc_info(self._exc_info)
  File "<string>", line 3, in raise_exc_info
  File "C:\salt\bin\lib\site-packages\tornado\gen.py", line 1024, in run
    yielded = self.gen.send(value)
  File "C:\salt\bin\lib\site-packages\salt\crypt.py", line 601, in sign_in
    auth['aes'] = self.verify_master(payload, master_pub='token' in sign_in_payload)
  File "C:\salt\bin\lib\site-packages\salt\crypt.py", line 942, in verify_master
    return self.extract_aes(payload, master_pub=False)
  File "C:\salt\bin\lib\site-packages\salt\crypt.py", line 867, in extract_aes
    aes, token = self.decrypt_aes(payload, master_pub)
  File "C:\salt\bin\lib\site-packages\salt\crypt.py", line 730, in decrypt_aes
    m_digest = public_decrypt(mkey.publickey(), payload['sig'])
  File "C:\salt\bin\lib\site-packages\salt\crypt.py", line 207, in public_decrypt
    return verifier.verify(message)
  File "C:\salt\bin\lib\site-packages\salt\utils\rsax931.py", line 160, in verify
    raise ValueError('Unable to decrypt message')
ValueError: Unable to decrypt message
```

### Versions Report
```
C:\>salt --versions
Salt Version:
           Salt: 2016.11.0-1126-gf589e3c

Dependency Versions:
           cffi: 1.10.0
       cherrypy: unknown
       dateutil: 2.5.3
      docker-py: Not Installed
          gitdb: 0.6.4
      gitpython: 2.0.8
          ioflo: 1.5.5
         Jinja2: 2.9.4
        libgit2: Not Installed
        libnacl: 1.4.5
       M2Crypto: Not Installed
           Mako: 1.0.4
   msgpack-pure: Not Installed
 msgpack-python: 0.4.8
   mysql-python: Not Installed
      pycparser: 2.17
       pycrypto: 2.6.1
         pygit2: Not Installed
         Python: 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)]
   python-gnupg: 0.3.8
         PyYAML: 3.12
          PyZMQ: 16.0.1
           RAET: Not Installed
          smmap: 0.9.0
        timelib: 0.2.4
        Tornado: 4.4.1
            ZMQ: 4.1.6

System Versions:
           dist:
        machine: AMD64
        release: 2016Server
         system: Windows
        version: 2016Server 10.0.14393 SP0 Multiprocessor Free
```