# Issue

Previous to 2016.3.4 it was possible to have a `service.dead` state for a service that didn't exist on the system in the first place. 2016.3.4 now reports "The named service XYZ is not available". This makes it impossible to use Salt to ensure that a service is either disabled *or* not installed. It can now only be disabled.

In my repository I have two service states for Hashicorp consul. One for the "consul agent" and one for the "consul server". A specific node should only ever have one of these installed, so in my Salt configuration the "consul agent" configuration contains a `service.dead` clause for the "consul server" systemd service and the "consul server" configuration contains a `service.dead` clause for the "consul agent" systemd service.

My expected behavior was that if the node was assigned *one* of the states and the other state was previously installed, it would be shutdown and disabled. If *both* states got accidentally assigned, Salt would detect a conflict and report an error.

The above pattern is now broken. There seems to be no way for `service.dead` to also succeed when a service is not installed in the first place.

## Potential solution
Add a flag `must_exist` to `service.dead`, `service.enable` and `service.disable` allowing Salt to *enable*, *disable* and *kill and disable* services only if they exist.