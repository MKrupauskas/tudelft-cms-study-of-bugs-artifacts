The current implementation for `ext_pillar hiera` uses the hiera command line utility:

https://github.com/saltstack/salt/blob/develop/salt/pillar/hiera.py#L32-37

This implementation never passes a key for the item to look up and thus fails

Here is the help of the hiera command:

```
[root@arch-dev-vbox ~]# hiera --help
Usage: hiera [options] key [default value] [variable='text'...]

The default value will be used if no value is found for the key. Scope variables
will be interpolated into %{variable} placeholders in the hierarchy and in
returned values.

    -V, --version                    Version information
    -d, --debug                      Show debugging information
    -a, --array                      Return all values as an array
    -h, --hash                       Return all values as a hash
    -c, --config CONFIG              Configuration file
    -j, --json SCOPE                 JSON format file to load scope from
    -y, --yaml SCOPE                 YAML format file to load scope from
    -m, --mcollective IDENTITY       Use facts from a node (via mcollective) as scope
    -i, --inventory_service IDENTITY Use facts from a node (via Puppet's inventory service) as scope

```

If no key is supplied:

```
[root@arch-dev-vbox ~]# hiera
Please supply a data item to look up
```

In my settings (the default hiera one) I have a file `/var/lib/hiera/global.yaml`  which has the following (testing) content:

```
[root@arch-dev-vbox ~]# cat /var/lib/hiera/global.yaml 
minions:
  host1:
    - group: server
  host2:
    - group: web-server%{environment}
```

If I want to get this info into pillar, I need to use the key "minions":

```
[root@arch-dev-vbox ~]# hiera -c /etc/hiera.yaml minions environment='Linux'
{"host1"=>[{"group"=>"server"}], "host2"=>[{"group"=>"web-serverLinux"}]}
```
